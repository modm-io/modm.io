{
    "docs": [
        {
            "location": "/",
            "text": "modm: a barebone embedded library generator\n\u00b6\n\n\n\n\n\n\n\n\nmodm (pronounced like dial-up \"modem\") is a toolbox for\nbuilding custom C++17 libraries tailored to your embedded device.\nmodm generates startup code, HALs and their implementations, communication\nprotocols, drivers for external devices, BSPs, etc\u2026 in a modular, customizable\nprocess that you can fine-tune to your needs.\n\n\n\n\nCheck out our \ninstall instructions\n and our \ngetting started guide\n.\n\n\nFeast your eyes on \nlots of working examples\n.\n\n\n\n\n\nOur CI checks every contribution for regressions: \n\n\nWe care \nabout testing modm\n.\n\n\n\n\nThis project also has a \ntechnical blog\n to document larger design concepts.\n\n\n\n\nYou found a bug? \nOpen up an issue, we don't bite\n.\n\n\nYou want to contribute? \nRead the contribution guidelines\n and \nopen a pull request\n.\n\n\n\n\n\nmodm is optimized for the harsh requirements of the \nEurobot competition\n,\nwhere our robots need to run reliably and completely autonomously for the game's\n100 second duration. Our robots contain a lot of different microcontrollers, some\nwithout a lot of resources, so modm needs to fulfill a diverse set of objectives,\nlike small code size with small memory consumption, predictable program flow,\nextreme portability.\n\n\nThe source code is freely available under the MPLv2 license, so feel\nfree to fork this project and adapt it to your needs.\nThe only thing we ask of you is to contribute your changes back so everyone benefits.\n\n\nPlease clone modm recursively, you will need all the submodules.\n\n\ngit clone --recurse-submodules https://github.com/modm-io/modm.git\n\n\n\n\nFeatures\n\u00b6\n\n\n\n\nEfficient and fast object-oriented C++17 API.\n\n\nSupport for hundreds of AVR and ARM Cortex-M microcontrollers from Atmel and ST.\n\n\nBuild system agnostic: We use SCons by default, but you don't have to.\n\n\nData-driven HAL generation using the library-builder engine.\n\n\nNo memory allocations in HAL with very low overall RAM consumption.\n\n\nHighly-configurable modules with sensible defaults and lots of documentation.\n\n\nCross platform peripheral interfaces incl. bit banging:\n\n\nGPIO and GPIO expanders.\n\n\nADC and Analog.\n\n\nUART, I\n2\nC, SPI, CAN.\n\n\n\n\n\n\nInterfaces and drivers for many external I2C and SPI sensors and devices.\n\n\nDebug/logging system with IOStream interface.\n\n\nLightweight, stackless threads and resumable functions using cooperative multitasking.\n\n\nUseful filter, interpolation and geometric algorithms.\n\n\nLightweight unit testing system (suitable for AVRs).\n\n\nGraphical user interface for small binary and color displays.\n\n\nHundreds of tests to ensure correct functionality.\n\n\n\n\nTargets\n\u00b6\n\n\nmodm can generate code for \n76\n AVR  and\n\n865\n STM32 devices, however,\nthere are different levels of support and testing.\n\n\n\n\n\n\n\n\n\n\nDevice Family\n\n\nSupport\n\n\nDevice Family\n\n\nSupport\n\n\n\n\n\n\n\n\n\n\nAVR\n\n\n\u2605\u2605\u2605\n\n\nSTM32F3\n\n\n\u2605\u2605\u2605\u2605\u2605\n\n\n\n\n\n\nSTM32F0\n\n\n\u2605\u2605\u2605\u2605\n\n\nSTM32F4\n\n\n\u2605\u2605\u2605\u2605\u2605\n\n\n\n\n\n\nSTM32F1\n\n\n\u2605\u2605\u2605\u2605\n\n\nSTM32F7\n\n\n\u2605\u2605\u2605\u2605\n\n\n\n\n\n\nSTM32F2\n\n\n\u2605\u2605\u2605\n\n\nSTM32L4\n\n\n\u2605\u2605\u2605\u2605\n\n\n\n\n\n\n\n\n\n\nAll of these targets are compiling and booting correctly\n(\u2605)\nand have GPIO and UART working\n(\u2605\u2605).\nMost targets have support for basic peripherals, like I2C, SPI and ADC\n(\u2605\u2605\u2605)\nas well as complicated peripherals, like Timers, CAN and external memory\n(\u2605\u2605\u2605\u2605).\nWe also use a few targets in everyday development, which are very well tested\n(\u2605\u2605\u2605\u2605\u2605).\n\n\nWe are only a small team of developers and are limited in the amount of targets\nwe can support and test in hardware. We have prepared, but currently not finished\nsupport for STM32F2, STM32L0 and STM32L1. \nOpen an issue\n to ask if your\nspecific target is supported out-of-the-box and what you can do if it's not.\n\n\nBoards\n\u00b6\n\n\nWe have out-of-box support for \nseveral development boards\n including\ndocumentation.\n\n\n\n\n\n\n\n\nAL-AVREB-CAN\n\n\nArduino Uno\n\n\nBlack Pill\n\n\nBlue Pill\n\n\n\n\nDISCO-F051R8\n\n\nDISCO-F072RB\n\n\nDISCO-F100RB\n\n\nDISCO-F303VC\n\n\n\n\nDISCO-F407VG\n\n\nDISCO-F429ZI\n\n\nDISCO-F469NI\n\n\nDISCO-F746NG\n\n\n\n\nDISCO-F769NI\n\n\nDISCO-L476VG\n\n\nNUCLEO-F031K6\n\n\nNUCLEO-F042K6\n\n\n\n\nNUCLEO-F103RB\n\n\nNUCLEO-F303K8\n\n\nNUCLEO-F401RE\n\n\nNUCLEO-F411RE\n\n\n\n\nNUCLEO-F429ZI\n\n\nNUCLEO-L432KC\n\n\nNUCLEO-L476RG\n\n\nOLIMEXINO-STM32\n\n\n\n\nSTM32F030F4P6-DEMO\n\n\n\n\n\n\n\n\nDrivers\n\u00b6\n\n\nWe also have a number of completely target-independent \ndrivers for external \ndevices\n connected via I\n2\nC, SPI, UART, BitBang, etc.\nMost of these also give you access to the entire device so you \ncan easily configure them for you specific needs.\n\n\n\n\n\n\n\n\n\n\nAD7280A\n\n\nAD7928\n\n\nADNS9800\n\n\nADS7843\n\n\nAMSYS5915\n\n\nSPI-FLASH\n\n\n\n\nBME280\n\n\nBMP085\n\n\nDRV832X\n\n\nDS1302\n\n\nDS1631\n\n\nDS18B20\n\n\n\n\nEA-DOG\n\n\nFT245\n\n\nFT6X06\n\n\nHCLAx\n\n\nHD44780\n\n\nHMC58x\n\n\n\n\nHMC6343\n\n\nI2C-EEPROM\n\n\nITG3200\n\n\nL3GD20\n\n\nLAWICEL\n\n\nLIS302DL\n\n\n\n\nLIS3DSH\n\n\nLM75\n\n\nLSM303A\n\n\nLTC2984\n\n\nMAX6966\n\n\nMAX7219\n\n\n\n\nMCP23X17\n\n\nMCP2515\n\n\nNOKIA5110\n\n\nNRF24\n\n\nTFT-DISPLAY\n\n\nPCA8574\n\n\n\n\nPCA9535\n\n\nPCA9685\n\n\nSIEMENS-S65\n\n\nSIEMENS-S75\n\n\nSSD1306\n\n\nTCS3414\n\n\n\n\nTCS3472\n\n\nTMP102\n\n\nTMP175\n\n\nVL53L0\n\n\nVL6180\n\n\n\n\n\n\n\n\n\n\nExamples\n\u00b6\n\n\nWe have a \nhuge number of examples\n which are always up-to-date and\ncompilable as enforced by our CI.\n\n\n\n\n\n\n\n\nArduino Uno: basic/analog_read_serial\n\n\nArduino Uno: basic/blink\n\n\n\n\nArduino Uno: basic/digital_read_serial\n\n\nArduino Uno: basic/read_analog_voltage\n\n\n\n\nAVR: 1-wire/ds18b20\n\n\nAVR: adc/basic\n\n\n\n\nAVR: adc/oversample\n\n\nAVR: app_can2usb\n\n\n\n\nAVR: assert\n\n\nAVR: block_device_mirror\n\n\n\n\nAVR: can/mcp2515\n\n\nAVR: can/mcp2515_uart\n\n\n\n\nAVR: display/dogm128/benchmark\n\n\nAVR: display/dogm128/caged_ball\n\n\n\n\nAVR: display/dogm128/draw\n\n\nAVR: display/dogm128/image\n\n\n\n\nAVR: display/dogm128/text\n\n\nAVR: display/dogm128/touch\n\n\n\n\nAVR: display/dogm132\n\n\nAVR: display/dogm163\n\n\n\n\nAVR: display/hd44780\n\n\nAVR: display/siemens_s65\n\n\n\n\nAVR: flash\n\n\nAVR: gpio/basic\n\n\n\n\nAVR: gpio/blinking\n\n\nAVR: gpio/button_group\n\n\n\n\nAVR: logger\n\n\nAVR: ports\n\n\n\n\nAVR: protothread\n\n\nAVR: pwm/pca9685\n\n\n\n\nAVR: sab/master\n\n\nAVR: sab/slave\n\n\n\n\nAVR: timeout\n\n\nAVR: uart/basic\n\n\n\n\nAVR: uart/extended\n\n\nAVR: xpcc/receiver\n\n\n\n\nAVR: xpcc/sender\n\n\nGeneric: blinky\n\n\n\n\nGeneric: resumable\n\n\nGeneric: ros/environment\n\n\n\n\nGeneric: ros/sub_pub\n\n\nGeneric: rtc_ds1302\n\n\n\n\nLinux: assert\n\n\nLinux: block_device/file\n\n\n\n\nLinux: block_device/mirror\n\n\nLinux: block_device/ram\n\n\n\n\nLinux: build_info\n\n\nLinux: can_debugger\n\n\n\n\nLinux: git\n\n\nLinux: gui/basic\n\n\n\n\nLinux: logger\n\n\nLinux: printf\n\n\n\n\nLinux: serial_interface\n\n\nLinux: static_serial_interface\n\n\n\n\nLinux: threads\n\n\nLinux: xpcc/basic\n\n\n\n\nNUCLEO-F031K6: blink\n\n\nNUCLEO-F042K6: blink\n\n\n\n\nNUCLEO-F103RB: blink\n\n\nNUCLEO-F303K8: blink\n\n\n\n\nNUCLEO-F401RE: blink\n\n\nNUCLEO-F401RE: distance_vl53l0\n\n\n\n\nNUCLEO-F411RE: blink\n\n\nNUCLEO-F429ZI: blink\n\n\n\n\nNUCLEO-F429ZI: spi_flash\n\n\nNUCLEO-L432KC: blink\n\n\n\n\nNUCLEO-L432KC: comp\n\n\nNUCLEO-L432KC: pwm\n\n\n\n\nNUCLEO-L432KC: pwm_advanced\n\n\nNUCLEO-L476RG: adc\n\n\n\n\nNUCLEO-L476RG: blink\n\n\nNUCLEO-L476RG: i2c_test\n\n\n\n\nOLIMEXINO-STM32: blink\n\n\nSTM32F030F4P6-DEMO-BOARD: blink\n\n\n\n\nSTM32F072-DISCOVERY: blink\n\n\nSTM32F072-DISCOVERY: can\n\n\n\n\nSTM32F072-DISCOVERY: hard_fault\n\n\nSTM32F072-DISCOVERY: rotation\n\n\n\n\nSTM32F072-DISCOVERY: uart\n\n\nSTM32F072-DISCOVERY: unaligned_access\n\n\n\n\nSTM32F0-DISCOVERY: blink\n\n\nSTM32F0-DISCOVERY: logger\n\n\n\n\nSTM32F103C8T6-Black Pill: blink\n\n\nSTM32F103C8T6-Blue Pill: adns_9800\n\n\n\n\nSTM32F103C8T6-Blue Pill: blink\n\n\nSTM32F103C8T6-Blue Pill: blink.cmake\n\n\n\n\nSTM32F103C8T6-Blue Pill: can\n\n\nSTM32F103C8T6-Blue Pill: environment\n\n\n\n\nSTM32F103C8T6-Blue Pill: logger\n\n\nSTM32F1-DISCOVERY: blink\n\n\n\n\nSTM32F1-DISCOVERY: logger\n\n\nSTM32F3-DISCOVERY: accelerometer\n\n\n\n\nSTM32F3-DISCOVERY: adc/continous\n\n\nSTM32F3-DISCOVERY: adc/interrupt\n\n\n\n\nSTM32F3-DISCOVERY: adc/simple\n\n\nSTM32F3-DISCOVERY: blink\n\n\n\n\nSTM32F3-DISCOVERY: can\n\n\nSTM32F3-DISCOVERY: comp\n\n\n\n\nSTM32F3-DISCOVERY: ft245\n\n\nSTM32F3-DISCOVERY: gdb\n\n\n\n\nSTM32F3-DISCOVERY: hard_fault\n\n\nSTM32F3-DISCOVERY: rotation\n\n\n\n\nSTM32F3-DISCOVERY: timer/basic\n\n\nSTM32F3-DISCOVERY: uart/hal\n\n\n\n\nSTM32F3-DISCOVERY: uart/logger\n\n\nSTM32F429-DISCOVERY: blink\n\n\n\n\nSTM32F429-DISCOVERY: logger\n\n\nSTM32F469-DISCOVERY: assert\n\n\n\n\nSTM32F469-DISCOVERY: blink\n\n\nSTM32F469-DISCOVERY: display\n\n\n\n\nSTM32F469-DISCOVERY: game_of_life\n\n\nSTM32F469-DISCOVERY: ports\n\n\n\n\nSTM32F469-DISCOVERY: tlsf-allocator\n\n\nSTM32F469-DISCOVERY: touchscreen\n\n\n\n\nSTM32F4-DISCOVERY: accelerometer\n\n\nSTM32F4-DISCOVERY: adc/interrupt\n\n\n\n\nSTM32F4-DISCOVERY: adc/oversample\n\n\nSTM32F4-DISCOVERY: adc/simple\n\n\n\n\nSTM32F4-DISCOVERY: app_uart_sniffer\n\n\nSTM32F4-DISCOVERY: barometer_bmp085_bmp180\n\n\n\n\nSTM32F4-DISCOVERY: blink\n\n\nSTM32F4-DISCOVERY: can\n\n\n\n\nSTM32F4-DISCOVERY: colour_tcs3414\n\n\nSTM32F4-DISCOVERY: display/hd44780\n\n\n\n\nSTM32F4-DISCOVERY: display/nokia_5110\n\n\nSTM32F4-DISCOVERY: display/ssd1306\n\n\n\n\nSTM32F4-DISCOVERY: distance_vl6180\n\n\nSTM32F4-DISCOVERY: exti\n\n\n\n\nSTM32F4-DISCOVERY: fpu\n\n\nSTM32F4-DISCOVERY: fsmc\n\n\n\n\nSTM32F4-DISCOVERY: hard_fault\n\n\nSTM32F4-DISCOVERY: led_matrix_display\n\n\n\n\nSTM32F4-DISCOVERY: open407v-d/gui\n\n\nSTM32F4-DISCOVERY: open407v-d/touchscreen\n\n\n\n\nSTM32F4-DISCOVERY: pressure_amsys5915\n\n\nSTM32F4-DISCOVERY: protothreads\n\n\n\n\nSTM32F4-DISCOVERY: radio/nrf24-basic-comm\n\n\nSTM32F4-DISCOVERY: radio/nrf24-data/rx\n\n\n\n\nSTM32F4-DISCOVERY: radio/nrf24-data/tx\n\n\nSTM32F4-DISCOVERY: radio/nrf24-phy-test\n\n\n\n\nSTM32F4-DISCOVERY: radio/nrf24-scanner\n\n\nSTM32F4-DISCOVERY: rtos/float_check\n\n\n\n\nSTM32F4-DISCOVERY: sab2\n\n\nSTM32F4-DISCOVERY: spi\n\n\n\n\nSTM32F4-DISCOVERY: temperature_ltc2984\n\n\nSTM32F4-DISCOVERY: timer\n\n\n\n\nSTM32F4-DISCOVERY: timer_test\n\n\nSTM32F4-DISCOVERY: uart\n\n\n\n\nSTM32F4-DISCOVERY: uart_spi\n\n\nSTM32F746G-DISCOVERY: adc_ad7928\n\n\n\n\nSTM32F746G-DISCOVERY: blink\n\n\nSTM32F769I-DISCOVERY: blink\n\n\n\n\nSTM32L476-DISCOVERY: blink\n\n\nWindows: build_info\n\n\n\n\nZMQ: 1_stm32\n\n\nZMQ: 2_zmq_gateway\n\n\n\n\nZMQ: 3_zmq_app\n\n\nZMQ: 4_zmq_backtoback",
            "title": "Introduction"
        },
        {
            "location": "/#modm-a-barebone-embedded-library-generator",
            "text": "modm (pronounced like dial-up \"modem\") is a toolbox for\nbuilding custom C++17 libraries tailored to your embedded device.\nmodm generates startup code, HALs and their implementations, communication\nprotocols, drivers for external devices, BSPs, etc\u2026 in a modular, customizable\nprocess that you can fine-tune to your needs.   Check out our  install instructions  and our  getting started guide .  Feast your eyes on  lots of working examples .   Our CI checks every contribution for regressions:   We care  about testing modm .   This project also has a  technical blog  to document larger design concepts.   You found a bug?  Open up an issue, we don't bite .  You want to contribute?  Read the contribution guidelines  and  open a pull request .   modm is optimized for the harsh requirements of the  Eurobot competition ,\nwhere our robots need to run reliably and completely autonomously for the game's\n100 second duration. Our robots contain a lot of different microcontrollers, some\nwithout a lot of resources, so modm needs to fulfill a diverse set of objectives,\nlike small code size with small memory consumption, predictable program flow,\nextreme portability.  The source code is freely available under the MPLv2 license, so feel\nfree to fork this project and adapt it to your needs.\nThe only thing we ask of you is to contribute your changes back so everyone benefits.  Please clone modm recursively, you will need all the submodules.  git clone --recurse-submodules https://github.com/modm-io/modm.git",
            "title": "modm: a barebone embedded library generator"
        },
        {
            "location": "/#features",
            "text": "Efficient and fast object-oriented C++17 API.  Support for hundreds of AVR and ARM Cortex-M microcontrollers from Atmel and ST.  Build system agnostic: We use SCons by default, but you don't have to.  Data-driven HAL generation using the library-builder engine.  No memory allocations in HAL with very low overall RAM consumption.  Highly-configurable modules with sensible defaults and lots of documentation.  Cross platform peripheral interfaces incl. bit banging:  GPIO and GPIO expanders.  ADC and Analog.  UART, I 2 C, SPI, CAN.    Interfaces and drivers for many external I2C and SPI sensors and devices.  Debug/logging system with IOStream interface.  Lightweight, stackless threads and resumable functions using cooperative multitasking.  Useful filter, interpolation and geometric algorithms.  Lightweight unit testing system (suitable for AVRs).  Graphical user interface for small binary and color displays.  Hundreds of tests to ensure correct functionality.",
            "title": "Features"
        },
        {
            "location": "/#targets",
            "text": "modm can generate code for  76  AVR  and 865  STM32 devices, however,\nthere are different levels of support and testing.      Device Family  Support  Device Family  Support      AVR  \u2605\u2605\u2605  STM32F3  \u2605\u2605\u2605\u2605\u2605    STM32F0  \u2605\u2605\u2605\u2605  STM32F4  \u2605\u2605\u2605\u2605\u2605    STM32F1  \u2605\u2605\u2605\u2605  STM32F7  \u2605\u2605\u2605\u2605    STM32F2  \u2605\u2605\u2605  STM32L4  \u2605\u2605\u2605\u2605      All of these targets are compiling and booting correctly\n(\u2605)\nand have GPIO and UART working\n(\u2605\u2605).\nMost targets have support for basic peripherals, like I2C, SPI and ADC\n(\u2605\u2605\u2605)\nas well as complicated peripherals, like Timers, CAN and external memory\n(\u2605\u2605\u2605\u2605).\nWe also use a few targets in everyday development, which are very well tested\n(\u2605\u2605\u2605\u2605\u2605).  We are only a small team of developers and are limited in the amount of targets\nwe can support and test in hardware. We have prepared, but currently not finished\nsupport for STM32F2, STM32L0 and STM32L1.  Open an issue  to ask if your\nspecific target is supported out-of-the-box and what you can do if it's not.",
            "title": "Targets"
        },
        {
            "location": "/#boards",
            "text": "We have out-of-box support for  several development boards  including\ndocumentation.     AL-AVREB-CAN  Arduino Uno  Black Pill  Blue Pill   DISCO-F051R8  DISCO-F072RB  DISCO-F100RB  DISCO-F303VC   DISCO-F407VG  DISCO-F429ZI  DISCO-F469NI  DISCO-F746NG   DISCO-F769NI  DISCO-L476VG  NUCLEO-F031K6  NUCLEO-F042K6   NUCLEO-F103RB  NUCLEO-F303K8  NUCLEO-F401RE  NUCLEO-F411RE   NUCLEO-F429ZI  NUCLEO-L432KC  NUCLEO-L476RG  OLIMEXINO-STM32   STM32F030F4P6-DEMO",
            "title": "Boards"
        },
        {
            "location": "/#drivers",
            "text": "We also have a number of completely target-independent  drivers for external \ndevices  connected via I 2 C, SPI, UART, BitBang, etc.\nMost of these also give you access to the entire device so you \ncan easily configure them for you specific needs.      AD7280A  AD7928  ADNS9800  ADS7843  AMSYS5915  SPI-FLASH   BME280  BMP085  DRV832X  DS1302  DS1631  DS18B20   EA-DOG  FT245  FT6X06  HCLAx  HD44780  HMC58x   HMC6343  I2C-EEPROM  ITG3200  L3GD20  LAWICEL  LIS302DL   LIS3DSH  LM75  LSM303A  LTC2984  MAX6966  MAX7219   MCP23X17  MCP2515  NOKIA5110  NRF24  TFT-DISPLAY  PCA8574   PCA9535  PCA9685  SIEMENS-S65  SIEMENS-S75  SSD1306  TCS3414   TCS3472  TMP102  TMP175  VL53L0  VL6180",
            "title": "Drivers"
        },
        {
            "location": "/#examples",
            "text": "We have a  huge number of examples  which are always up-to-date and\ncompilable as enforced by our CI.     Arduino Uno: basic/analog_read_serial  Arduino Uno: basic/blink   Arduino Uno: basic/digital_read_serial  Arduino Uno: basic/read_analog_voltage   AVR: 1-wire/ds18b20  AVR: adc/basic   AVR: adc/oversample  AVR: app_can2usb   AVR: assert  AVR: block_device_mirror   AVR: can/mcp2515  AVR: can/mcp2515_uart   AVR: display/dogm128/benchmark  AVR: display/dogm128/caged_ball   AVR: display/dogm128/draw  AVR: display/dogm128/image   AVR: display/dogm128/text  AVR: display/dogm128/touch   AVR: display/dogm132  AVR: display/dogm163   AVR: display/hd44780  AVR: display/siemens_s65   AVR: flash  AVR: gpio/basic   AVR: gpio/blinking  AVR: gpio/button_group   AVR: logger  AVR: ports   AVR: protothread  AVR: pwm/pca9685   AVR: sab/master  AVR: sab/slave   AVR: timeout  AVR: uart/basic   AVR: uart/extended  AVR: xpcc/receiver   AVR: xpcc/sender  Generic: blinky   Generic: resumable  Generic: ros/environment   Generic: ros/sub_pub  Generic: rtc_ds1302   Linux: assert  Linux: block_device/file   Linux: block_device/mirror  Linux: block_device/ram   Linux: build_info  Linux: can_debugger   Linux: git  Linux: gui/basic   Linux: logger  Linux: printf   Linux: serial_interface  Linux: static_serial_interface   Linux: threads  Linux: xpcc/basic   NUCLEO-F031K6: blink  NUCLEO-F042K6: blink   NUCLEO-F103RB: blink  NUCLEO-F303K8: blink   NUCLEO-F401RE: blink  NUCLEO-F401RE: distance_vl53l0   NUCLEO-F411RE: blink  NUCLEO-F429ZI: blink   NUCLEO-F429ZI: spi_flash  NUCLEO-L432KC: blink   NUCLEO-L432KC: comp  NUCLEO-L432KC: pwm   NUCLEO-L432KC: pwm_advanced  NUCLEO-L476RG: adc   NUCLEO-L476RG: blink  NUCLEO-L476RG: i2c_test   OLIMEXINO-STM32: blink  STM32F030F4P6-DEMO-BOARD: blink   STM32F072-DISCOVERY: blink  STM32F072-DISCOVERY: can   STM32F072-DISCOVERY: hard_fault  STM32F072-DISCOVERY: rotation   STM32F072-DISCOVERY: uart  STM32F072-DISCOVERY: unaligned_access   STM32F0-DISCOVERY: blink  STM32F0-DISCOVERY: logger   STM32F103C8T6-Black Pill: blink  STM32F103C8T6-Blue Pill: adns_9800   STM32F103C8T6-Blue Pill: blink  STM32F103C8T6-Blue Pill: blink.cmake   STM32F103C8T6-Blue Pill: can  STM32F103C8T6-Blue Pill: environment   STM32F103C8T6-Blue Pill: logger  STM32F1-DISCOVERY: blink   STM32F1-DISCOVERY: logger  STM32F3-DISCOVERY: accelerometer   STM32F3-DISCOVERY: adc/continous  STM32F3-DISCOVERY: adc/interrupt   STM32F3-DISCOVERY: adc/simple  STM32F3-DISCOVERY: blink   STM32F3-DISCOVERY: can  STM32F3-DISCOVERY: comp   STM32F3-DISCOVERY: ft245  STM32F3-DISCOVERY: gdb   STM32F3-DISCOVERY: hard_fault  STM32F3-DISCOVERY: rotation   STM32F3-DISCOVERY: timer/basic  STM32F3-DISCOVERY: uart/hal   STM32F3-DISCOVERY: uart/logger  STM32F429-DISCOVERY: blink   STM32F429-DISCOVERY: logger  STM32F469-DISCOVERY: assert   STM32F469-DISCOVERY: blink  STM32F469-DISCOVERY: display   STM32F469-DISCOVERY: game_of_life  STM32F469-DISCOVERY: ports   STM32F469-DISCOVERY: tlsf-allocator  STM32F469-DISCOVERY: touchscreen   STM32F4-DISCOVERY: accelerometer  STM32F4-DISCOVERY: adc/interrupt   STM32F4-DISCOVERY: adc/oversample  STM32F4-DISCOVERY: adc/simple   STM32F4-DISCOVERY: app_uart_sniffer  STM32F4-DISCOVERY: barometer_bmp085_bmp180   STM32F4-DISCOVERY: blink  STM32F4-DISCOVERY: can   STM32F4-DISCOVERY: colour_tcs3414  STM32F4-DISCOVERY: display/hd44780   STM32F4-DISCOVERY: display/nokia_5110  STM32F4-DISCOVERY: display/ssd1306   STM32F4-DISCOVERY: distance_vl6180  STM32F4-DISCOVERY: exti   STM32F4-DISCOVERY: fpu  STM32F4-DISCOVERY: fsmc   STM32F4-DISCOVERY: hard_fault  STM32F4-DISCOVERY: led_matrix_display   STM32F4-DISCOVERY: open407v-d/gui  STM32F4-DISCOVERY: open407v-d/touchscreen   STM32F4-DISCOVERY: pressure_amsys5915  STM32F4-DISCOVERY: protothreads   STM32F4-DISCOVERY: radio/nrf24-basic-comm  STM32F4-DISCOVERY: radio/nrf24-data/rx   STM32F4-DISCOVERY: radio/nrf24-data/tx  STM32F4-DISCOVERY: radio/nrf24-phy-test   STM32F4-DISCOVERY: radio/nrf24-scanner  STM32F4-DISCOVERY: rtos/float_check   STM32F4-DISCOVERY: sab2  STM32F4-DISCOVERY: spi   STM32F4-DISCOVERY: temperature_ltc2984  STM32F4-DISCOVERY: timer   STM32F4-DISCOVERY: timer_test  STM32F4-DISCOVERY: uart   STM32F4-DISCOVERY: uart_spi  STM32F746G-DISCOVERY: adc_ad7928   STM32F746G-DISCOVERY: blink  STM32F769I-DISCOVERY: blink   STM32L476-DISCOVERY: blink  Windows: build_info   ZMQ: 1_stm32  ZMQ: 2_zmq_gateway   ZMQ: 3_zmq_app  ZMQ: 4_zmq_backtoback",
            "title": "Examples"
        },
        {
            "location": "/how-modm-works/",
            "text": "How modm works\n\u00b6\n\n\nmodm is an umbrella project for a handful of stand-alone projects and acts as\na curated toolbox for creating custom C++ libraries for embedded targets.\nThree of these projects form the heart of modm:\n\n\n\n\nmodm-devices\n contains hardware descriptions like memories, peripherals and pins of many devices.\n\n\nmodm\n provides configurable modules to translate this data into code, tests and documentation.\n\n\nlbuild\n links these two together using the Jinja2 template engine in Python to create a custom library for your target.\n\n\n\n\nAs a developer you can use lbuild to explore the modm modules, configure them \nspecifically for your targets and needs and generate a custom library.\nYou can generate more than just code, in this example, lbuild also generates a \nbuild system which then compiles and links the application into a executable.\n\n\n\n\n\n\n\n\nWe've also put a lot of thought into modm-devices, about what data to extract,\nhow to format and store it. We automated the entire process to get the high\nquality data we use to build our library.\nYou can read all \nabout modm-devices in this blog post\n.\n\n\n\n\nmodm is highly modular\n\u00b6\n\n\nmodm's modules are kept small in scope on purpose and declare their dependencies,\nso that lbuild can build a minimal library from the initial modules you specified.\nSo if you only want to use our UART drivers for example, lbuild will only include\ncode from that module and its dependencies.\nThis makes it easier to understand what parts of modm you actually use, either\nby looking at the dependency graph before, or by inspecting the generated code\nafter calling lbuild, and gives you the opportunity to only use the parts of\nmodm you really like.\n\n\n\n\nA lbuild module is just a few lines of Python code. Here we can see the code for\nthe \nmodm:platform:uart\n module from the example above. It declares its name,\nits dependencies and then which files it wants to generate where to using the \ndata from modm-devices, by just setting the \nenv.substitutions\n to the device's\nproperties and calling \nenv.template\n with the input and output file names.\n\n\ndef\n \ninit\n(\nmodule\n):\n\n    \nmodule\n.\nname\n \n=\n \n\"uart\"\n\n    \nmodule\n.\nparent\n \n=\n \n\"platform\"\n\n\n\ndef\n \nprepare\n(\nmodule\n,\n \noptions\n):\n\n    \nmodule\n.\ndepends\n(\n\":architecture:interrupt\"\n,\n \n\":architecture:register\"\n,\n \n                   \n\":architecture:atomic\"\n,\n \n\":architecture:uart\"\n,\n \n\":platform:gpio\"\n)\n\n    \nreturn\n \nTrue\n\n\n\ndef\n \nbuild\n(\nenv\n):\n\n    \ndevice\n \n=\n \nenv\n[\n\":target\"\n]\n\n    \nenv\n.\nsubstitutions\n \n=\n \ndevice\n.\nproperties\n\n    \nenv\n.\noutbasepath\n \n=\n \n\"src/modm/platform/uart\"\n\n    \nfor\n \ninstance\n \nin\n \ndevice\n.\nget_driver\n(\n\"uart:stm32*\"\n)[\n\"instance\"\n]:\n\n        \nenv\n.\ntemplate\n(\n\"uart.hpp.in\"\n,\n \n\"uart_{}.hpp\"\n.\nformat\n(\ninstance\n))\n\n        \nenv\n.\ntemplate\n(\n\"uart.cpp.in\"\n,\n \n\"uart_{}.cpp\"\n.\nformat\n(\ninstance\n))\n\n\n\n\n\nThe input template then can access all the devices properties, and generate\nthe correct code for this device. Here the template on left is passed to the \n\nJinja2 engine\n which outputs the code on the right.\n\n\n\n\n\n\n\n\n\n\nvoid {{ name }}::write(uint8_t data)\n{\n%% if \"extended\" in driver[\"type\"]\n    {{ peripheral }}->TDR = data;\n%% else\n    {{ peripheral }}->DR = data;\n%% endif\n}\n\n\n\n\n\n\n\nvoid\n \nUart4\n::\nwrite\n(\nuint8_t\n \ndata\n)\n\n\n{\n\n    \nUART4\n->\nDR\n \n=\n \ndata\n;\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\nThis example is simple, but since it's based on Python, \nanything more \ncomplicated is possible\n.\nLooking at the data excerpt from a STM32 device the above module will generate a\nonly three classes of this type for this target. However, a similar driver will\ngenerate classes for the four USART peripherals.\n\n\n...\n\n<driver\n \nname=\n\"uart\"\n \ntype=\n\"stm32\"\n>\n\n  \n<instance\n \nvalue=\n\"4\"\n/>\n\n  \n<instance\n \nvalue=\n\"5\"\n/>\n\n  \n<instance\n \nvalue=\n\"7\"\n/>\n\n\n</driver>\n\n\n<driver\n \nname=\n\"usart\"\n \ntype=\n\"stm32\"\n>\n\n  \n<instance\n \nvalue=\n\"1\"\n/>\n\n  \n<instance\n \nvalue=\n\"2\"\n/>\n\n  \n<instance\n \nvalue=\n\"3\"\n/>\n\n  \n<instance\n \nvalue=\n\"6\"\n/>\n\n\n</driver>\n\n...\n\n\n\n\nWith these techiques we can generate a target specific HAL for hundreds of devices.\nDon't believe us? \nCheck out our CI doing just that\n.\n\n\n\n\n\n\n\n\nmodm asserts at compile-time\n\u00b6\n\n\nmodm stands out for its extensive use of generated static C++ (template) classes.\nConsider this data from the GPIO peripheral, which shows the signal map for the\n\nPA0\n pin on a STM32 device.\n\n\n...\n\n<driver\n \nname=\n\"gpio\"\n \ntype=\n\"stm32\"\n>\n\n  \n<gpio\n \nport=\n\"a\"\n \npin=\n\"0\"\n>\n\n    \n<signal\n \ndriver=\n\"adc\"\n \ninstance=\n\"1\"\n \nname=\n\"in0\"\n/>\n\n    \n<signal\n \ndriver=\n\"adc\"\n \ninstance=\n\"2\"\n \nname=\n\"in0\"\n/>\n\n    \n<signal\n \ndriver=\n\"adc\"\n \ninstance=\n\"3\"\n \nname=\n\"in0\"\n/>\n\n    \n<signal\n \naf=\n\"1\"\n \ndriver=\n\"tim\"\n \ninstance=\n\"2\"\n \nname=\n\"ch1\"\n/>\n\n    \n<signal\n \naf=\n\"2\"\n \ndriver=\n\"tim\"\n \ninstance=\n\"5\"\n \nname=\n\"ch1\"\n/>\n\n    \n<signal\n \naf=\n\"8\"\n \ndriver=\n\"uart\"\n \ninstance=\n\"4\"\n \nname=\n\"tx\"\n/>\n\n    ...\n\n\n\n\nWe use this data in the \nmodm:platform:gpio\n module to generate type-safe \nsignal connections, which will then assert that the signal you want to connect\nactually exists on this pin and even gives you a helpful (!) error message at \ncompile time.\n\n\nclass\n \nGpioA0\n\n\n{\n\n\n...\n\n    \ntemplate\n<\n \nPeripheral\n \nperipheral\n \n>\n\n    \nstruct\n \nTx\n \n{\n\n        \nstatic_assert\n(\n\n            \n(\nperipheral\n \n==\n \nPeripheral\n::\nUart4\n),\n\n            \n\"GpioA0::Tx only connects to Uart4!\"\n);\n\n    \n};\n\n    \ntemplate\n<\n \nPeripheral\n \nperipheral\n \n>\n\n    \nstruct\n \nCh1\n \n{\n\n        \nstatic_assert\n(\n\n            \n(\nperipheral\n \n==\n \nPeripheral\n::\nTim2\n)\n \n||\n\n            \n(\nperipheral\n \n==\n \nPeripheral\n::\nTim5\n),\n\n            \n\"GpioA0::Ch1 only connects to Tim2 or Tim5!\"\n);\n\n    \n};\n\n    \ntemplate\n<\n \nPeripheral\n \nperipheral\n \n>\n\n    \nstruct\n \nIn0\n \n{\n\n        \nstatic_assert\n(\n\n            \n(\nperipheral\n \n==\n \nPeripheral\n::\nAdc1\n)\n \n||\n\n            \n(\nperipheral\n \n==\n \nPeripheral\n::\nAdc2\n)\n \n||\n\n            \n(\nperipheral\n \n==\n \nPeripheral\n::\nAdc3\n),\n\n            \n\"GpioA0::In0 only connects to Adc1 or Adc2 or Adc3!\"\n);\n\n    \n};\n\n\n...\n\n\n};\n\n\n\n\n\nContinuing with this technique, we can even check if your signal groups are \nconflict free of overlaps or invalid configurations and again give you a \nhelpful error message!\n\n\n\n\n\n\n\n\n\n\nUart4\n::\nconnect\n<\nGpioA0\n::\nTx\n>\n();\n\n\nAdc1\n::\nconnect\n<\nGpioA0\n::\nIn0\n,\n \nGpioA1\n::\nIn1\n>\n();\n\n\nTim2\n::\nconnect\n<\nGpioA0\n::\nCh1\n,\n \nGpioA1\n::\nCh2\n,\n \n              \nGpioA2\n::\nCh3\n,\n \nGpioA3\n::\nCh4\n>\n();\n\n\nTim5\n::\nconnect\n<\nGpioA0\n::\nCh1\n,\n \nGpioA1\n::\nCh2\n,\n \n              \nGpioA2\n::\nCh3\n,\n \nGpioA3\n::\nCh4\n>\n();\n\n\n\n\n\n\n\n\nMaps to GpioA0::setAlternateFunction(8);\nMaps to GpioAx::setAnalogInput();\nEach pin in group called with their\n    respective Alternate Function ID\nSame API, but for Timer5 different \n    Alternate Function IDs are used\n\n\n\n\n\n\n\n\n\n\n\nUart4\n::\nconnect\n<\nGpioA0\n::\nRx\n>\n();\n\n\n\n\n\n\n\n\nerror: 'Rx' is not a member of 'GpioA0'\n\n\n\n\n\n\n\n\n\n\n\nUart4\n::\nconnect\n<\nGpioA2\n::\nTx\n>\n();\n\n\n\n\n\n\n\n\nerror: GpioA2::Tx only connects to Usart2!\n\n\n\n\n\n\n\n\n\n\n\nUsart1\n::\nconnect\n<\nGpioA9\n::\nTx\n,\n \nGpioB7\n::\nRx\n>\n();\n\n\n\n\n\n\n\n\nerror: This pin set contains conflicting remap groups!\nAvailable groups for Usart1 are:\n Usart1 | 0  | 1\n--------|----|----\n   A9   | Tx |\n  A10   | Rx |\n   B6   |    | Tx\n   B7   |    | Rx\n\n\n\n\n\n\n\n\n\n\n\nWe use a similar technique to \ncompute baudrates at compile time\n\nand make sure the resulting baudrates remains within the specified error tolerances.\nIn addition the executable now only contains prescaler values which are written\ndirectly to the hardware without any computation required. This is very helpful\nfor keeping code size in check on very resource constrained targets, like the AVRs.\n\n\nUart4\n::\nconnect\n<\nGpioA0\n::\nTx\n,\n \nGpioA1\n::\nRx\n>\n(\nGpio\n::\nInputType\n::\nPullUp\n);\n \n// pull-up in RX pin\n\n\nUart4\n::\ninitialize\n<\nBoard\n::\nsystemClock\n,\n \n115\n'\n200\n>\n();\n \n// Within 1% default tolerance\n\n\nUart4\n::\ninitialize\n<\nBoard\n::\nsystemClock\n,\n \n115\n'\n200\n,\n \nTolerance\n::\nExact\n>\n();\n\n\n// error: The closest available baudrate exceeds the tolerance of the requested baudrate!\n\n\n\n\n\nmodm is fast and usable\n\u00b6\n\n\nmodm's APIs are kept simple and fast by splitting up functionality into\nseparate, small, static functions, which implement the same behavior on all\nplatforms.\nAnd with our code generation capabilities, we can hide the crazy\nimplementation details of the hardware without compromising on performance.\nFor example, on different AVRs, simple things like enabling the internal pull-up resistor,\ndealing with external interrupts or even just toggling a pin is done quite dissimilarly in hardware, yet we can wrap this in the same API for every target.\n\n\nSince we\u2018re using static inlined functions that often just compile to a handful of instructions  we can call our GPIOs at \nludicrous speed\n.\n\n\n// All pin functions follow a common naming scheme\n\n\nusing\n \nLed\n \n=\n \nGpioB1\n;\n\n\nLed\n::\nsetOutput\n();\n\n\nLed\n::\nset\n();\n \nLed\n::\nreset\n();\n\n\nLed\n::\ntoggle\n();\n\n\nusing\n \nButton\n \n=\n \nGpioA0\n;\n\n\nButton\n::\nsetInput\n();\n\n\nbool\n \nstate\n \n=\n \nButton\n::\nread\n();\n\n\n\n// Depending on your targets, additional functions are available\n\n\nLed\n::\nsetOutput\n(\nGpio\n::\nOutputType\n::\nOpenDrain\n);\n\n\nButton\n::\nsetInput\n(\nGpio\n::\nInputType\n::\nPullUp\n);\n\n\nButton\n::\nsetInputTrigger\n(\nGpio\n::\nInputTrigger\n::\nRisingEdge\n);\n\n\nButton\n::\nenableExternalInterrupt\n();\n\n\nButton\n::\nacknowledgeExternalInterruptFlag\n();\n\n\n\n\n\nYou can use these GPIOs as building blocks for more complex drivers and\nperipherals and still maintain access speed without sacrificing usability:\n\n\n// Create a hardware accelerated port of 4 bit width.\n\n\nusing\n \nPort4\n \n=\n \nGpioPort\n<\n \nGpioC0\n,\n \n4\n \n>\n;\n        \n// MSB -> C3, C2, C1, C0 <- LSB\n\n\nusing\n \nReadWrite\n \n=\n \nGpioC4\n;\n                   \n// \"name\" your GPIOs.\n\n\nusing\n \nReset\n \n=\n \nGpioOutputC5\n;\n\n\nusing\n \nEnable\n \n=\n \nGpioOutputC6\n;\n\n\n\n// Build a super fast character display driver using these inlined GPIOs.\n\n\nmodm\n::\nHd44780\n<\nPort4\n,\n \nReadWrite\n,\n \nReset\n,\n \nEnable\n>\n \ndisplay\n;\n\n\ndisplay\n.\ninitialize\n();\n   \n// driver knows to initialize for a 4 bit bus!\n\n\ndisplay\n \n<<\n \n\"Hello World!\"\n \n<<\n \nmodm\n::\nendl\n;\n    \n// Yes, ostreams. Deal with it.\n\n\ndisplay\n.\nprintf\n(\n\"You don't really have to use %s!\"\n,\n \n\"OStreams\"\n);\n\n\n\n\n\nAll drivers in modm follow the same principle of building up your hardware drivers from other parts of the HAL by passing them as template parameters. This works surprisingly well to reduce both code size and execution time. For example, here is how you assemble and initialize a driver for the MCP23x17 GPIO expander and then use its pins.\n\n\nusing\n \nTransport\n \n=\n \nmodm\n::\nMcp23TransportSpi\n<\n \nSpiMaster1\n,\n \nGpioA0\n \n>\n;\n\n\nusing\n \nGpioExpander\n \n=\n \nmodm\n::\nMcp23x17\n<\n \nTransport\n \n>\n;\n\n\nGpioExpander\n \nexpander\n;\n\n\n// Connect and initialize the peripherals\n\n\nSpiMaster1\n::\nconnect\n<\nGpioA0\n::\nSck\n,\n \nGpioA1\n::\nMosi\n,\n \nGpioA2\n::\nMiso\n>\n();\n\n\nSpiMaster1\n::\ninitialize\n<\nBoard\n::\nsystemClock\n,\n \n1\nMHz\n>\n();\n\n\nexpander\n.\ninitialize\n();\n\n\n// Bind the expander pins to a simpler name\n\n\nusing\n \nPin0\n \n=\n \nGpioExpander\n::\nP0\n<\n \nexpander\n \n>\n;\n\n\nusing\n \nPin1\n \n=\n \nGpioExpander\n::\nP1\n<\n \nexpander\n \n>\n;\n\n\n// Oh, look, same API\n\n\nPin0\n::\nsetOutput\n();\n\n\nPin0\n::\ntoggle\n();\n\n\nPin1\n::\nsetInput\n();\n\n\nbool\n \nstate\n \n=\n \nPin1\n::\nread\n();\n\n\n\n\n\nmodm is memory-efficient\n\u00b6\n\n\nOur HAL does not allocate memory dynamically \u2013 everything is either\nstatically allocated or must explicitly be allocated by the user.\nThis is a strong requirement for running modm on AVRs, which have\nlittle if any memory to spare for dynamic allocations.\n\n\nWe took great care to make sure this constraint remains usable, making \nconfiguration options first-class citizens in lbuild for you to easily discover\nand safely change. When we do need to allocate static memory, we choose a \nsensible default size for its purpose.\n\n\n $ lbuild discover-module-options\n...\nmodm:platform:core:main_stack_size = 3040  [256 ... 65536]\n\n  Minimum size of the application main stack\n...\nmodm:platform:uart:1:buffer.rx = 16  [1 ... 65534]\nmodm:platform:uart:1:buffer.tx = 250  [1 ... 65534]\n\n\n\n\nWe transparently show you how much static memory your application is using,\nso you get an idea of how much certain functionality costs you in resources.\nThis is the size of the accelerometer example on the STM32F4 discovery board:\n\n\n $ cd examples/stm32f4_discovery/accelerometer\n $ scons\n...\nMemory usage\u00b7\u00b7\u00b7 build/stm32f4_discovery/accelerometer/project.elf\n\nProgram:    8144B (0.8% used)\n(.fastcode + .fastdata + .hardware_init + .reset + .rodata + .table.copy.intern +\n .table.section_heap + .table.zero.intern + .text)\n\nData:       3464B (1.7% used) = 424B static (0.2%) + 3040B stack (1.5%)\n(.bss + .fastdata + .stack)\n\nHeap:     197240B (98.3% available)\n(.heap0 + .heap1 + .heap2 + .heap5)\n\n\n\n\n\nmodm does multitasking\n\u00b6\n\n\n\n\n\nmodm uses stackless cooperative multitasking, for which we have ported\nprotothreads to C++ and extended them with resumable functions.\nThis enables you to split up your application into separate tasks, and use\nsynchronous APIs in all of them, without sacrificing overall responsiveness.\nThis works on even the most resource restricted AVRs, since each task only\nrequires 2 bytes of static RAM!\n\n\nAll our IC drivers are implemented using resumable functions, which can be\ncalled from within protothreads or explicitly blocking outside of them.\nHere is an example of \nreading out the accelerometer\n:\n\n\nclass\n \nReaderThread\n \n:\n \npublic\n \nmodm\n::\npt\n::\nProtothread\n\n\n{\n\n\npublic\n:\n\n    \nbool\n \nrun\n()\n\n    \n{\n\n        \nPT_BEGIN\n();\n\n        \n// The driver does several I2C transfer here to initialize and configure the\n\n        \n// external sensor. The CPU is free to do other things while this happens though.\n\n        \nPT_CALL\n(\naccelerometer\n.\nconfigure\n(\naccelerometer\n.\nScale\n::\nG2\n));\n\n\n        \nwhile\n \n(\ntrue\n)\n    \n// this feels quite similar to regular threads\n\n        \n{\n\n            \n// this resumable function will defer execution back to other protothreads\n\n            \nPT_CALL\n(\naccelerometer\n.\nreadAcceleration\n());\n\n\n            \n// smooth out the acceleration data a little bit\n\n            \naverageX\n.\nupdate\n(\naccelerometer\n.\ngetData\n().\ngetX\n());\n\n            \naverageY\n.\nupdate\n(\naccelerometer\n.\ngetData\n().\ngetY\n());\n\n\n            \n// set the boards LEDs depending on the acceleration values\n\n            \nLedUp\n::\nset\n(\n   \naverageX\n.\ngetValue\n()\n \n<\n \n-\n0.2\n);\n\n            \nLedDown\n::\nset\n(\n \naverageX\n.\ngetValue\n()\n \n>\n  \n0.2\n);\n\n            \nLedLeft\n::\nset\n(\n \naverageY\n.\ngetValue\n()\n \n<\n \n-\n0.2\n);\n\n            \nLedRight\n::\nset\n(\naverageY\n.\ngetValue\n()\n \n>\n  \n0.2\n);\n\n\n            \n// defer back to other protothreads until the timer fires\n\n            \nPT_WAIT_UNTIL\n(\ntimer\n.\nexecute\n());\n\n        \n}\n\n        \nPT_END\n();\n\n    \n}\n\n\nprivate\n:\n\n    \n// This accelerometer is connected via I2C.\n\n    \nmodm\n::\nLis3dsh\n<\n \nmodm\n::\nLis3TransportI2c\n<\n \nI2cMaster\n \n>\n \n>\n \naccelerometer\n;\n\n    \nmodm\n::\nPeriodicTimer\n \ntimer\n \n=\n \nmodm\n::\nPeriodicTimer\n(\n5\n);\n \n// 5ms periodic timer.\n\n    \nmodm\n::\nfilter\n::\nMovingAverage\n<\nfloat\n,\n \n25\n>\n \naverageX\n;\n\n    \nmodm\n::\nfilter\n::\nMovingAverage\n<\nfloat\n,\n \n25\n>\n \naverageY\n;\n\n\n};\n\n\nReaderThread\n \nreader\n;\n    \n// Protothread is statically allocated!\n\n\n\nint\n \nmain\n()\n \n// Execution entry point.\n\n\n{\n\n    \nwhile\n(\ntrue\n)\n\n    \n{\n   \n// the main loop with implicit round robin cooperative scheduling.\n\n        \nreader\n.\nrun\n();\n\n        \notherProtothreads\n.\nrun\n();\n\n    \n}\n\n    \nreturn\n \n0\n;\n\n\n}",
            "title": "How modm works"
        },
        {
            "location": "/how-modm-works/#how-modm-works",
            "text": "modm is an umbrella project for a handful of stand-alone projects and acts as\na curated toolbox for creating custom C++ libraries for embedded targets.\nThree of these projects form the heart of modm:   modm-devices  contains hardware descriptions like memories, peripherals and pins of many devices.  modm  provides configurable modules to translate this data into code, tests and documentation.  lbuild  links these two together using the Jinja2 template engine in Python to create a custom library for your target.   As a developer you can use lbuild to explore the modm modules, configure them \nspecifically for your targets and needs and generate a custom library.\nYou can generate more than just code, in this example, lbuild also generates a \nbuild system which then compiles and links the application into a executable.     We've also put a lot of thought into modm-devices, about what data to extract,\nhow to format and store it. We automated the entire process to get the high\nquality data we use to build our library.\nYou can read all  about modm-devices in this blog post .",
            "title": "How modm works"
        },
        {
            "location": "/how-modm-works/#modm-is-highly-modular",
            "text": "modm's modules are kept small in scope on purpose and declare their dependencies,\nso that lbuild can build a minimal library from the initial modules you specified.\nSo if you only want to use our UART drivers for example, lbuild will only include\ncode from that module and its dependencies.\nThis makes it easier to understand what parts of modm you actually use, either\nby looking at the dependency graph before, or by inspecting the generated code\nafter calling lbuild, and gives you the opportunity to only use the parts of\nmodm you really like.   A lbuild module is just a few lines of Python code. Here we can see the code for\nthe  modm:platform:uart  module from the example above. It declares its name,\nits dependencies and then which files it wants to generate where to using the \ndata from modm-devices, by just setting the  env.substitutions  to the device's\nproperties and calling  env.template  with the input and output file names.  def   init ( module ): \n     module . name   =   \"uart\" \n     module . parent   =   \"platform\"  def   prepare ( module ,   options ): \n     module . depends ( \":architecture:interrupt\" ,   \":architecture:register\" ,  \n                    \":architecture:atomic\" ,   \":architecture:uart\" ,   \":platform:gpio\" ) \n     return   True  def   build ( env ): \n     device   =   env [ \":target\" ] \n     env . substitutions   =   device . properties \n     env . outbasepath   =   \"src/modm/platform/uart\" \n     for   instance   in   device . get_driver ( \"uart:stm32*\" )[ \"instance\" ]: \n         env . template ( \"uart.hpp.in\" ,   \"uart_{}.hpp\" . format ( instance )) \n         env . template ( \"uart.cpp.in\" ,   \"uart_{}.cpp\" . format ( instance ))   The input template then can access all the devices properties, and generate\nthe correct code for this device. Here the template on left is passed to the  Jinja2 engine  which outputs the code on the right.      void {{ name }}::write(uint8_t data)\n{\n%% if \"extended\" in driver[\"type\"]\n    {{ peripheral }}->TDR = data;\n%% else\n    {{ peripheral }}->DR = data;\n%% endif\n}    void   Uart4 :: write ( uint8_t   data )  { \n     UART4 -> DR   =   data ;  }       This example is simple, but since it's based on Python,  anything more \ncomplicated is possible .\nLooking at the data excerpt from a STM32 device the above module will generate a\nonly three classes of this type for this target. However, a similar driver will\ngenerate classes for the four USART peripherals.  ... <driver   name= \"uart\"   type= \"stm32\" > \n   <instance   value= \"4\" /> \n   <instance   value= \"5\" /> \n   <instance   value= \"7\" />  </driver>  <driver   name= \"usart\"   type= \"stm32\" > \n   <instance   value= \"1\" /> \n   <instance   value= \"2\" /> \n   <instance   value= \"3\" /> \n   <instance   value= \"6\" />  </driver> \n...  With these techiques we can generate a target specific HAL for hundreds of devices.\nDon't believe us?  Check out our CI doing just that .",
            "title": "modm is highly modular"
        },
        {
            "location": "/how-modm-works/#modm-asserts-at-compile-time",
            "text": "modm stands out for its extensive use of generated static C++ (template) classes.\nConsider this data from the GPIO peripheral, which shows the signal map for the PA0  pin on a STM32 device.  ... <driver   name= \"gpio\"   type= \"stm32\" > \n   <gpio   port= \"a\"   pin= \"0\" > \n     <signal   driver= \"adc\"   instance= \"1\"   name= \"in0\" /> \n     <signal   driver= \"adc\"   instance= \"2\"   name= \"in0\" /> \n     <signal   driver= \"adc\"   instance= \"3\"   name= \"in0\" /> \n     <signal   af= \"1\"   driver= \"tim\"   instance= \"2\"   name= \"ch1\" /> \n     <signal   af= \"2\"   driver= \"tim\"   instance= \"5\"   name= \"ch1\" /> \n     <signal   af= \"8\"   driver= \"uart\"   instance= \"4\"   name= \"tx\" /> \n    ...  We use this data in the  modm:platform:gpio  module to generate type-safe \nsignal connections, which will then assert that the signal you want to connect\nactually exists on this pin and even gives you a helpful (!) error message at \ncompile time.  class   GpioA0  {  ... \n     template <   Peripheral   peripheral   > \n     struct   Tx   { \n         static_assert ( \n             ( peripheral   ==   Peripheral :: Uart4 ), \n             \"GpioA0::Tx only connects to Uart4!\" ); \n     }; \n     template <   Peripheral   peripheral   > \n     struct   Ch1   { \n         static_assert ( \n             ( peripheral   ==   Peripheral :: Tim2 )   || \n             ( peripheral   ==   Peripheral :: Tim5 ), \n             \"GpioA0::Ch1 only connects to Tim2 or Tim5!\" ); \n     }; \n     template <   Peripheral   peripheral   > \n     struct   In0   { \n         static_assert ( \n             ( peripheral   ==   Peripheral :: Adc1 )   || \n             ( peripheral   ==   Peripheral :: Adc2 )   || \n             ( peripheral   ==   Peripheral :: Adc3 ), \n             \"GpioA0::In0 only connects to Adc1 or Adc2 or Adc3!\" ); \n     };  ...  };   Continuing with this technique, we can even check if your signal groups are \nconflict free of overlaps or invalid configurations and again give you a \nhelpful error message!      Uart4 :: connect < GpioA0 :: Tx > ();  Adc1 :: connect < GpioA0 :: In0 ,   GpioA1 :: In1 > ();  Tim2 :: connect < GpioA0 :: Ch1 ,   GpioA1 :: Ch2 ,  \n               GpioA2 :: Ch3 ,   GpioA3 :: Ch4 > ();  Tim5 :: connect < GpioA0 :: Ch1 ,   GpioA1 :: Ch2 ,  \n               GpioA2 :: Ch3 ,   GpioA3 :: Ch4 > ();     Maps to GpioA0::setAlternateFunction(8);\nMaps to GpioAx::setAnalogInput();\nEach pin in group called with their\n    respective Alternate Function ID\nSame API, but for Timer5 different \n    Alternate Function IDs are used      Uart4 :: connect < GpioA0 :: Rx > ();     error: 'Rx' is not a member of 'GpioA0'      Uart4 :: connect < GpioA2 :: Tx > ();     error: GpioA2::Tx only connects to Usart2!      Usart1 :: connect < GpioA9 :: Tx ,   GpioB7 :: Rx > ();     error: This pin set contains conflicting remap groups!\nAvailable groups for Usart1 are:\n Usart1 | 0  | 1\n--------|----|----\n   A9   | Tx |\n  A10   | Rx |\n   B6   |    | Tx\n   B7   |    | Rx      We use a similar technique to  compute baudrates at compile time \nand make sure the resulting baudrates remains within the specified error tolerances.\nIn addition the executable now only contains prescaler values which are written\ndirectly to the hardware without any computation required. This is very helpful\nfor keeping code size in check on very resource constrained targets, like the AVRs.  Uart4 :: connect < GpioA0 :: Tx ,   GpioA1 :: Rx > ( Gpio :: InputType :: PullUp );   // pull-up in RX pin  Uart4 :: initialize < Board :: systemClock ,   115 ' 200 > ();   // Within 1% default tolerance  Uart4 :: initialize < Board :: systemClock ,   115 ' 200 ,   Tolerance :: Exact > ();  // error: The closest available baudrate exceeds the tolerance of the requested baudrate!",
            "title": "modm asserts at compile-time"
        },
        {
            "location": "/how-modm-works/#modm-is-fast-and-usable",
            "text": "modm's APIs are kept simple and fast by splitting up functionality into\nseparate, small, static functions, which implement the same behavior on all\nplatforms.\nAnd with our code generation capabilities, we can hide the crazy\nimplementation details of the hardware without compromising on performance.\nFor example, on different AVRs, simple things like enabling the internal pull-up resistor,\ndealing with external interrupts or even just toggling a pin is done quite dissimilarly in hardware, yet we can wrap this in the same API for every target.  Since we\u2018re using static inlined functions that often just compile to a handful of instructions  we can call our GPIOs at  ludicrous speed .  // All pin functions follow a common naming scheme  using   Led   =   GpioB1 ;  Led :: setOutput ();  Led :: set ();   Led :: reset ();  Led :: toggle ();  using   Button   =   GpioA0 ;  Button :: setInput ();  bool   state   =   Button :: read ();  // Depending on your targets, additional functions are available  Led :: setOutput ( Gpio :: OutputType :: OpenDrain );  Button :: setInput ( Gpio :: InputType :: PullUp );  Button :: setInputTrigger ( Gpio :: InputTrigger :: RisingEdge );  Button :: enableExternalInterrupt ();  Button :: acknowledgeExternalInterruptFlag ();   You can use these GPIOs as building blocks for more complex drivers and\nperipherals and still maintain access speed without sacrificing usability:  // Create a hardware accelerated port of 4 bit width.  using   Port4   =   GpioPort <   GpioC0 ,   4   > ;          // MSB -> C3, C2, C1, C0 <- LSB  using   ReadWrite   =   GpioC4 ;                     // \"name\" your GPIOs.  using   Reset   =   GpioOutputC5 ;  using   Enable   =   GpioOutputC6 ;  // Build a super fast character display driver using these inlined GPIOs.  modm :: Hd44780 < Port4 ,   ReadWrite ,   Reset ,   Enable >   display ;  display . initialize ();     // driver knows to initialize for a 4 bit bus!  display   <<   \"Hello World!\"   <<   modm :: endl ;      // Yes, ostreams. Deal with it.  display . printf ( \"You don't really have to use %s!\" ,   \"OStreams\" );   All drivers in modm follow the same principle of building up your hardware drivers from other parts of the HAL by passing them as template parameters. This works surprisingly well to reduce both code size and execution time. For example, here is how you assemble and initialize a driver for the MCP23x17 GPIO expander and then use its pins.  using   Transport   =   modm :: Mcp23TransportSpi <   SpiMaster1 ,   GpioA0   > ;  using   GpioExpander   =   modm :: Mcp23x17 <   Transport   > ;  GpioExpander   expander ;  // Connect and initialize the peripherals  SpiMaster1 :: connect < GpioA0 :: Sck ,   GpioA1 :: Mosi ,   GpioA2 :: Miso > ();  SpiMaster1 :: initialize < Board :: systemClock ,   1 MHz > ();  expander . initialize ();  // Bind the expander pins to a simpler name  using   Pin0   =   GpioExpander :: P0 <   expander   > ;  using   Pin1   =   GpioExpander :: P1 <   expander   > ;  // Oh, look, same API  Pin0 :: setOutput ();  Pin0 :: toggle ();  Pin1 :: setInput ();  bool   state   =   Pin1 :: read ();",
            "title": "modm is fast and usable"
        },
        {
            "location": "/how-modm-works/#modm-is-memory-efficient",
            "text": "Our HAL does not allocate memory dynamically \u2013 everything is either\nstatically allocated or must explicitly be allocated by the user.\nThis is a strong requirement for running modm on AVRs, which have\nlittle if any memory to spare for dynamic allocations.  We took great care to make sure this constraint remains usable, making \nconfiguration options first-class citizens in lbuild for you to easily discover\nand safely change. When we do need to allocate static memory, we choose a \nsensible default size for its purpose.   $ lbuild discover-module-options\n...\nmodm:platform:core:main_stack_size = 3040  [256 ... 65536]\n\n  Minimum size of the application main stack\n...\nmodm:platform:uart:1:buffer.rx = 16  [1 ... 65534]\nmodm:platform:uart:1:buffer.tx = 250  [1 ... 65534]  We transparently show you how much static memory your application is using,\nso you get an idea of how much certain functionality costs you in resources.\nThis is the size of the accelerometer example on the STM32F4 discovery board:   $ cd examples/stm32f4_discovery/accelerometer\n $ scons\n...\nMemory usage\u00b7\u00b7\u00b7 build/stm32f4_discovery/accelerometer/project.elf\n\nProgram:    8144B (0.8% used)\n(.fastcode + .fastdata + .hardware_init + .reset + .rodata + .table.copy.intern +\n .table.section_heap + .table.zero.intern + .text)\n\nData:       3464B (1.7% used) = 424B static (0.2%) + 3040B stack (1.5%)\n(.bss + .fastdata + .stack)\n\nHeap:     197240B (98.3% available)\n(.heap0 + .heap1 + .heap2 + .heap5)",
            "title": "modm is memory-efficient"
        },
        {
            "location": "/how-modm-works/#modm-does-multitasking",
            "text": "modm uses stackless cooperative multitasking, for which we have ported\nprotothreads to C++ and extended them with resumable functions.\nThis enables you to split up your application into separate tasks, and use\nsynchronous APIs in all of them, without sacrificing overall responsiveness.\nThis works on even the most resource restricted AVRs, since each task only\nrequires 2 bytes of static RAM!  All our IC drivers are implemented using resumable functions, which can be\ncalled from within protothreads or explicitly blocking outside of them.\nHere is an example of  reading out the accelerometer :  class   ReaderThread   :   public   modm :: pt :: Protothread  {  public : \n     bool   run () \n     { \n         PT_BEGIN (); \n         // The driver does several I2C transfer here to initialize and configure the \n         // external sensor. The CPU is free to do other things while this happens though. \n         PT_CALL ( accelerometer . configure ( accelerometer . Scale :: G2 )); \n\n         while   ( true )      // this feels quite similar to regular threads \n         { \n             // this resumable function will defer execution back to other protothreads \n             PT_CALL ( accelerometer . readAcceleration ()); \n\n             // smooth out the acceleration data a little bit \n             averageX . update ( accelerometer . getData (). getX ()); \n             averageY . update ( accelerometer . getData (). getY ()); \n\n             // set the boards LEDs depending on the acceleration values \n             LedUp :: set (     averageX . getValue ()   <   - 0.2 ); \n             LedDown :: set (   averageX . getValue ()   >    0.2 ); \n             LedLeft :: set (   averageY . getValue ()   <   - 0.2 ); \n             LedRight :: set ( averageY . getValue ()   >    0.2 ); \n\n             // defer back to other protothreads until the timer fires \n             PT_WAIT_UNTIL ( timer . execute ()); \n         } \n         PT_END (); \n     }  private : \n     // This accelerometer is connected via I2C. \n     modm :: Lis3dsh <   modm :: Lis3TransportI2c <   I2cMaster   >   >   accelerometer ; \n     modm :: PeriodicTimer   timer   =   modm :: PeriodicTimer ( 5 );   // 5ms periodic timer. \n     modm :: filter :: MovingAverage < float ,   25 >   averageX ; \n     modm :: filter :: MovingAverage < float ,   25 >   averageY ;  };  ReaderThread   reader ;      // Protothread is statically allocated!  int   main ()   // Execution entry point.  { \n     while ( true ) \n     {     // the main loop with implicit round robin cooperative scheduling. \n         reader . run (); \n         otherProtothreads . run (); \n     } \n     return   0 ;  }",
            "title": "modm does multitasking"
        },
        {
            "location": "/who-we-are/",
            "text": "Who we are\n\u00b6\n\n\nThe modm project is maintained by\nNiklas Hauser (\n@salkinium\n) with significant contributions from\nSascha Schade (\n@strongly-typed\n),\nFabian Greif (\n@dergraaf\n),\nKevin L\u00e4ufer (\n@ekiwi\n),\nMartin Rosekeit (\n@thundernail\n),\nDaniel Krebs (\n@daniel-k\n),\nGeorgi Grinshpun (\n@georgi-g\n) and \n\n20\n more contributors\n.\n\n\n\n\n\nHistory of modm\n\u00b6\n\n\nIn the mid-2000s the \nRoboterclub Aachen e.V.\n has developed a software\nlibrary called XPCC for communication among components that are distributed on\nPCs and microcontrollers. This library was initially used only in autonomous\nrobots for the \nEurobot competition\n.\n\n\nIn 2009, XPCC became a separate project and over the years grew from a communication\nlibrary to a general purpose framework (called lowercase xpcc, 'cos #namingthings) suitable for all\nkinds of embedded applications.\n\n\nBetween 2016 and 2018, Niklas and Fabian refactored xpcc into modm by completely\nrewriting the way the library generates its HAL. This also gave us the tools to\nfix some larger architectural issues in xpcc's HAL as well as significantly\nimprove customizability of the HAL and its documentation.\nAll xpcc authors agreed to relicense their contributions from BSD to MPLv2 in modm.\n\n\nEurobot and Team RCA\n\u00b6\n\n\nMost of our contributors are or used to be members of the\n\nRoboterclub Aachen e.V.\n.\nWe've been building robots for the \nEurobot competition\n for many years\nnow and all of them have been running xpcc or modm successfully as their only OS\non dozens of different AVR and STM32 targets each.\nSo modm is truly battle-tested in real-world conditions and has passed through\nthe scrutiny of many capable engineers over the years.\n\n\nCheck out how we're competing in the quarter finals of the Eurobot 2015 competition.",
            "title": "Who we are"
        },
        {
            "location": "/who-we-are/#who-we-are",
            "text": "The modm project is maintained by\nNiklas Hauser ( @salkinium ) with significant contributions from\nSascha Schade ( @strongly-typed ),\nFabian Greif ( @dergraaf ),\nKevin L\u00e4ufer ( @ekiwi ),\nMartin Rosekeit ( @thundernail ),\nDaniel Krebs ( @daniel-k ),\nGeorgi Grinshpun ( @georgi-g ) and  20  more contributors .",
            "title": "Who we are"
        },
        {
            "location": "/who-we-are/#history-of-modm",
            "text": "In the mid-2000s the  Roboterclub Aachen e.V.  has developed a software\nlibrary called XPCC for communication among components that are distributed on\nPCs and microcontrollers. This library was initially used only in autonomous\nrobots for the  Eurobot competition .  In 2009, XPCC became a separate project and over the years grew from a communication\nlibrary to a general purpose framework (called lowercase xpcc, 'cos #namingthings) suitable for all\nkinds of embedded applications.  Between 2016 and 2018, Niklas and Fabian refactored xpcc into modm by completely\nrewriting the way the library generates its HAL. This also gave us the tools to\nfix some larger architectural issues in xpcc's HAL as well as significantly\nimprove customizability of the HAL and its documentation.\nAll xpcc authors agreed to relicense their contributions from BSD to MPLv2 in modm.",
            "title": "History of modm"
        },
        {
            "location": "/who-we-are/#eurobot-and-team-rca",
            "text": "Most of our contributors are or used to be members of the Roboterclub Aachen e.V. .\nWe've been building robots for the  Eurobot competition  for many years\nnow and all of them have been running xpcc or modm successfully as their only OS\non dozens of different AVR and STM32 targets each.\nSo modm is truly battle-tested in real-world conditions and has passed through\nthe scrutiny of many capable engineers over the years.  Check out how we're competing in the quarter finals of the Eurobot 2015 competition.",
            "title": "Eurobot and Team RCA"
        },
        {
            "location": "/guide/getting-started/",
            "text": "Getting Started\n\u00b6\n\n\nThe easiest way for you to learn about modm's APIs is to look at and \nexperiment with \nour examples\n, especially if you have a development \nboard that modm supports out-of-box.\n\n\nMake sure you've \ninstalled all tools required for building modm\n.\n\n\nHere are our favorite examples for our supported development boards:\n\n\n\n\n\n\n\nArduino Uno:\n\nBlinky\n,\n\nButton & Serial\n,\n\nAnalog & Serial\n.\n\n\nNUCLEO-F031K6:\n\nBlinky & Serial\n.\n\n\nNUCLEO-F103RB:\n\nBlinky & Serial\n.\n\n\nSTM32F072 Discovery:\n\nBlinky\n,\n\nCAN\n,\n\nGyroscope\n.\n\n\nSTM32F3 Discovery:\n\nBlinky\n,\n\nCAN\n,\n\nAccelerometer\n,\n\nGyroscope\n,\n\nDebugging with GDB\n.\n\n\nSTM32F4 Discovery:\n\nBlinky\n,\n\nCAN\n,\n\nAccelerometer\n,\n\nTimer & LED Animations\n,\n\nDebugging hard faults\n.\n\n\nSTM32F469 Discovery:\n\nBlinky\n,\n\nDrawing on display\n,\n\nTouchscreen inputs\n,\n\nMulti-heap with external 16MB memory\n,\n\nGame of Life in Color with Multitouch\n\n\nSTM32F769 Discovery:\n\nFPU with double precision\n\n\n\n\nHere are some additional examples of displays and sensors we like:\n\n\n\n\nSSD1306 OLED display\n: Draws text and graphics onto I2C display.\n\n\nBMP085/BMP180 barometer\n: Reads atmospheric pressure and temperature from I2C sensor.\n\n\nBMP180/BME280 barometer\n: Reads atmospheric pressure and temperature from multiple I2C sensors.\n\n\nVL6180 time-of-flight distance sensor\n: Reads distance and ambient light from I2C sensor.\n\n\nVL53L0  time-of-flight distance sensor\n: Much improved version of the VL6180 sensor.\n\n\nADNS9800 motion sensor\n: Reads 2D motion from SPI sensor used in gaming mice.\n\n\nTCS3414 color sensor\n: Reads RGB color from I2C sensor.\n\n\nHD44780 over I2C-GPIO expander\n: Draws text via native GPIO port or I2C-GPIO expander port onto character display.\n\n\n\n\n\nHave a look at the \nbuild system references\n to \nsee how to compile and program your targets.\n\n\nYour own Project\n\u00b6\n\n\nTo generate a modm library for your own project, you need to define a\n\nproject.xml\n file, which contains the path to where modm is, as well as\nrepository and module options and of course which modules you want to have\ngenerated. Even though modm will generate a library that is self-contained, \nwe still recommend adding modm as a git submodule for reproducibility.\n\n\nUsing a Board Support Package\n\u00b6\n\n\nTo build on a BSP, inherit from an existing project configuration using the \n\n<extends>\n element.\nOur BSPs declare a minimal set of modules as dependencies as well as pre-define several important options for this board.\nYou can then add all the modules you need and configure them as you want.\n\n\n<?xml version='1.0' encoding='UTF-8'?>\n\n\n<library>\n\n  \n<extends>\n../../../src/modm/board/disco_f469ni/board.xml\n</extends>\n\n  \n<options>\n\n    \n<option\n \nname=\n\":build:project.name\"\n>\ntest\n</option>\n\n  \n</options>\n\n  \n<modules>\n\n    \n<module>\n:build:scons\n</module>\n\n  \n</modules>\n\n\n</library>\n\n\n\n\n\n\n\nChose a build system\n\n\nOur BSPs do not specify a build system generator, so you need to add the \nmodule yourself if you want. Here we chose to use the SCons build system\ngenerator, but you \ncan choose others as well\n.\n\n\n\n\nOur board support packages provide their configuration in the \nBoard\n namespace,\nwhich you can use to initialize the target and several board subsystems.\nIf a serial connection is available on the board, you can directly use the modm\nlogging functions.\n\n\n#include\n \n<modm/board/board.hpp>\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nBoard\n::\ninitialize\n();\n\n    \nBoard\n::\nLeds\n::\nsetOutput\n();\n\n\n    \nwhile\n \n(\n1\n)\n\n    \n{\n\n        \nBoard\n::\nLeds\n::\ntoggle\n();\n\n        \nmodm\n::\ndelayMilliseconds\n(\nBoard\n::\nButton\n::\nread\n()\n \n?\n \n250\n \n:\n \n500\n);\n\n\n#ifdef MODM_BOARD_HAS_LOGGER\n\n        \nstatic\n \nuint32_t\n \ncounter\n(\n0\n);\n\n        \nMODM_LOG_INFO\n \n<<\n \n\"Loop counter: \"\n \n<<\n \n(\ncounter\n++\n)\n \n<<\n \nmodm\n::\nendl\n;\n\n\n#endif\n\n    \n}\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\nDiscovering modm\n\u00b6\n\n\nTo generate your custom library, modm uses the \nLibrary Builder\n, which\nis the interface to discover available modules and their configuration options.\n\n\nTo list all available repository options call \nlbuild discover-repository\n.\nThis will show you how to \nspell\n the supported targets correctly.\n\n\n $ lbuild discover-repository\nmodm:target = [at90can128, at90can32, at90can64, at90pwm1, at90pwm161, at90pwm2,\n               at90pwm81, at90usb1286, at90usb1287, at90usb162, at90usb646,\n...\n               stm32l4s5ziy, stm32l4s7aii, stm32l4s7vit, stm32l4s7zit,\n               stm32l4s9zit, stm32l4s9ziy]\n\n\n\n\nOnce you've specified this repository option (for example \n\n<option name=\"modm:target\">stm32f469nih</option>\n), you can call \n\nlbuild discover-modules\n to list all available modules for this target.\n\n\n $ lbuild discover-modules\nmodm:architecture:adc\nmodm:board:disco-f469ni\n...\nmodm:ui:led\nmodm:utils\n\n\n\n\nlbuild discover-module-options\n lists all the module options with a short\ndescription and a list or range of possible values.\n\n\n $ lbuild discover-module-options\n...\nmodm:platform:core:allocator = newlib  [block, newlib, tlsf]\n\n  Dynamic memory allocation strategy\n\nmodm:platform:core:main_stack_size = 3040  [256 ... 65536]\n\n  Minimum size of the application main stack\n\nmodm:platform:core:vector_table_location = fastest  [fastest, ram, rom]\n\n  Vector table location in ROM or RAM\n...\nmodm:platform:uart:1:buffer.rx = 16  [1 ... 65534]\nmodm:platform:uart:1:buffer.tx = 250  [1 ... 65534]\n\n\n\n\nCall \nlbuild discover-option -o \"modm:platform:core:main_stack_size\"\n to get a\ndetailed description of the option.\n\n\n $ lbuild discover-option -o \"modm:platform:core:main_stack_size\"\nmodm:platform:core:main_stack_size\n==================================\n\nCurrent value: 3040\nPossible values: 256 ... 65536\n\nMinimum size of the application main stack\n\nThe ARM Cortex-M uses a descending stack mechanism which is placed so that it\ngrows towards the beginning of RAM. In case of a stack overflow the hardware\nthen attempts to stack into invalid memory which triggers a HardFault. A stack\noverflow will therefore never overwrite any static or heap memory and this\nprotection works without the MPU and therefore also on ARM Cortex-M0 devices.\n...\n\n\n\n\n\n\nOptions are checked\n\n\nlbuild\n checks all your project options against the possible values in the\nmodule and outputs an error if they are incorrect.\n\n\n\n\n\n\nVisualize your dependencies\n\n\nCreate a dependency graph with \nlbuild dependencies -m \"modm:module\" | dot -Tsvg -Grankdir=BT -o dependencies.svg\n\nto help you understand what code is pulled in when you generate your library.\n\n\n\n\nCustom Configuration\n\u00b6\n\n\nIn case modm doesn't have a BSP for your board or the BSP uses the hardware in\nways you don't like, you can define your own completely custom configuration.\nHere a completely minimal library is generated for a STM32F469NIH device only\nwith the Cortex-M, GPIO and time modules and their dependencies.\nSince no build system generator module is specified, you will only get the raw\nsource code.\n\n\n<?xml version='1.0' encoding='UTF-8'?>\n\n\n<library>\n\n  \n<repositories>\n\n    \n<repository><path>\n../../modm/repo.lb\n</path></repository>\n\n  \n</repositories>\n\n\n  \n<options>\n\n    \n<option\n \nname=\n\"modm:target\"\n>\nstm32f469nih\n</option>\n\n  \n</options>\n\n  \n<modules>\n\n    \n<module>\nmodm:platform:clock\n</module>\n\n    \n<module>\nmodm:platform:core\n</module>\n\n    \n<module>\nmodm:platform:gpio\n</module>\n\n  \n</modules>\n\n\n</library>\n\n\n\n\n\nA minimal \nmain.cpp\n for this configuration would look like this:\n\n\n#include\n \n<modm/platform/platform.hpp>\n\n\nusing\n \nnamespace\n \nmodm\n::\nplatform\n;\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nGpioA0\n::\nsetOutput\n();\n\n    \nwhile\n(\n1\n)\n \n{\n\n        \nGpioA0\n::\ntoggle\n();\n\n        \nmodm\n::\ndelayMilliseconds\n(\n500\n);\n\n    \n}\n\n\n}\n\n\n\n\n\nWe recommend to start your custom projects with a known-good configuration from\none of our examples and then work your way into your specialization.\n\n\nGenerate and Compile\n\u00b6\n\n\nOnce you have your \nproject.xml\n set up, you can call \nlbuild build\n, which \ngenerates the target and configuration specific library from modm.\nThis will create a few files and folders:\n\n\n $ ls\nmain.cpp    project.xml\n $ lbuild build\n $ ls\nSConstruct      main.cpp        modm            project.xml     project.xml.log\n\n\n\n\nYou can add these folders and files to your \n.gitignore\n file, however, we \nrecommend eventually committing these files (yes, \nall\n these files) into your\nproject repository so that you don't have issues reproducing the build.\n\n\n\n\nGenerate custom documentation\n\n\nInclude the \nmodm:docs\n module (or execute \nlbuild build --module \"modm:docs\"\n), \nthen call \ndoxygen doxyfile\n inside the generated \ndocs\nfolder.\nThe documentation for your target and configuration will then be available\nin \ndocs/api/index.html\n.\n\n\n\n\nFor this project we included the \nmodm:build:scons\n generator, so we can just\ncall \nscons build size\n, which will compile the entire source code and output\nthe resource consumption:\n\n\n $ scons build size\nscons: Reading SConscript files ...\nscons: done reading SConscript files.\nscons: Building targets ...\nCompiling C++\u00b7\u00b7 build/main.o\n...\nIndexing\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 build/libmodm.a\nLinking\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 build/project.elf\nMemory usage\u00b7\u00b7\u00b7 build/project.elf\n\nProgram:    3612B (0.3% used)\n(.fastcode + .fastdata + .hardware_init + .reset + .rodata + .table.copy.intern +\n .table.section_heap + .table.zero.intern + .text)\n\nData:       3184B (1.6% used) = 144B static (0.1%) + 3040B stack (1.5%)\n(.bss + .fastdata + .stack)\n\nHeap:     197520B (98.4% available)\n(.heap0 + .heap1 + .heap2 + .heap5)\n\n\n\n\nYou can program your target by calling \nscons program\n. Additional tools are \ndocumented in \nmodule documentation\n.\n\n\nIf you have any questions, \nopen an issue\n or ping \n\n@salkinium\n.",
            "title": "Getting Started"
        },
        {
            "location": "/guide/getting-started/#getting-started",
            "text": "The easiest way for you to learn about modm's APIs is to look at and \nexperiment with  our examples , especially if you have a development \nboard that modm supports out-of-box.  Make sure you've  installed all tools required for building modm .  Here are our favorite examples for our supported development boards:    Arduino Uno: Blinky , Button & Serial , Analog & Serial .  NUCLEO-F031K6: Blinky & Serial .  NUCLEO-F103RB: Blinky & Serial .  STM32F072 Discovery: Blinky , CAN , Gyroscope .  STM32F3 Discovery: Blinky , CAN , Accelerometer , Gyroscope , Debugging with GDB .  STM32F4 Discovery: Blinky , CAN , Accelerometer , Timer & LED Animations , Debugging hard faults .  STM32F469 Discovery: Blinky , Drawing on display , Touchscreen inputs , Multi-heap with external 16MB memory , Game of Life in Color with Multitouch  STM32F769 Discovery: FPU with double precision   Here are some additional examples of displays and sensors we like:   SSD1306 OLED display : Draws text and graphics onto I2C display.  BMP085/BMP180 barometer : Reads atmospheric pressure and temperature from I2C sensor.  BMP180/BME280 barometer : Reads atmospheric pressure and temperature from multiple I2C sensors.  VL6180 time-of-flight distance sensor : Reads distance and ambient light from I2C sensor.  VL53L0  time-of-flight distance sensor : Much improved version of the VL6180 sensor.  ADNS9800 motion sensor : Reads 2D motion from SPI sensor used in gaming mice.  TCS3414 color sensor : Reads RGB color from I2C sensor.  HD44780 over I2C-GPIO expander : Draws text via native GPIO port or I2C-GPIO expander port onto character display.   Have a look at the  build system references  to \nsee how to compile and program your targets.",
            "title": "Getting Started"
        },
        {
            "location": "/guide/getting-started/#your-own-project",
            "text": "To generate a modm library for your own project, you need to define a project.xml  file, which contains the path to where modm is, as well as\nrepository and module options and of course which modules you want to have\ngenerated. Even though modm will generate a library that is self-contained, \nwe still recommend adding modm as a git submodule for reproducibility.",
            "title": "Your own Project"
        },
        {
            "location": "/guide/getting-started/#using-a-board-support-package",
            "text": "To build on a BSP, inherit from an existing project configuration using the  <extends>  element.\nOur BSPs declare a minimal set of modules as dependencies as well as pre-define several important options for this board.\nYou can then add all the modules you need and configure them as you want.  <?xml version='1.0' encoding='UTF-8'?>  <library> \n   <extends> ../../../src/modm/board/disco_f469ni/board.xml </extends> \n   <options> \n     <option   name= \":build:project.name\" > test </option> \n   </options> \n   <modules> \n     <module> :build:scons </module> \n   </modules>  </library>    Chose a build system  Our BSPs do not specify a build system generator, so you need to add the \nmodule yourself if you want. Here we chose to use the SCons build system\ngenerator, but you  can choose others as well .   Our board support packages provide their configuration in the  Board  namespace,\nwhich you can use to initialize the target and several board subsystems.\nIf a serial connection is available on the board, you can directly use the modm\nlogging functions.  #include   <modm/board/board.hpp>  int   main ()  { \n     Board :: initialize (); \n     Board :: Leds :: setOutput (); \n\n     while   ( 1 ) \n     { \n         Board :: Leds :: toggle (); \n         modm :: delayMilliseconds ( Board :: Button :: read ()   ?   250   :   500 );  #ifdef MODM_BOARD_HAS_LOGGER \n         static   uint32_t   counter ( 0 ); \n         MODM_LOG_INFO   <<   \"Loop counter: \"   <<   ( counter ++ )   <<   modm :: endl ;  #endif \n     } \n     return   0 ;  }",
            "title": "Using a Board Support Package"
        },
        {
            "location": "/guide/getting-started/#discovering-modm",
            "text": "To generate your custom library, modm uses the  Library Builder , which\nis the interface to discover available modules and their configuration options.  To list all available repository options call  lbuild discover-repository .\nThis will show you how to  spell  the supported targets correctly.   $ lbuild discover-repository\nmodm:target = [at90can128, at90can32, at90can64, at90pwm1, at90pwm161, at90pwm2,\n               at90pwm81, at90usb1286, at90usb1287, at90usb162, at90usb646,\n...\n               stm32l4s5ziy, stm32l4s7aii, stm32l4s7vit, stm32l4s7zit,\n               stm32l4s9zit, stm32l4s9ziy]  Once you've specified this repository option (for example  <option name=\"modm:target\">stm32f469nih</option> ), you can call  lbuild discover-modules  to list all available modules for this target.   $ lbuild discover-modules\nmodm:architecture:adc\nmodm:board:disco-f469ni\n...\nmodm:ui:led\nmodm:utils  lbuild discover-module-options  lists all the module options with a short\ndescription and a list or range of possible values.   $ lbuild discover-module-options\n...\nmodm:platform:core:allocator = newlib  [block, newlib, tlsf]\n\n  Dynamic memory allocation strategy\n\nmodm:platform:core:main_stack_size = 3040  [256 ... 65536]\n\n  Minimum size of the application main stack\n\nmodm:platform:core:vector_table_location = fastest  [fastest, ram, rom]\n\n  Vector table location in ROM or RAM\n...\nmodm:platform:uart:1:buffer.rx = 16  [1 ... 65534]\nmodm:platform:uart:1:buffer.tx = 250  [1 ... 65534]  Call  lbuild discover-option -o \"modm:platform:core:main_stack_size\"  to get a\ndetailed description of the option.   $ lbuild discover-option -o \"modm:platform:core:main_stack_size\"\nmodm:platform:core:main_stack_size\n==================================\n\nCurrent value: 3040\nPossible values: 256 ... 65536\n\nMinimum size of the application main stack\n\nThe ARM Cortex-M uses a descending stack mechanism which is placed so that it\ngrows towards the beginning of RAM. In case of a stack overflow the hardware\nthen attempts to stack into invalid memory which triggers a HardFault. A stack\noverflow will therefore never overwrite any static or heap memory and this\nprotection works without the MPU and therefore also on ARM Cortex-M0 devices.\n...   Options are checked  lbuild  checks all your project options against the possible values in the\nmodule and outputs an error if they are incorrect.    Visualize your dependencies  Create a dependency graph with  lbuild dependencies -m \"modm:module\" | dot -Tsvg -Grankdir=BT -o dependencies.svg \nto help you understand what code is pulled in when you generate your library.",
            "title": "Discovering modm"
        },
        {
            "location": "/guide/getting-started/#custom-configuration",
            "text": "In case modm doesn't have a BSP for your board or the BSP uses the hardware in\nways you don't like, you can define your own completely custom configuration.\nHere a completely minimal library is generated for a STM32F469NIH device only\nwith the Cortex-M, GPIO and time modules and their dependencies.\nSince no build system generator module is specified, you will only get the raw\nsource code.  <?xml version='1.0' encoding='UTF-8'?>  <library> \n   <repositories> \n     <repository><path> ../../modm/repo.lb </path></repository> \n   </repositories> \n\n   <options> \n     <option   name= \"modm:target\" > stm32f469nih </option> \n   </options> \n   <modules> \n     <module> modm:platform:clock </module> \n     <module> modm:platform:core </module> \n     <module> modm:platform:gpio </module> \n   </modules>  </library>   A minimal  main.cpp  for this configuration would look like this:  #include   <modm/platform/platform.hpp>  using   namespace   modm :: platform ;  int   main ()  { \n     GpioA0 :: setOutput (); \n     while ( 1 )   { \n         GpioA0 :: toggle (); \n         modm :: delayMilliseconds ( 500 ); \n     }  }   We recommend to start your custom projects with a known-good configuration from\none of our examples and then work your way into your specialization.",
            "title": "Custom Configuration"
        },
        {
            "location": "/guide/getting-started/#generate-and-compile",
            "text": "Once you have your  project.xml  set up, you can call  lbuild build , which \ngenerates the target and configuration specific library from modm.\nThis will create a few files and folders:   $ ls\nmain.cpp    project.xml\n $ lbuild build\n $ ls\nSConstruct      main.cpp        modm            project.xml     project.xml.log  You can add these folders and files to your  .gitignore  file, however, we \nrecommend eventually committing these files (yes,  all  these files) into your\nproject repository so that you don't have issues reproducing the build.   Generate custom documentation  Include the  modm:docs  module (or execute  lbuild build --module \"modm:docs\" ), \nthen call  doxygen doxyfile  inside the generated  docs folder.\nThe documentation for your target and configuration will then be available\nin  docs/api/index.html .   For this project we included the  modm:build:scons  generator, so we can just\ncall  scons build size , which will compile the entire source code and output\nthe resource consumption:   $ scons build size\nscons: Reading SConscript files ...\nscons: done reading SConscript files.\nscons: Building targets ...\nCompiling C++\u00b7\u00b7 build/main.o\n...\nIndexing\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 build/libmodm.a\nLinking\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 build/project.elf\nMemory usage\u00b7\u00b7\u00b7 build/project.elf\n\nProgram:    3612B (0.3% used)\n(.fastcode + .fastdata + .hardware_init + .reset + .rodata + .table.copy.intern +\n .table.section_heap + .table.zero.intern + .text)\n\nData:       3184B (1.6% used) = 144B static (0.1%) + 3040B stack (1.5%)\n(.bss + .fastdata + .stack)\n\nHeap:     197520B (98.4% available)\n(.heap0 + .heap1 + .heap2 + .heap5)  You can program your target by calling  scons program . Additional tools are \ndocumented in  module documentation .  If you have any questions,  open an issue  or ping  @salkinium .",
            "title": "Generate and Compile"
        },
        {
            "location": "/guide/installation/",
            "text": "Installation\n\u00b6\n\n\nThis is the required software for generating, compiling and programming projects with modm:\n\n\n\n\nPython 3\n\n\nSoftware Construct\n\n\nLibrary Builder\n\n\nAVR toolchain: \navr-gcc\n and \navrdude\n\n\nARM toolchain: \ngcc-arm-toolchain\n and \nOpenOCD\n.\n\n\nDoxygen\n\n\n\n\nNote that the modm examples use the SCons build system by default, however,\nyou are not \nrequired\n to use it. See \nthe reference manual\n for\nadditional build system documentation.\n\n\n\n\nUse GCC 7 or newer\n\n\nmodm uses C++17, so you need \nat least\n GCC 7.\n\n\n\n\n\n\nBeware of AVRs\n\n\nWe \nstrongly discourage\n using AVRs for new designs, due to a significant\nlack of commitment from Atmel on keeping their AVR toolchain up-to-date.\n\n\n\n\n\n\nCheck your Locale\n\n\nIf you get a \nUnicodeEncodeError\n when calling \nlbuild\n, you may need to add\n\nexport LC_ALL=C.UTF-8\n to your \n.bashrc\n. Consult the internet until\n\npython3 -c \"import sys; print(sys.stdout.encoding)\"\n returns \nUTF-8\n.\n\n\n\n\nPlease help us \nkeep these instructions up-to-date\n!\n\n\nmacOS\n\u00b6\n\n\nWe will use \nHomebrew\n to install the minimal build system:\n\n\nbrew install python3 scons git doxygen\npip3 install --user git+https://github.com/modm-io/library-builder \\\n                    jinja2 pyelftools\npip install --user pathlib pyelftools # for Python2 SCons\n\n\n\n\n\nInstall the \nAVR toolchain from source\n:\n\n\nbrew tap osx-cross/avr\nbrew install avr-gcc\n\n\n\n\n\nAnd the \npre-built ARM toolchain\n as well:\n\n\nbrew tap osx-cross/arm\nbrew install arm-gcc-bin\nbrew install openocd --HEAD\n\n\n\n\n\nTo compile modm for macOS you need to install these libraries:\n\n\nbrew install boost gtkmm sdl zmqpp\n\n\n\n\n\nLinux\n\u00b6\n\n\nFor Ubuntu 18.04LTS, these commands install the basic build system:\n\n\nsudo apt-get install python3 python3-pip scons git\nsudo apt-get --no-install-recommends install doxygen\npip3 install --user git+https://github.com/modm-io/library-builder \\\n                    jinja2 pyelftools\npip install --user pathlib pyelftools # for Python2 SCons\n\n\n\n\n\nInstall the AVR toochain:\n\n\nsudo apt-get install gcc-avr binutils-avr avr-libc avrdude\n\n\n\n\n\n\n\navr-gcc on Ubuntu\n\n\nUbuntu does not provide a more recent avr-gcc than v4.9, which does not support C++17 (not even C++14).\nFor our CI we've created a \nprecompiled version of avr-gcc 7 for Ubuntu\n.\nUse at your own risk.\n\n\n\n\nAnd the official ARM toolchain as well:\n\n\nsudo add-apt-repository ppa:team-gcc-arm-embedded/ppa\nsudo apt-get update\nsudo apt-get install gcc-arm-embedded openocd\n\n\n\n\n\n\n\nManual installation on 64-bit Linux\n\n\nYou can also download \na precompiled version of the toolchain for 64-bit Linux\n\nand manually add the \n/bin\n directory to your path. Use this if your distro does not\nprovide you with an up-to-date ARM toolchain.\n\n\n\n\nTo compile modm for Linux you need to install these packages:\n\n\nsudo apt-get install gcc build-essential libboost-all-dev libzmqpp-dev \\\n                     libsdl1.2-dev libsdl-image1.2-dev libgtkmm-2.4-dev\n\n\n\n\n\nWindows\n\u00b6\n\n\nWe will use Anaconda to create a new Python 3 environment and install all necessary packages.\n\n\nconda create --name modm python=3\nactivate modm\nconda install -c conda-forge jinja2 scons future pyelftools git git+https://github.com/modm-io/library-builder\n\n\n\n\n\nFor ARM development install the Windows 32-bit build of the \nGNU Arm Embedded Toolchain\n.\nFor programming and debugging ARM Cortex-M devices install the pre-build \nOpenOCD binaries\n.\nYou'll need to add both \n/bin\n paths to your \nPATH\n variable manually.\n\n\n\n\nFor non-English speakers\n\n\nFor now project and build paths containing non-ASCII characters are not parsed correctly.\n\n\n\n\n\n\nDear Windows users\n\n\nWe don't regularly use Windows with modm, so we rely on YOU to keep these install instructions\nworking and up-to-date. Please \nopen a PR with improvements\n.",
            "title": "Installation"
        },
        {
            "location": "/guide/installation/#installation",
            "text": "This is the required software for generating, compiling and programming projects with modm:   Python 3  Software Construct  Library Builder  AVR toolchain:  avr-gcc  and  avrdude  ARM toolchain:  gcc-arm-toolchain  and  OpenOCD .  Doxygen   Note that the modm examples use the SCons build system by default, however,\nyou are not  required  to use it. See  the reference manual  for\nadditional build system documentation.   Use GCC 7 or newer  modm uses C++17, so you need  at least  GCC 7.    Beware of AVRs  We  strongly discourage  using AVRs for new designs, due to a significant\nlack of commitment from Atmel on keeping their AVR toolchain up-to-date.    Check your Locale  If you get a  UnicodeEncodeError  when calling  lbuild , you may need to add export LC_ALL=C.UTF-8  to your  .bashrc . Consult the internet until python3 -c \"import sys; print(sys.stdout.encoding)\"  returns  UTF-8 .   Please help us  keep these instructions up-to-date !",
            "title": "Installation"
        },
        {
            "location": "/guide/installation/#macos",
            "text": "We will use  Homebrew  to install the minimal build system:  brew install python3 scons git doxygen\npip3 install --user git+https://github.com/modm-io/library-builder \\\n                    jinja2 pyelftools\npip install --user pathlib pyelftools # for Python2 SCons  Install the  AVR toolchain from source :  brew tap osx-cross/avr\nbrew install avr-gcc  And the  pre-built ARM toolchain  as well:  brew tap osx-cross/arm\nbrew install arm-gcc-bin\nbrew install openocd --HEAD  To compile modm for macOS you need to install these libraries:  brew install boost gtkmm sdl zmqpp",
            "title": "macOS"
        },
        {
            "location": "/guide/installation/#linux",
            "text": "For Ubuntu 18.04LTS, these commands install the basic build system:  sudo apt-get install python3 python3-pip scons git\nsudo apt-get --no-install-recommends install doxygen\npip3 install --user git+https://github.com/modm-io/library-builder \\\n                    jinja2 pyelftools\npip install --user pathlib pyelftools # for Python2 SCons  Install the AVR toochain:  sudo apt-get install gcc-avr binutils-avr avr-libc avrdude   avr-gcc on Ubuntu  Ubuntu does not provide a more recent avr-gcc than v4.9, which does not support C++17 (not even C++14).\nFor our CI we've created a  precompiled version of avr-gcc 7 for Ubuntu .\nUse at your own risk.   And the official ARM toolchain as well:  sudo add-apt-repository ppa:team-gcc-arm-embedded/ppa\nsudo apt-get update\nsudo apt-get install gcc-arm-embedded openocd   Manual installation on 64-bit Linux  You can also download  a precompiled version of the toolchain for 64-bit Linux \nand manually add the  /bin  directory to your path. Use this if your distro does not\nprovide you with an up-to-date ARM toolchain.   To compile modm for Linux you need to install these packages:  sudo apt-get install gcc build-essential libboost-all-dev libzmqpp-dev \\\n                     libsdl1.2-dev libsdl-image1.2-dev libgtkmm-2.4-dev",
            "title": "Linux"
        },
        {
            "location": "/guide/installation/#windows",
            "text": "We will use Anaconda to create a new Python 3 environment and install all necessary packages.  conda create --name modm python=3\nactivate modm\nconda install -c conda-forge jinja2 scons future pyelftools git git+https://github.com/modm-io/library-builder  For ARM development install the Windows 32-bit build of the  GNU Arm Embedded Toolchain .\nFor programming and debugging ARM Cortex-M devices install the pre-build  OpenOCD binaries .\nYou'll need to add both  /bin  paths to your  PATH  variable manually.   For non-English speakers  For now project and build paths containing non-ASCII characters are not parsed correctly.    Dear Windows users  We don't regularly use Windows with modm, so we rely on YOU to keep these install instructions\nworking and up-to-date. Please  open a PR with improvements .",
            "title": "Windows"
        },
        {
            "location": "/guide/cookbook/",
            "text": "Cookbook\n\u00b6\n\n\nHere are a few snippets of code we use frequently.\nWe assume \nusing namespace modm::platform;\n to make the code more readable.\n\n\nAll modm code is either placed in the \nmodm\n namespace or prefixed with\n\nmodm_\n or \nMODM_\n to avoid clashes with other code.\nThe platform specific code is placed in the \nmodm::platform\n namespace and\nis the only place that contains target specific code.\n\n\n\n\nCheck the examples\n\n\nHave a look at the \nmodm/examples/\n folder\n for more advanced \nuse cases.\n\n\n\n\nGPIO\n\u00b6\n\n\nusing\n \nLed\n \n=\n \nGpioOutputB0\n;\n\n\nLed\n::\nsetOutput\n();\n\n\nLed\n::\nset\n();\n    \n// 1 instruction on AVR\n\n\nLed\n::\nreset\n();\n  \n// 3 instructions on Cortex-M\n\n\nLed\n::\ntoggle\n();\n\n\n\nusing\n \nButton\n \n=\n \nGpioInputB0\n;\n\n\nButton\n::\nsetInput\n(\nGpio\n::\nInputType\n::\nPullUp\n);\n\n\nbool\n \nstate\n \n=\n \nButton\n::\nread\n();\n\n\n\n\n\nBuffered UART\n\u00b6\n\n\nusing\n \nUart\n \n=\n \nUart0\n;\n\n\n// connect both pins with a pullup on the Rx\n\n\nUart\n::\nconnect\n<\nGpioOutputD1\n::\nTx\n,\n \nGpioInputD0\n::\nRx\n>\n(\nGpio\n::\nInputType\n::\nPullUp\n);\n\n\n// initialize to 115.2kBaud from the BSP clock configuration\n\n\nUart\n::\ninitialize\n<\nBoard\n::\nsystemClock\n,\n \n115200\n>\n();\n\n\n\nUart\n::\nwrite\n(\n'H'\n);\n  \n// Ohai there\n\n\nUart\n::\nwrite\n(\n'i'\n);\n\n\n\nuint8_t\n \nbuffer\n;\n\n\nwhile\n(\n1\n)\n \n{\n\n    \n// create a simple loopback\n\n    \nif\n \n(\nUart\n::\nread\n(\nbuffer\n))\n \n{\n\n        \nUart\n::\nwrite\n(\nbuffer\n);\n\n    \n}\n\n\n}\n\n\n\n\n\nIOStream\n\u00b6\n\n\nusing\n \nUart\n \n=\n \nUart0\n;\n\n\n// Create a IODevice with the Uart\n\n\nmodm\n::\nIODeviceWrapper\n<\nUart\n>\n \ndevice\n;\n\n\nmodm\n::\nIOStream\n \nstream\n(\ndevice\n);\n\n\n\nUart\n::\nconnect\n<\nGpioOutputD1\n::\nTx\n>\n();\n\n\nUart\n::\ninitialize\n<\nBoard\n::\nsystemClock\n,\n \n115200\n>\n();\n\n\n\n// similar to std::ostream but without formatting features\n\n\nstream\n \n<<\n \n42\n \n<<\n \n\" is a nice number!\"\n \n<<\n \nmodm\n::\nendl\n;\n\n\n// printf has the most common formatting features\n\n\nstream\n.\nprintf\n(\n\"%d is a %s number!\n\\n\n\"\n,\n \n42\n,\n \n\"nice\"\n);\n\n\n\n\n\nSoftware Timers\n\u00b6\n\n\nusing\n \nLed\n \n=\n \nGpioOutputB0\n;\n\n\nmodm\n::\nTimeout\n \ntimeout\n(\n10000\n);\n   \n// 10s timeout\n\n\nmodm\n::\nPeriodicTimer\n \ntimer\n(\n250\n);\n \n// 250ms period\n\n\n\nLed\n::\nsetOutput\n(\nmodm\n::\nGpio\n::\nHigh\n);\n\n\n\nwhile\n(\n1\n)\n \n{\n\n    \nif\n \n(\ntimeout\n.\nexecute\n())\n \n{\n\n        \n// executes just once\n\n        \ntimer\n.\nstop\n();\n\n        \nLed\n::\nreset\n();\n\n    \n}\n\n    \nif\n \n(\ntimer\n.\nexecute\n())\n \n{\n\n        \n// executes once per period\n\n        \nLed\n::\ntoggle\n();\n\n    \n}\n\n\n}",
            "title": "Cookbook"
        },
        {
            "location": "/guide/cookbook/#cookbook",
            "text": "Here are a few snippets of code we use frequently.\nWe assume  using namespace modm::platform;  to make the code more readable.  All modm code is either placed in the  modm  namespace or prefixed with modm_  or  MODM_  to avoid clashes with other code.\nThe platform specific code is placed in the  modm::platform  namespace and\nis the only place that contains target specific code.   Check the examples  Have a look at the  modm/examples/  folder  for more advanced \nuse cases.",
            "title": "Cookbook"
        },
        {
            "location": "/guide/cookbook/#gpio",
            "text": "using   Led   =   GpioOutputB0 ;  Led :: setOutput ();  Led :: set ();      // 1 instruction on AVR  Led :: reset ();    // 3 instructions on Cortex-M  Led :: toggle ();  using   Button   =   GpioInputB0 ;  Button :: setInput ( Gpio :: InputType :: PullUp );  bool   state   =   Button :: read ();",
            "title": "GPIO"
        },
        {
            "location": "/guide/cookbook/#buffered-uart",
            "text": "using   Uart   =   Uart0 ;  // connect both pins with a pullup on the Rx  Uart :: connect < GpioOutputD1 :: Tx ,   GpioInputD0 :: Rx > ( Gpio :: InputType :: PullUp );  // initialize to 115.2kBaud from the BSP clock configuration  Uart :: initialize < Board :: systemClock ,   115200 > ();  Uart :: write ( 'H' );    // Ohai there  Uart :: write ( 'i' );  uint8_t   buffer ;  while ( 1 )   { \n     // create a simple loopback \n     if   ( Uart :: read ( buffer ))   { \n         Uart :: write ( buffer ); \n     }  }",
            "title": "Buffered UART"
        },
        {
            "location": "/guide/cookbook/#iostream",
            "text": "using   Uart   =   Uart0 ;  // Create a IODevice with the Uart  modm :: IODeviceWrapper < Uart >   device ;  modm :: IOStream   stream ( device );  Uart :: connect < GpioOutputD1 :: Tx > ();  Uart :: initialize < Board :: systemClock ,   115200 > ();  // similar to std::ostream but without formatting features  stream   <<   42   <<   \" is a nice number!\"   <<   modm :: endl ;  // printf has the most common formatting features  stream . printf ( \"%d is a %s number! \\n \" ,   42 ,   \"nice\" );",
            "title": "IOStream"
        },
        {
            "location": "/guide/cookbook/#software-timers",
            "text": "using   Led   =   GpioOutputB0 ;  modm :: Timeout   timeout ( 10000 );     // 10s timeout  modm :: PeriodicTimer   timer ( 250 );   // 250ms period  Led :: setOutput ( modm :: Gpio :: High );  while ( 1 )   { \n     if   ( timeout . execute ())   { \n         // executes just once \n         timer . stop (); \n         Led :: reset (); \n     } \n     if   ( timer . execute ())   { \n         // executes once per period \n         Led :: toggle (); \n     }  }",
            "title": "Software Timers"
        },
        {
            "location": "/guide/testing/",
            "text": "Testing modm\n\u00b6\n\n\nmodm includes a large number of example as well as an extensive unit test suite\nwhich can be compiled and execute on hosted and embedded targets. We\u2018ve written\nour own small test harness to be able to fit the tests onto very small devices\nlike AVRs. As part of our Continuous Integration checks, all examples are\ncompiled and hundreds of unit tests are executed to help us catch regressions.\n\n\nHowever, there is room for improvement in both our test coverage, as well as our\ntest execution. For example, while most important platform-independent code is\ncovered in our unit tests,  the HAL is not tested systematically but only\nmanually whenever a developer executes an example on their hardware or works\non the HAL. Nevertheless, the quality is still fairly high, mostly due to the\nrelative simplicity of our HAL driver code.\n\n\nHere are some guidelines and tips on how to make the best of what testing \nabilities we have available today.\n\n\nManual Tests\n\u00b6\n\n\nThere is plenty of opportunity to customize modm, either using lbuild\u2018s module\noptions or simply by using the HAL on your specific hardware. This means the\nmore examples we have of different configurations and use-cases the better we\ncan debug existing problems and prevent new ones.\n\n\nSo when working on a fix or a new feature, make sure to create a simple example,\nso that others have an idea of the environment in which it was developed.\nTest your new code on real hardware with the compiler toolchain we use and make\nsure to document any caveats you discover.\n\n\nYou can compile all examples locally using our helper script.\n\n\n $ \ncd\n examples\n $ ../tools/scripts/examples_compile.py .\n\n\n\n\n\n\nAdd your example to our CI\n\n\nIf you created a new folder inside \nmodm/examples\n, you need to add it to\none of the jobs in \n.circleci/config.yml\n:\n\n- run:\n  name: Examples YOUR TARGET\n  command: \n|\n\n    \n(\ncd\n examples \n&&\n ../tools/scripts/examples_compile.py new_folder\n)\n\n\n\n\n\n\nUnit Tests\n\u00b6\n\n\nOur unit tests are located in the \nmodm/test\n directory and are generated using\nlbuild as well. They are all submodules of \nmodm:test\n and are all platform\nindependent. We\u2018ve written a small Makefile for the most commonly used commands.\n\n\n $ \ncd\n tests\n   \n# generates, compiles and executes the unit tests for hosted targets\n\n $ make run-hosted-linux\n $ make run-hosted-darwin\n   \n# generates and compiles the unit tests for embedded targets\n\n $ make compile-nucleo-f411\n $ make compile-nucleo-f103\n $ make compile-al-avreb-can\n   \n# executes the unit tests on the embedded targets\n\n $ make run-nucleo-f411\n $ make run-nucleo-f103\n $ make run-al-avreb-can\n\n\n\n\n\n\nMonitor the serial output\n\n\nThe embedded test targets all use the \nmodm::Board\n interface to initialize\nthe targets and output unit tests results via the default serial connection.\n\n\n\n\nThe unit test library we use is located in \nmodm/src/unittest\n which is the\n\nmodm:unittest\n modules. See the existing unit tests for example on how to write\nyour own.\n\n\n\n\nRunning unit tests on small targets\n\n\nFitting all unit tests into one executable image is not possible on smaller\nAVR and STM32 targets. For these targets only a subset of unit tests must be\nselected in the \nproject.xml\n file and multiple images must be executed\nmanually. We would like to automate this in the future.\n\n\n\n\nTest all Targets\n\u00b6\n\n\nApart from unit tests, we also generate the HAL (all modules in \nmodm:platform:**\n)\nfor ALL targets we support and compile it with a simple GPIO example.\nThis doesn't catch everything, but it does make sure that these modules are at\nleast compilable, which is particularly interesting when writing new peripheral\ndrivers which may have different implementations on other targets.\nYou may call \n\n\n $ \ncd\n test/all\n $ make run-avr \n# run for all AVRs\n\n $ make run-stm32 \n# run for all STM32, this may take a while\n\n $ python3 run_all.py stm32f4\n  o  stm32f410t8y         \n75\n.9s\n  o  stm32f410cbt         \n81\n.9s\n  ...\n  o  stm32f479zgt         \n19\n.7s\n  o  stm32f479ngh         \n20\n.3s\n\nSUCCESS \n209\n\nFAIL    \n0\n\n------------------\nTotal:  \n209\n\n $ make run-failed \n# only run those that failed the last test\n\n\n\n\n\n\n\nTarget Compilation Logs\n\n\nThe individual compilation logs are all saved as artifacts, so that when \nsomething fails, it\u2018s easy to understand why.\nYou can access them in \nthe Artifacts tab of a build\n.\n\n\n\n\nContinous Integration\n\u00b6\n\n\nmodm uses \nCircleCI as a Continous Integration service\n. It compiles\nall the examples and executes the unit tests on Linux, then generates and \ncompiles the full library for a blinky example for all targets that we support. \n\n\nIn the future we would like to execute the unit tests as well as the examples\nautomatically on the target hardware as well. However, there isn\u2018t any\nthird-party framework to make that easy, so we probably have to write our own.",
            "title": "Testing"
        },
        {
            "location": "/guide/testing/#testing-modm",
            "text": "modm includes a large number of example as well as an extensive unit test suite\nwhich can be compiled and execute on hosted and embedded targets. We\u2018ve written\nour own small test harness to be able to fit the tests onto very small devices\nlike AVRs. As part of our Continuous Integration checks, all examples are\ncompiled and hundreds of unit tests are executed to help us catch regressions.  However, there is room for improvement in both our test coverage, as well as our\ntest execution. For example, while most important platform-independent code is\ncovered in our unit tests,  the HAL is not tested systematically but only\nmanually whenever a developer executes an example on their hardware or works\non the HAL. Nevertheless, the quality is still fairly high, mostly due to the\nrelative simplicity of our HAL driver code.  Here are some guidelines and tips on how to make the best of what testing \nabilities we have available today.",
            "title": "Testing modm"
        },
        {
            "location": "/guide/testing/#manual-tests",
            "text": "There is plenty of opportunity to customize modm, either using lbuild\u2018s module\noptions or simply by using the HAL on your specific hardware. This means the\nmore examples we have of different configurations and use-cases the better we\ncan debug existing problems and prevent new ones.  So when working on a fix or a new feature, make sure to create a simple example,\nso that others have an idea of the environment in which it was developed.\nTest your new code on real hardware with the compiler toolchain we use and make\nsure to document any caveats you discover.  You can compile all examples locally using our helper script.   $  cd  examples\n $ ../tools/scripts/examples_compile.py .   Add your example to our CI  If you created a new folder inside  modm/examples , you need to add it to\none of the jobs in  .circleci/config.yml : - run:\n  name: Examples YOUR TARGET\n  command:  | \n     ( cd  examples  &&  ../tools/scripts/examples_compile.py new_folder )",
            "title": "Manual Tests"
        },
        {
            "location": "/guide/testing/#unit-tests",
            "text": "Our unit tests are located in the  modm/test  directory and are generated using\nlbuild as well. They are all submodules of  modm:test  and are all platform\nindependent. We\u2018ve written a small Makefile for the most commonly used commands.   $  cd  tests\n    # generates, compiles and executes the unit tests for hosted targets \n $ make run-hosted-linux\n $ make run-hosted-darwin\n    # generates and compiles the unit tests for embedded targets \n $ make compile-nucleo-f411\n $ make compile-nucleo-f103\n $ make compile-al-avreb-can\n    # executes the unit tests on the embedded targets \n $ make run-nucleo-f411\n $ make run-nucleo-f103\n $ make run-al-avreb-can   Monitor the serial output  The embedded test targets all use the  modm::Board  interface to initialize\nthe targets and output unit tests results via the default serial connection.   The unit test library we use is located in  modm/src/unittest  which is the modm:unittest  modules. See the existing unit tests for example on how to write\nyour own.   Running unit tests on small targets  Fitting all unit tests into one executable image is not possible on smaller\nAVR and STM32 targets. For these targets only a subset of unit tests must be\nselected in the  project.xml  file and multiple images must be executed\nmanually. We would like to automate this in the future.",
            "title": "Unit Tests"
        },
        {
            "location": "/guide/testing/#test-all-targets",
            "text": "Apart from unit tests, we also generate the HAL (all modules in  modm:platform:** )\nfor ALL targets we support and compile it with a simple GPIO example.\nThis doesn't catch everything, but it does make sure that these modules are at\nleast compilable, which is particularly interesting when writing new peripheral\ndrivers which may have different implementations on other targets.\nYou may call    $  cd  test/all\n $ make run-avr  # run for all AVRs \n $ make run-stm32  # run for all STM32, this may take a while \n $ python3 run_all.py stm32f4\n  o  stm32f410t8y          75 .9s\n  o  stm32f410cbt          81 .9s\n  ...\n  o  stm32f479zgt          19 .7s\n  o  stm32f479ngh          20 .3s\n\nSUCCESS  209 \nFAIL     0 \n------------------\nTotal:   209 \n $ make run-failed  # only run those that failed the last test    Target Compilation Logs  The individual compilation logs are all saved as artifacts, so that when \nsomething fails, it\u2018s easy to understand why.\nYou can access them in  the Artifacts tab of a build .",
            "title": "Test all Targets"
        },
        {
            "location": "/guide/testing/#continous-integration",
            "text": "modm uses  CircleCI as a Continous Integration service . It compiles\nall the examples and executes the unit tests on Linux, then generates and \ncompiles the full library for a blinky example for all targets that we support.   In the future we would like to execute the unit tests as well as the examples\nautomatically on the target hardware as well. However, there isn\u2018t any\nthird-party framework to make that easy, so we probably have to write our own.",
            "title": "Continous Integration"
        },
        {
            "location": "/reference/build-systems/",
            "text": "Build Systems\n\u00b6\n\n\nBefore modm our HAL code generation was done as a SCons tool during \ncompilation. This worked for us, however, made it very difficult to include\nour code into other build systems.\nWe therefore made the code generation a separate step with lbuild.\n\n\nThere are two build script generators shipping with modm, which in cooperation\nwith the parent \nmodm:build\n module\n provide compilation,\nuploading and debugging functionality.\n\n\nSCons\n\u00b6\n\n\nThe \nmodm:build:scons\n module extends the default SCons build system with many\ncustom utilities for a smooth integration of embedded tools.\n\n\nRead the module documentation for all the details\n.\n\n\nCMake\n\u00b6\n\n\nThe \nmodm:build:cmake\n module configures CMake\nfor compiling modm for STM32 targets.\nThis module ships with a Makefile that wraps all of the CMake commands.\n\n\nRead the module documentation for all the details\n.",
            "title": "Build Systems"
        },
        {
            "location": "/reference/build-systems/#build-systems",
            "text": "Before modm our HAL code generation was done as a SCons tool during \ncompilation. This worked for us, however, made it very difficult to include\nour code into other build systems.\nWe therefore made the code generation a separate step with lbuild.  There are two build script generators shipping with modm, which in cooperation\nwith the parent  modm:build  module  provide compilation,\nuploading and debugging functionality.",
            "title": "Build Systems"
        },
        {
            "location": "/reference/build-systems/#scons",
            "text": "The  modm:build:scons  module extends the default SCons build system with many\ncustom utilities for a smooth integration of embedded tools.  Read the module documentation for all the details .",
            "title": "SCons"
        },
        {
            "location": "/reference/build-systems/#cmake",
            "text": "The  modm:build:cmake  module configures CMake\nfor compiling modm for STM32 targets.\nThis module ships with a Makefile that wraps all of the CMake commands.  Read the module documentation for all the details .",
            "title": "CMake"
        },
        {
            "location": "/reference/module/modm-architecture/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nAdc\n;\n\n\nclass\n \nmodm\n::\nAdcInterrupt\n;\n\n\nclass\n \nmodm\n::\nBlockAllocator\n<\n \ntypename\n \nT\n \n,\n \nunsigned\n \nint\n \nBLOCK_SIZE\n \n>\n;\n\n\nclass\n \nmodm\n::\nBlockDevice\n;\n\n\nclass\n \nmodm\n::\nCan\n;\n\n\nclass\n \nmodm\n::\nClock\n;\n\n\nclass\n \nmodm\n::\nGpioExpander\n;\n\n\nclass\n \nmodm\n::\nGpioExpanderPin\n<\n \ntypename\n \nGpioExpander\n,\n \nGpioExpander\n \n&\n \nexpander\n,\n \ntypename\n \nGpioExpander\n::\nPin\n \npin\n \n>\n;\n\n\nclass\n \nmodm\n::\nGpioExpanderPort\n<\n \ntypename\n \nGpioExpander\n,\n \nGpioExpander\n \n&\n \nexpander\n,\n \ntypename\n \nGpioExpander\n::\nPin\n \nStartPin\n,\n \nuint8_t\n \nWidth\n,\n \nGpioPort\n::\nDataOrder\n \nDataOrder\n=\nGpioPort\n::\nDataOrder\n::\nNormal\n \n>\n;\n\n\nclass\n \nmodm\n::\nGpioIO\n;\n\n\nclass\n \nmodm\n::\nGpioInput\n;\n\n\nclass\n \nmodm\n::\nGpioOutput\n;\n\n\nclass\n \nmodm\n::\nGpioPort\n;\n\n\nclass\n \nmodm\n::\nI2cDevice\n<\n \nclass\n \nI2cMaster\n,\n \nuint8_t\n \nNestingLevels\n=\n10\n,\n \nclass\n \nTransaction\n=\nI2cWriteReadTransaction\n \n>\n;\n\n\nclass\n \nmodm\n::\nI2cMaster\n;\n\n\nclass\n \nmodm\n::\nI2cReadTransaction\n;\n\n\nclass\n \nmodm\n::\nI2cTransaction\n;\n\n\nclass\n \nmodm\n::\nI2cWriteReadTransaction\n;\n\n\nclass\n \nmodm\n::\nI2cWriteTransaction\n;\n\n\nclass\n \nmodm\n::\nPeripheralDriver\n;\n\n\nclass\n \nmodm\n::\nSpiDevice\n<\n \nclass\n \nSpiMaster\n \n>\n;\n\n\nclass\n \nmodm\n::\nSpiMaster\n;\n\n\nclass\n \nmodm\n::\nUart\n;\n\n\nclass\n \nmodm\n::\naccessor\n::\nFlash\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\naccessor\n::\nRam\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\natomic\n::\nContainer\n<\n \ntypename\n \nT\n  \n>\n;\n\n\nclass\n \nmodm\n::\natomic\n::\nFlag\n;\n\n\nclass\n \nmodm\n::\natomic\n::\nLock\n;\n\n\nclass\n \nmodm\n::\natomic\n::\nQueue\n<\n \ntypename\n \nT\n,\n \nstd\n::\nsize_t\n \nN\n \n>\n;\n\n\nclass\n \nmodm\n::\natomic\n::\nUnlock\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nConfiguration\n<\n \ntypename\n \nParent\n \n,\n \ntypename\n \nEnum\n \n,\n \ntypename\n \nParent\n::\nUnderlyingType\n \nMask\n,\n \ntypename\n \nParent\n::\nUnderlyingType\n \nPosition\n=\n0\n \n>\n;\n\n\nstruct\n \nmodm\n::\nFlags\n<\n \ntypename\n \nEnum\n \n,\n \ntypename\n \nT\n  \n>\n;\n\n\nstruct\n \nmodm\n::\nFlagsGroup\n<\n \nT\n...\n \n>\n;\n\n\nstruct\n \nmodm\n::\nFlagsOperators\n<\n \ntypename\n \nEnum\n,\n \ntypename\n \nT\n \n>\n;\n\n\nstruct\n \nmodm\n::\nGpio\n;\n\n\nstruct\n \nmodm\n::\nI2c\n;\n\n\nstruct\n \nmodm\n::\nI2cTransaction\n::\nReading\n;\n\n\nstruct\n \nmodm\n::\nI2cTransaction\n::\nStarting\n;\n\n\nstruct\n \nmodm\n::\nI2cTransaction\n::\nWriting\n;\n\n\nstruct\n \nmodm\n::\nRegister\n<\n \ntypename\n \nT\n \n>\n;\n\n\nstruct\n \nmodm\n::\nSpi\n;\n\n\nstruct\n \nmodm\n::\nValue\n<\n \ntypename\n \nParent\n \n,\n \ntypename\n \nParent\n::\nUnderlyingType\n \nWidth\n,\n \ntypename\n \nParent\n::\nUnderlyingType\n \nPosition\n=\n0\n \n>\n;\n\n\nstruct\n \nmodm\n::\ncan\n::\nMessage\n::\nFlags\n;\n\n\nstruct\n \nmodm\n::\ncan\n::\nMessage\n;\n\n\nstruct\n \nmodm\n::\nunaligned_t\n<\n \ntypename\n \nT\n  \n>\n;\n\n\n\n// Function\n\n\ninline\n \n::\nmodm\n::\naccessor\n::\nFlash\n<\nT\n>\n \nmodm\n::\naccessor\n::\nasFlash\n(\nconst\n \nT\n \n*\nptr\n);\n\n\nmodm\n::\nIOStream\n&\n \nmodm\n::\ncan\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\ns\n,\n \nconst\n \nmodm\n::\ncan\n::\nMessage\n \nm\n);\n\n\nmodm\n::\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\ns\n,\n \nconst\n \nmodm\n::\nI2c\n::\nOperation\n \nop\n);\n\n\nmodm\n::\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\ns\n,\n \nconst\n \nmodm\n::\nI2c\n::\nOperationAfterRead\n \nop\n);\n\n\nmodm\n::\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\ns\n,\n \nconst\n \nmodm\n::\nI2c\n::\nOperationAfterStart\n \nop\n);\n\n\nmodm\n::\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\ns\n,\n \nconst\n \nmodm\n::\nI2c\n::\nOperationAfterWrite\n \nop\n);\n\n\nmodm\n::\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\nstream\n,\n \nconst\n \nCan\n::\nBusState\n \nstate\n);\n\n\nmodm\n::\nIOStream\n&\n \noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\nos\n,\n \nmodm\n::\naccessor\n::\nFlash\n<\n \nT\n \n>\n \nptr\n);\n\n\nmodm_extern_c\n \nbool\n \nmodm_assert\n(\nbool\n \ncondition\n,\n \nconst\n \nchar\n \n*\nmodule\n,\n \nconst\n \nchar\n \n*\nlocation\n,\n \nconst\n \nchar\n \n*\nfailure\n);\n\n\nmodm_extern_c\n \nbool\n \nmodm_assert\n(\nbool\n \ncondition\n,\n \nconst\n \nchar\n \n*\nmodule\n,\n \nconst\n \nchar\n \n*\nlocation\n,\n \nconst\n \nchar\n \n*\nfailure\n,\n \nuintptr_t\n \ncontext\n);\n\n\nmodm_extern_c\n \nbool\n \nmodm_assert_debug\n(\nbool\n \ncondition\n,\n \nconst\n \nchar\n \n*\nmodule\n,\n \nconst\n \nchar\n \n*\nlocation\n,\n \nconst\n \nchar\n \n*\nfailure\n);\n\n\nmodm_extern_c\n \nbool\n \nmodm_assert_debug\n(\nbool\n \ncondition\n,\n \nconst\n \nchar\n \n*\nmodule\n,\n \nconst\n \nchar\n \n*\nlocation\n,\n \nconst\n \nchar\n \n*\nfailure\n,\n \nuintptr_t\n \ncontext\n);\n\n\nmodm_extern_c\n \nvoid\n \nmodm_abandon\n(\nconst\n \nchar\n \n*\nmodule\n,\n \nconst\n \nchar\n \n*\nlocation\n,\n \nconst\n \nchar\n \n*\nfailure\n,\n \nuintptr_t\n \ncontext\n)\n \nmodm_weak\n;\n\n\nstatic\n \nconstexpr\n \nint\n \nmodm\n::\nclock\n::\nMHz\n(\nint\n \nf\n);\n\n\nstatic\n \nconstexpr\n \nint\n \nmodm\n::\nclock\n::\nkHz\n(\nint\n \nf\n);\n\n\nstatic\n \nmodm\n::\nIOStream\n&\n \noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\nos\n,\n \nmodm\n::\naccessor\n::\nFlash\n<\n \nchar\n \n>\n \nptr\n);\n\n\nstatic\n \nmodm_unused\n \nconstexpr\n \nint\n \nmodm\n::\nclock\n::\nHz\n(\nint\n \nf\n);\n\n\nstatic\n \nmodm_unused\n \nconstexpr\n \nuint32_t\n \nmodm\n::\nclock\n::\nu32MHz\n(\nint\n \nf\n);\n\n\nstatic\n \nmodm_unused\n \nconstexpr\n \nuint32_t\n \nmodm\n::\nclock\n::\nu32kHz\n(\nint\n \nf\n);\n\n\nunaligned_t\n<\nT\n>*\n \nmodm\n::\nasUnaligned\n(\nU\n \n*\nvalue\n);\n\n\nvoid\n \nmodm\n::\ndelayMicroseconds\n(\nuint16_t\n \nus\n);\n\n\nvoid\n \nmodm\n::\ndelayMilliseconds\n(\nuint16_t\n \nms\n);\n\n\nvoid\n \nmodm\n::\ndelayNanoseconds\n(\nuint16_t\n \nns\n);\n\n\nvoid\n*\n \noperator\n \nnew\n(\nsize_t\n \nsize\n,\n \nmodm\n::\nMemoryTraits\n \ntraits\n)\n \nnoexcept\n;\n\n\nvoid\n*\n \noperator\n \nnew\n[](\nsize_t\n \nsize\n,\n \nmodm\n::\nMemoryTraits\n \ntraits\n)\n \nnoexcept\n;\n\n\nvolatile\n \nT\n&\n \nmodm\n::\naccessor\n::\nasVolatile\n(\nT\n \n&\nvalue\n);\n\n\n\n// Enum\n\n\nenum\n \nFrequency\n;\n\n\nenum\n \nRomCommand\n;\n\n\nenum\n \nclass\n \nAbandonment\n;\n\n\nenum\n \nclass\n \nMemoryTrait\n;\n\n\n\n// Variable\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryBackup\n \n=\n \n(\nMemoryTrait\n::\nAccessSBus\n \n|\n \nMemoryTrait\n::\nTypeNonVolatile\n);\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryDMA\n \n=\n \n(\nMemoryTrait\n::\nAccessSBus\n \n|\n \nMemoryTrait\n::\nAccessDMA\n);\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryDMA2D\n \n=\n \n(\nMemoryTrait\n::\nAccessSBus\n \n|\n \nMemoryTrait\n::\nAccessDMA2D\n);\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryDefault\n \n=\n \nMemoryDMA\n;\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryExternal\n \n=\n \n(\nMemoryTrait\n::\nAccessSBus\n \n|\n \nMemoryTrait\n::\nTypeExternal\n);\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryFastCode\n \n=\n \n(\nMemoryTrait\n::\nAccessIBus\n \n|\n \nMemoryTrait\n::\nTypeCoreCoupled\n);\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryFastData\n \n=\n \n(\nMemoryTrait\n::\nAccessDBus\n \n|\n \nMemoryTrait\n::\nTypeCoreCoupled\n);\n\n\n\n// Typedef\n\n\nusing\n \nmodm\n::\nAssertionHandler\n \n=\n \ntypedef\n \nAbandonment\n \n(\n*\n)(\nconst\n \nchar\n \n*\n \nmodule\n,\n \nconst\n \nchar\n \n*\n \nlocation\n,\n \nconst\n \nchar\n \n*\n \nfailure\n,\n \nuintptr_t\n \ncontext\n);\n\n\nusing\n \nmodm\n::\nFlags16\n \n=\n \ntypedef\n \nFlags\n<\nEnum\n,\n \nuint16_t\n>\n;\n\n\nusing\n \nmodm\n::\nFlags32\n \n=\n \ntypedef\n \nFlags\n<\nEnum\n,\n \nuint32_t\n>\n;\n\n\nusing\n \nmodm\n::\nFlags8\n \n=\n \ntypedef\n \nFlags\n<\nEnum\n,\n \nuint8_t\n>\n;\n\n\nusing\n \nmodm\n::\nMemoryTraits\n \n=\n \ntypedef\n \nFlags16\n<\nMemoryTrait\n>\n;\n\n\nusing\n \nmodm\n::\nRegister16\n \n=\n \ntypedef\n \nRegister\n<\nuint16_t\n>\n;\n\n\nusing\n \nmodm\n::\nRegister32\n \n=\n \ntypedef\n \nRegister\n<\nuint32_t\n>\n;\n\n\nusing\n \nmodm\n::\nRegister8\n \n=\n \ntypedef\n \nRegister\n<\nuint8_t\n>\n;\n\n\n\n// Define\n\n\n#define EXTERN_FLASH_STORAGE(var)\n\n\n#define EXTERN_FLASH_STORAGE_STRING(s)\n\n\n#define FLASH_STORAGE(var)\n\n\n#define FLASH_STORAGE_STRING(s)\n\n\n#define MODM_ALIGNMENT\n\n\n#define MODM_ARRAY_SIZE(x)\n\n\n#define MODM_ASSERTION_HANDLER(handler)\n\n\n#define MODM_BYTE_ORDER\n\n\n#define MODM_COMPILER_GCC\n\n\n#define MODM_COMPILER_MSVC\n\n\n#define MODM_COMPILER_STRING\n\n\n#define MODM_CONCAT(a, b)\n\n\n#define MODM_CONCAT3(a, b, c)\n\n\n#define MODM_CONCAT4(a, b, c, d)\n\n\n#define MODM_CONCAT5(a, b, c, d, e)\n\n\n#define MODM_CPU_ARM\n\n\n#define MODM_CPU_ARM7TDMI\n\n\n#define MODM_CPU_ATMEGA\n\n\n#define MODM_CPU_ATTINY\n\n\n#define MODM_CPU_ATXMEGA\n\n\n#define MODM_CPU_AVR\n\n\n#define MODM_CPU_CORTEX_M0\n\n\n#define MODM_CPU_CORTEX_M4\n\n\n#define MODM_CPU_CORTEX_M4\n\n\n#define MODM_CPU_STRING\n\n\n#define MODM_FLAGS16(Enum)\n\n\n#define MODM_FLAGS32(Enum)\n\n\n#define MODM_FLAGS8(Enum)\n\n\n#define MODM_ISR(vector, ...)\n\n\n#define MODM_ISR_CALL(vector)\n\n\n#define MODM_ISR_DECL(vector)\n\n\n#define MODM_ISR_NAME(vector)\n\n\n#define MODM_IS_BIG_ENDIAN\n\n\n#define MODM_IS_LITTLE_ENDIAN\n\n\n#define MODM_ORDER_BIG_ENDIAN\n\n\n#define MODM_ORDER_LITTLE_ENDIAN\n\n\n#define MODM_ORDER_PDP_ENDIAN\n\n\n#define MODM_OS_HOSTED\n\n\n#define MODM_OS_HOSTED_64\n\n\n#define MODM_OS_LINUX\n\n\n#define MODM_OS_OSX\n\n\n#define MODM_OS_STRING\n\n\n#define MODM_OS_UNIX\n\n\n#define MODM_OS_WIN32\n\n\n#define MODM_OS_WIN64\n\n\n#define MODM_SIZEOF_POINTER\n\n\n#define MODM_STRINGIFY(s)\n\n\n#define MODM_TYPE_FLAGS(Parent)\n\n\n#define PSTR(s)\n\n\n#define modm_aligned(n)\n\n\n#define modm_always_inline\n\n\n#define modm_fastcode\n\n\n#define modm_fastdata\n\n\n#define modm_likely(x)\n\n\n#define modm_packed\n\n\n#define modm_section(s)\n\n\n#define modm_unlikely(x)\n\n\n#define modm_unused\n\n\n#define modm_weak\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\nmodm_math\n\n\n\n\n\n\nmodm:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture->modm_math\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_1-wire\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\n1-wire\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_1-wire->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_accessor->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_adc\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nadc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_adc->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_assert\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nassert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_assert->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\natomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_block_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nblock.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_block_device->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_can\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_can->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_clock->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_delay->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio.expander\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_heap\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nheap\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_heap->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_interrupt\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ninterrupt\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_interrupt->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_memory\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nmemory\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_memory->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi_device->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_uart\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_uart->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_unaligned\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nunaligned\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_unaligned->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container\n\n\n\n\n\n\nmodm:\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_filter\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nfilter\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_filter->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\ngeometry\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_protothread\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nprotothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_protothread->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils->modm_architecture",
            "title": "modm:architecture"
        },
        {
            "location": "/reference/module/modm-architecture/#modmarchitecture",
            "text": "",
            "title": "modm:architecture"
        },
        {
            "location": "/reference/module/modm-architecture/#content",
            "text": "// Class  class   modm :: Adc ;  class   modm :: AdcInterrupt ;  class   modm :: BlockAllocator <   typename   T   ,   unsigned   int   BLOCK_SIZE   > ;  class   modm :: BlockDevice ;  class   modm :: Can ;  class   modm :: Clock ;  class   modm :: GpioExpander ;  class   modm :: GpioExpanderPin <   typename   GpioExpander ,   GpioExpander   &   expander ,   typename   GpioExpander :: Pin   pin   > ;  class   modm :: GpioExpanderPort <   typename   GpioExpander ,   GpioExpander   &   expander ,   typename   GpioExpander :: Pin   StartPin ,   uint8_t   Width ,   GpioPort :: DataOrder   DataOrder = GpioPort :: DataOrder :: Normal   > ;  class   modm :: GpioIO ;  class   modm :: GpioInput ;  class   modm :: GpioOutput ;  class   modm :: GpioPort ;  class   modm :: I2cDevice <   class   I2cMaster ,   uint8_t   NestingLevels = 10 ,   class   Transaction = I2cWriteReadTransaction   > ;  class   modm :: I2cMaster ;  class   modm :: I2cReadTransaction ;  class   modm :: I2cTransaction ;  class   modm :: I2cWriteReadTransaction ;  class   modm :: I2cWriteTransaction ;  class   modm :: PeripheralDriver ;  class   modm :: SpiDevice <   class   SpiMaster   > ;  class   modm :: SpiMaster ;  class   modm :: Uart ;  class   modm :: accessor :: Flash <   typename   T   > ;  class   modm :: accessor :: Ram <   typename   T   > ;  class   modm :: atomic :: Container <   typename   T    > ;  class   modm :: atomic :: Flag ;  class   modm :: atomic :: Lock ;  class   modm :: atomic :: Queue <   typename   T ,   std :: size_t   N   > ;  class   modm :: atomic :: Unlock ;  // Struct  struct   modm :: Configuration <   typename   Parent   ,   typename   Enum   ,   typename   Parent :: UnderlyingType   Mask ,   typename   Parent :: UnderlyingType   Position = 0   > ;  struct   modm :: Flags <   typename   Enum   ,   typename   T    > ;  struct   modm :: FlagsGroup <   T ...   > ;  struct   modm :: FlagsOperators <   typename   Enum ,   typename   T   > ;  struct   modm :: Gpio ;  struct   modm :: I2c ;  struct   modm :: I2cTransaction :: Reading ;  struct   modm :: I2cTransaction :: Starting ;  struct   modm :: I2cTransaction :: Writing ;  struct   modm :: Register <   typename   T   > ;  struct   modm :: Spi ;  struct   modm :: Value <   typename   Parent   ,   typename   Parent :: UnderlyingType   Width ,   typename   Parent :: UnderlyingType   Position = 0   > ;  struct   modm :: can :: Message :: Flags ;  struct   modm :: can :: Message ;  struct   modm :: unaligned_t <   typename   T    > ;  // Function  inline   :: modm :: accessor :: Flash < T >   modm :: accessor :: asFlash ( const   T   * ptr );  modm :: IOStream &   modm :: can :: operator << ( modm :: IOStream   & s ,   const   modm :: can :: Message   m );  modm :: IOStream &   modm :: operator << ( modm :: IOStream   & s ,   const   modm :: I2c :: Operation   op );  modm :: IOStream &   modm :: operator << ( modm :: IOStream   & s ,   const   modm :: I2c :: OperationAfterRead   op );  modm :: IOStream &   modm :: operator << ( modm :: IOStream   & s ,   const   modm :: I2c :: OperationAfterStart   op );  modm :: IOStream &   modm :: operator << ( modm :: IOStream   & s ,   const   modm :: I2c :: OperationAfterWrite   op );  modm :: IOStream &   modm :: operator << ( modm :: IOStream   & stream ,   const   Can :: BusState   state );  modm :: IOStream &   operator << ( modm :: IOStream   & os ,   modm :: accessor :: Flash <   T   >   ptr );  modm_extern_c   bool   modm_assert ( bool   condition ,   const   char   * module ,   const   char   * location ,   const   char   * failure );  modm_extern_c   bool   modm_assert ( bool   condition ,   const   char   * module ,   const   char   * location ,   const   char   * failure ,   uintptr_t   context );  modm_extern_c   bool   modm_assert_debug ( bool   condition ,   const   char   * module ,   const   char   * location ,   const   char   * failure );  modm_extern_c   bool   modm_assert_debug ( bool   condition ,   const   char   * module ,   const   char   * location ,   const   char   * failure ,   uintptr_t   context );  modm_extern_c   void   modm_abandon ( const   char   * module ,   const   char   * location ,   const   char   * failure ,   uintptr_t   context )   modm_weak ;  static   constexpr   int   modm :: clock :: MHz ( int   f );  static   constexpr   int   modm :: clock :: kHz ( int   f );  static   modm :: IOStream &   operator << ( modm :: IOStream   & os ,   modm :: accessor :: Flash <   char   >   ptr );  static   modm_unused   constexpr   int   modm :: clock :: Hz ( int   f );  static   modm_unused   constexpr   uint32_t   modm :: clock :: u32MHz ( int   f );  static   modm_unused   constexpr   uint32_t   modm :: clock :: u32kHz ( int   f );  unaligned_t < T >*   modm :: asUnaligned ( U   * value );  void   modm :: delayMicroseconds ( uint16_t   us );  void   modm :: delayMilliseconds ( uint16_t   ms );  void   modm :: delayNanoseconds ( uint16_t   ns );  void *   operator   new ( size_t   size ,   modm :: MemoryTraits   traits )   noexcept ;  void *   operator   new []( size_t   size ,   modm :: MemoryTraits   traits )   noexcept ;  volatile   T &   modm :: accessor :: asVolatile ( T   & value );  // Enum  enum   Frequency ;  enum   RomCommand ;  enum   class   Abandonment ;  enum   class   MemoryTrait ;  // Variable  constexpr   MemoryTraits   modm :: MemoryBackup   =   ( MemoryTrait :: AccessSBus   |   MemoryTrait :: TypeNonVolatile );  constexpr   MemoryTraits   modm :: MemoryDMA   =   ( MemoryTrait :: AccessSBus   |   MemoryTrait :: AccessDMA );  constexpr   MemoryTraits   modm :: MemoryDMA2D   =   ( MemoryTrait :: AccessSBus   |   MemoryTrait :: AccessDMA2D );  constexpr   MemoryTraits   modm :: MemoryDefault   =   MemoryDMA ;  constexpr   MemoryTraits   modm :: MemoryExternal   =   ( MemoryTrait :: AccessSBus   |   MemoryTrait :: TypeExternal );  constexpr   MemoryTraits   modm :: MemoryFastCode   =   ( MemoryTrait :: AccessIBus   |   MemoryTrait :: TypeCoreCoupled );  constexpr   MemoryTraits   modm :: MemoryFastData   =   ( MemoryTrait :: AccessDBus   |   MemoryTrait :: TypeCoreCoupled );  // Typedef  using   modm :: AssertionHandler   =   typedef   Abandonment   ( * )( const   char   *   module ,   const   char   *   location ,   const   char   *   failure ,   uintptr_t   context );  using   modm :: Flags16   =   typedef   Flags < Enum ,   uint16_t > ;  using   modm :: Flags32   =   typedef   Flags < Enum ,   uint32_t > ;  using   modm :: Flags8   =   typedef   Flags < Enum ,   uint8_t > ;  using   modm :: MemoryTraits   =   typedef   Flags16 < MemoryTrait > ;  using   modm :: Register16   =   typedef   Register < uint16_t > ;  using   modm :: Register32   =   typedef   Register < uint32_t > ;  using   modm :: Register8   =   typedef   Register < uint8_t > ;  // Define  #define EXTERN_FLASH_STORAGE(var)  #define EXTERN_FLASH_STORAGE_STRING(s)  #define FLASH_STORAGE(var)  #define FLASH_STORAGE_STRING(s)  #define MODM_ALIGNMENT  #define MODM_ARRAY_SIZE(x)  #define MODM_ASSERTION_HANDLER(handler)  #define MODM_BYTE_ORDER  #define MODM_COMPILER_GCC  #define MODM_COMPILER_MSVC  #define MODM_COMPILER_STRING  #define MODM_CONCAT(a, b)  #define MODM_CONCAT3(a, b, c)  #define MODM_CONCAT4(a, b, c, d)  #define MODM_CONCAT5(a, b, c, d, e)  #define MODM_CPU_ARM  #define MODM_CPU_ARM7TDMI  #define MODM_CPU_ATMEGA  #define MODM_CPU_ATTINY  #define MODM_CPU_ATXMEGA  #define MODM_CPU_AVR  #define MODM_CPU_CORTEX_M0  #define MODM_CPU_CORTEX_M4  #define MODM_CPU_CORTEX_M4  #define MODM_CPU_STRING  #define MODM_FLAGS16(Enum)  #define MODM_FLAGS32(Enum)  #define MODM_FLAGS8(Enum)  #define MODM_ISR(vector, ...)  #define MODM_ISR_CALL(vector)  #define MODM_ISR_DECL(vector)  #define MODM_ISR_NAME(vector)  #define MODM_IS_BIG_ENDIAN  #define MODM_IS_LITTLE_ENDIAN  #define MODM_ORDER_BIG_ENDIAN  #define MODM_ORDER_LITTLE_ENDIAN  #define MODM_ORDER_PDP_ENDIAN  #define MODM_OS_HOSTED  #define MODM_OS_HOSTED_64  #define MODM_OS_LINUX  #define MODM_OS_OSX  #define MODM_OS_STRING  #define MODM_OS_UNIX  #define MODM_OS_WIN32  #define MODM_OS_WIN64  #define MODM_SIZEOF_POINTER  #define MODM_STRINGIFY(s)  #define MODM_TYPE_FLAGS(Parent)  #define PSTR(s)  #define modm_aligned(n)  #define modm_always_inline  #define modm_fastcode  #define modm_fastdata  #define modm_likely(x)  #define modm_packed  #define modm_section(s)  #define modm_unlikely(x)  #define modm_unused  #define modm_weak",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture/#dependencies",
            "text": "modm:architecture     modm_architecture   modm:  architecture     modm_math    modm:  math       modm_architecture->modm_math       modm_architecture_1-wire    modm:  architecture:  1-wire       modm_architecture_1-wire->modm_architecture       modm_architecture_accessor    modm:  architecture:  accessor       modm_architecture_accessor->modm_architecture       modm_architecture_adc    modm:  architecture:  adc       modm_architecture_adc->modm_architecture       modm_architecture_assert    modm:  architecture:  assert       modm_architecture_assert->modm_architecture       modm_architecture_atomic    modm:  architecture:  atomic       modm_architecture_atomic->modm_architecture       modm_architecture_block_device    modm:  architecture:  block.device       modm_architecture_block_device->modm_architecture       modm_architecture_can    modm:  architecture:  can       modm_architecture_can->modm_architecture       modm_architecture_clock    modm:  architecture:  clock       modm_architecture_clock->modm_architecture       modm_architecture_delay    modm:  architecture:  delay       modm_architecture_delay->modm_architecture       modm_architecture_gpio    modm:  architecture:  gpio       modm_architecture_gpio->modm_architecture       modm_architecture_gpio_expander    modm:  architecture:  gpio.expander       modm_architecture_gpio_expander->modm_architecture       modm_architecture_heap    modm:  architecture:  heap       modm_architecture_heap->modm_architecture       modm_architecture_i2c    modm:  architecture:  i2c       modm_architecture_i2c->modm_architecture       modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_architecture_i2c_device->modm_architecture       modm_architecture_interrupt    modm:  architecture:  interrupt       modm_architecture_interrupt->modm_architecture       modm_architecture_memory    modm:  architecture:  memory       modm_architecture_memory->modm_architecture       modm_architecture_register    modm:  architecture:  register       modm_architecture_register->modm_architecture       modm_architecture_spi    modm:  architecture:  spi       modm_architecture_spi->modm_architecture       modm_architecture_spi_device    modm:  architecture:  spi.device       modm_architecture_spi_device->modm_architecture       modm_architecture_uart    modm:  architecture:  uart       modm_architecture_uart->modm_architecture       modm_architecture_unaligned    modm:  architecture:  unaligned       modm_architecture_unaligned->modm_architecture       modm_container    modm:  container       modm_container->modm_architecture       modm_debug    modm:  debug       modm_debug->modm_architecture       modm_math_filter    modm:  math:  filter       modm_math_filter->modm_architecture       modm_math_geometry    modm:  math:  geometry       modm_math_geometry->modm_architecture       modm_math_utils    modm:  math:  utils       modm_math_utils->modm_architecture       modm_processing_protothread    modm:  processing:  protothread       modm_processing_protothread->modm_architecture       modm_test_processing    modm:  test:  processing       modm_test_processing->modm_architecture       modm_utils    modm:  utils       modm_utils->modm_architecture",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-1-wire/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:1-wire\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Enum\n\n\nenum\n \nRomCommand\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:1-wire\n\n\n\n\n\n\n\n\nmodm_architecture_1-wire\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\n1-wire\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_1-wire->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds18b20\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nds18b20\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds18b20->modm_architecture_1-wire\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_1-wire_bitbang\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\n1-wire.bitbang\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_1-wire_bitbang->modm_architecture_1-wire",
            "title": "modm:architecture:1-wire"
        },
        {
            "location": "/reference/module/modm-architecture-1-wire/#modmarchitecture1-wire",
            "text": "",
            "title": "modm:architecture:1-wire"
        },
        {
            "location": "/reference/module/modm-architecture-1-wire/#content",
            "text": "// Enum  enum   RomCommand ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-1-wire/#dependencies",
            "text": "modm:architecture:1-wire     modm_architecture_1-wire   modm:  architecture:  1-wire     modm_architecture    modm:  architecture       modm_architecture_1-wire->modm_architecture       modm_driver_ds18b20    modm:  driver:  ds18b20       modm_driver_ds18b20->modm_architecture_1-wire       modm_platform_1-wire_bitbang    modm:  platform:  1-wire.bitbang       modm_platform_1-wire_bitbang->modm_architecture_1-wire",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-accessor/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:accessor\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\naccessor\n::\nFlash\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\naccessor\n::\nRam\n<\n \ntypename\n \nT\n \n>\n;\n\n\n\n// Function\n\n\ninline\n \n::\nmodm\n::\naccessor\n::\nFlash\n<\nT\n>\n \nmodm\n::\naccessor\n::\nasFlash\n(\nconst\n \nT\n \n*\nptr\n);\n\n\nmodm\n::\nIOStream\n&\n \noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\nos\n,\n \nmodm\n::\naccessor\n::\nFlash\n<\n \nT\n \n>\n \nptr\n);\n\n\nstatic\n \nmodm\n::\nIOStream\n&\n \noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\nos\n,\n \nmodm\n::\naccessor\n::\nFlash\n<\n \nchar\n \n>\n \nptr\n);\n\n\nvolatile\n \nT\n&\n \nmodm\n::\naccessor\n::\nasVolatile\n(\nT\n \n&\nvalue\n);\n\n\n\n// Define\n\n\n#define EXTERN_FLASH_STORAGE(var)\n\n\n#define EXTERN_FLASH_STORAGE_STRING(s)\n\n\n#define FLASH_STORAGE(var)\n\n\n#define FLASH_STORAGE_STRING(s)\n\n\n#define PSTR(s)\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:accessor\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_accessor->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_accessor->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_assert\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nassert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_assert->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\natomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nsab\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nsab2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7928\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ea_dog\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nea_dog\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ea_dog->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp2515\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl53l0\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl6180\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_interpolation\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\ninterpolation\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_interpolation->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_scheduler\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nscheduler\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_scheduler->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nled\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_time\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ntime\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_time->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_unittest\n\n\n\n\n\n\nmodm:\n\n\nunittest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_unittest->modm_architecture_accessor",
            "title": "modm:architecture:accessor"
        },
        {
            "location": "/reference/module/modm-architecture-accessor/#modmarchitectureaccessor",
            "text": "",
            "title": "modm:architecture:accessor"
        },
        {
            "location": "/reference/module/modm-architecture-accessor/#content",
            "text": "// Class  class   modm :: accessor :: Flash <   typename   T   > ;  class   modm :: accessor :: Ram <   typename   T   > ;  // Function  inline   :: modm :: accessor :: Flash < T >   modm :: accessor :: asFlash ( const   T   * ptr );  modm :: IOStream &   operator << ( modm :: IOStream   & os ,   modm :: accessor :: Flash <   T   >   ptr );  static   modm :: IOStream &   operator << ( modm :: IOStream   & os ,   modm :: accessor :: Flash <   char   >   ptr );  volatile   T &   modm :: accessor :: asVolatile ( T   & value );  // Define  #define EXTERN_FLASH_STORAGE(var)  #define EXTERN_FLASH_STORAGE_STRING(s)  #define FLASH_STORAGE(var)  #define FLASH_STORAGE_STRING(s)  #define PSTR(s)",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-accessor/#dependencies",
            "text": "modm:architecture:accessor     modm_architecture_accessor   modm:  architecture:  accessor     modm_architecture    modm:  architecture       modm_architecture_accessor->modm_architecture       modm_io    modm:  io       modm_architecture_accessor->modm_io       modm_io->modm_architecture_accessor       modm_architecture_assert    modm:  architecture:  assert       modm_architecture_assert->modm_architecture_accessor       modm_architecture_atomic    modm:  architecture:  atomic       modm_architecture_atomic->modm_architecture_accessor       modm_communication_sab    modm:  communication:  sab       modm_communication_sab->modm_architecture_accessor       modm_communication_sab2    modm:  communication:  sab2       modm_communication_sab2->modm_architecture_accessor       modm_driver_ad7928    modm:  driver:  ad7928       modm_driver_ad7928->modm_architecture_accessor       modm_driver_ea_dog    modm:  driver:  ea_dog       modm_driver_ea_dog->modm_architecture_accessor       modm_driver_mcp2515    modm:  driver:  mcp2515       modm_driver_mcp2515->modm_architecture_accessor       modm_driver_vl53l0    modm:  driver:  vl53l0       modm_driver_vl53l0->modm_architecture_accessor       modm_driver_vl6180    modm:  driver:  vl6180       modm_driver_vl6180->modm_architecture_accessor       modm_math_interpolation    modm:  math:  interpolation       modm_math_interpolation->modm_architecture_accessor       modm_platform_core    modm:  platform:  core       modm_platform_core->modm_architecture_accessor       modm_platform_i2c    modm:  platform:  i2c       modm_platform_i2c->modm_architecture_accessor       modm_processing_scheduler    modm:  processing:  scheduler       modm_processing_scheduler->modm_architecture_accessor       modm_test_architecture    modm:  test:  architecture       modm_test_architecture->modm_architecture_accessor       modm_ui_display    modm:  ui:  display       modm_ui_display->modm_architecture_accessor       modm_ui_led    modm:  ui:  led       modm_ui_led->modm_architecture_accessor       modm_ui_time    modm:  ui:  time       modm_ui_time->modm_architecture_accessor       modm_unittest    modm:  unittest       modm_unittest->modm_architecture_accessor",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-adc/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:adc\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nAdc\n;\n\n\nclass\n \nmodm\n::\nAdcInterrupt\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:adc\n\n\n\n\n\n\n\n\nmodm_architecture_adc\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nadc\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_adc->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adc_sampler\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nadc_sampler\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adc_sampler->modm_architecture_adc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc->modm_architecture_adc",
            "title": "modm:architecture:adc"
        },
        {
            "location": "/reference/module/modm-architecture-adc/#modmarchitectureadc",
            "text": "",
            "title": "modm:architecture:adc"
        },
        {
            "location": "/reference/module/modm-architecture-adc/#content",
            "text": "// Class  class   modm :: Adc ;  class   modm :: AdcInterrupt ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-adc/#dependencies",
            "text": "modm:architecture:adc     modm_architecture_adc   modm:  architecture:  adc     modm_architecture    modm:  architecture       modm_architecture_adc->modm_architecture       modm_driver_adc_sampler    modm:  driver:  adc_sampler       modm_driver_adc_sampler->modm_architecture_adc       modm_platform_adc    modm:  platform:  adc       modm_platform_adc->modm_architecture_adc",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-assert/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:assert\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Function\n\n\nmodm_extern_c\n \nbool\n \nmodm_assert\n(\nbool\n \ncondition\n,\n \nconst\n \nchar\n \n*\nmodule\n,\n \nconst\n \nchar\n \n*\nlocation\n,\n \nconst\n \nchar\n \n*\nfailure\n);\n\n\nmodm_extern_c\n \nbool\n \nmodm_assert\n(\nbool\n \ncondition\n,\n \nconst\n \nchar\n \n*\nmodule\n,\n \nconst\n \nchar\n \n*\nlocation\n,\n \nconst\n \nchar\n \n*\nfailure\n,\n \nuintptr_t\n \ncontext\n);\n\n\nmodm_extern_c\n \nbool\n \nmodm_assert_debug\n(\nbool\n \ncondition\n,\n \nconst\n \nchar\n \n*\nmodule\n,\n \nconst\n \nchar\n \n*\nlocation\n,\n \nconst\n \nchar\n \n*\nfailure\n);\n\n\nmodm_extern_c\n \nbool\n \nmodm_assert_debug\n(\nbool\n \ncondition\n,\n \nconst\n \nchar\n \n*\nmodule\n,\n \nconst\n \nchar\n \n*\nlocation\n,\n \nconst\n \nchar\n \n*\nfailure\n,\n \nuintptr_t\n \ncontext\n);\n\n\nmodm_extern_c\n \nvoid\n \nmodm_abandon\n(\nconst\n \nchar\n \n*\nmodule\n,\n \nconst\n \nchar\n \n*\nlocation\n,\n \nconst\n \nchar\n \n*\nfailure\n,\n \nuintptr_t\n \ncontext\n)\n \nmodm_weak\n;\n\n\n\n// Enum\n\n\nenum\n \nclass\n \nAbandonment\n;\n\n\n\n// Typedef\n\n\nusing\n \nmodm\n::\nAssertionHandler\n \n=\n \ntypedef\n \nAbandonment\n \n(\n*\n)(\nconst\n \nchar\n \n*\n \nmodule\n,\n \nconst\n \nchar\n \n*\n \nlocation\n,\n \nconst\n \nchar\n \n*\n \nfailure\n,\n \nuintptr_t\n \ncontext\n);\n\n\n\n// Define\n\n\n#define MODM_ASSERTION_HANDLER(handler)\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:assert\n\n\n\n\n\n\n\n\nmodm_architecture_assert\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nassert\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_assert->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_assert->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_assert->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp2515\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_architecture_assert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_architecture_assert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_assert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable->modm_architecture_assert",
            "title": "modm:architecture:assert"
        },
        {
            "location": "/reference/module/modm-architecture-assert/#modmarchitectureassert",
            "text": "",
            "title": "modm:architecture:assert"
        },
        {
            "location": "/reference/module/modm-architecture-assert/#content",
            "text": "// Function  modm_extern_c   bool   modm_assert ( bool   condition ,   const   char   * module ,   const   char   * location ,   const   char   * failure );  modm_extern_c   bool   modm_assert ( bool   condition ,   const   char   * module ,   const   char   * location ,   const   char   * failure ,   uintptr_t   context );  modm_extern_c   bool   modm_assert_debug ( bool   condition ,   const   char   * module ,   const   char   * location ,   const   char   * failure );  modm_extern_c   bool   modm_assert_debug ( bool   condition ,   const   char   * module ,   const   char   * location ,   const   char   * failure ,   uintptr_t   context );  modm_extern_c   void   modm_abandon ( const   char   * module ,   const   char   * location ,   const   char   * failure ,   uintptr_t   context )   modm_weak ;  // Enum  enum   class   Abandonment ;  // Typedef  using   modm :: AssertionHandler   =   typedef   Abandonment   ( * )( const   char   *   module ,   const   char   *   location ,   const   char   *   failure ,   uintptr_t   context );  // Define  #define MODM_ASSERTION_HANDLER(handler)",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-assert/#dependencies",
            "text": "modm:architecture:assert     modm_architecture_assert   modm:  architecture:  assert     modm_architecture    modm:  architecture       modm_architecture_assert->modm_architecture       modm_architecture_accessor    modm:  architecture:  accessor       modm_architecture_assert->modm_architecture_accessor       modm_utils    modm:  utils       modm_architecture_assert->modm_utils       modm_driver_mcp2515    modm:  driver:  mcp2515       modm_driver_mcp2515->modm_architecture_assert       modm_platform_can    modm:  platform:  can       modm_platform_can->modm_architecture_assert       modm_platform_core    modm:  platform:  core       modm_platform_core->modm_architecture_assert       modm_processing_resumable    modm:  processing:  resumable       modm_processing_resumable->modm_architecture_assert",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-atomic/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:atomic\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\natomic\n::\nContainer\n<\n \ntypename\n \nT\n  \n>\n;\n\n\nclass\n \nmodm\n::\natomic\n::\nFlag\n;\n\n\nclass\n \nmodm\n::\natomic\n::\nLock\n;\n\n\nclass\n \nmodm\n::\natomic\n::\nQueue\n<\n \ntypename\n \nT\n,\n \nstd\n::\nsize_t\n \nN\n \n>\n;\n\n\nclass\n \nmodm\n::\natomic\n::\nUnlock\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:atomic\n\n\n\n\n\n\n\n\nmodm_architecture_atomic\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\natomic\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_architecture_atomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_atomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_architecture_atomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_architecture_atomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_scheduler\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nscheduler\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_scheduler->modm_architecture_atomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_architecture_atomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_button\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nbutton\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_button->modm_architecture_atomic",
            "title": "modm:architecture:atomic"
        },
        {
            "location": "/reference/module/modm-architecture-atomic/#modmarchitectureatomic",
            "text": "",
            "title": "modm:architecture:atomic"
        },
        {
            "location": "/reference/module/modm-architecture-atomic/#content",
            "text": "// Class  class   modm :: atomic :: Container <   typename   T    > ;  class   modm :: atomic :: Flag ;  class   modm :: atomic :: Lock ;  class   modm :: atomic :: Queue <   typename   T ,   std :: size_t   N   > ;  class   modm :: atomic :: Unlock ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-atomic/#dependencies",
            "text": "modm:architecture:atomic     modm_architecture_atomic   modm:  architecture:  atomic     modm_architecture    modm:  architecture       modm_architecture_atomic->modm_architecture       modm_architecture_accessor    modm:  architecture:  accessor       modm_architecture_atomic->modm_architecture_accessor       modm_utils    modm:  utils       modm_architecture_atomic->modm_utils       modm_platform_can    modm:  platform:  can       modm_platform_can->modm_architecture_atomic       modm_platform_core    modm:  platform:  core       modm_platform_core->modm_architecture_atomic       modm_platform_i2c    modm:  platform:  i2c       modm_platform_i2c->modm_architecture_atomic       modm_platform_uart    modm:  platform:  uart       modm_platform_uart->modm_architecture_atomic       modm_processing_scheduler    modm:  processing:  scheduler       modm_processing_scheduler->modm_architecture_atomic       modm_test_architecture    modm:  test:  architecture       modm_test_architecture->modm_architecture_atomic       modm_ui_button    modm:  ui:  button       modm_ui_button->modm_architecture_atomic",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-block-device/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:block.device\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nBlockDevice\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:block.device\n\n\n\n\n\n\n\n\nmodm_architecture_block_device\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nblock.device\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_block_device->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_block_device->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_heap\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device:\n\n\nheap\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_heap->modm_architecture_block_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_mirror\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device:\n\n\nmirror\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_mirror->modm_architecture_block_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_spi_flash\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device:\n\n\nspi.flash\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_spi_flash->modm_architecture_block_device",
            "title": "modm:architecture:block.device"
        },
        {
            "location": "/reference/module/modm-architecture-block-device/#modmarchitectureblockdevice",
            "text": "",
            "title": "modm:architecture:block.device"
        },
        {
            "location": "/reference/module/modm-architecture-block-device/#content",
            "text": "// Class  class   modm :: BlockDevice ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-block-device/#dependencies",
            "text": "modm:architecture:block.device     modm_architecture_block_device   modm:  architecture:  block.device     modm_architecture    modm:  architecture       modm_architecture_block_device->modm_architecture       modm_processing_resumable    modm:  processing:  resumable       modm_architecture_block_device->modm_processing_resumable       modm_driver_block_device_heap    modm:  driver:  block.device:  heap       modm_driver_block_device_heap->modm_architecture_block_device       modm_driver_block_device_mirror    modm:  driver:  block.device:  mirror       modm_driver_block_device_mirror->modm_architecture_block_device       modm_driver_block_device_spi_flash    modm:  driver:  block.device:  spi.flash       modm_driver_block_device_spi_flash->modm_architecture_block_device",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-can/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:can\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nCan\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\ncan\n::\nMessage\n::\nFlags\n;\n\n\nstruct\n \nmodm\n::\ncan\n::\nMessage\n;\n\n\n\n// Function\n\n\nmodm\n::\nIOStream\n&\n \nmodm\n::\ncan\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\ns\n,\n \nconst\n \nmodm\n::\ncan\n::\nMessage\n \nm\n);\n\n\nmodm\n::\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\nstream\n,\n \nconst\n \nCan\n::\nBusState\n \nstate\n);\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:can\n\n\n\n\n\n\n\n\nmodm_architecture_can\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ncan\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_can->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_can->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_architecture_can\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lawicel\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlawicel\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lawicel->modm_architecture_can\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp2515\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_architecture_can\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_architecture_can\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_architecture_can\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform->modm_architecture_can",
            "title": "modm:architecture:can"
        },
        {
            "location": "/reference/module/modm-architecture-can/#modmarchitecturecan",
            "text": "",
            "title": "modm:architecture:can"
        },
        {
            "location": "/reference/module/modm-architecture-can/#content",
            "text": "// Class  class   modm :: Can ;  // Struct  struct   modm :: can :: Message :: Flags ;  struct   modm :: can :: Message ;  // Function  modm :: IOStream &   modm :: can :: operator << ( modm :: IOStream   & s ,   const   modm :: can :: Message   m );  modm :: IOStream &   modm :: operator << ( modm :: IOStream   & stream ,   const   Can :: BusState   state );",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-can/#dependencies",
            "text": "modm:architecture:can     modm_architecture_can   modm:  architecture:  can     modm_architecture    modm:  architecture       modm_architecture_can->modm_architecture       modm_io    modm:  io       modm_architecture_can->modm_io       modm_communication_xpcc    modm:  communication:  xpcc       modm_communication_xpcc->modm_architecture_can       modm_driver_lawicel    modm:  driver:  lawicel       modm_driver_lawicel->modm_architecture_can       modm_driver_mcp2515    modm:  driver:  mcp2515       modm_driver_mcp2515->modm_architecture_can       modm_platform_can    modm:  platform:  can       modm_platform_can->modm_architecture_can       modm_test_architecture    modm:  test:  architecture       modm_test_architecture->modm_architecture_can       modm_test_platform    modm:  test:  platform       modm_test_platform->modm_architecture_can",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-clock/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:clock\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nClock\n;\n\n\n\n// Function\n\n\nstatic\n \nconstexpr\n \nint\n \nmodm\n::\nclock\n::\nMHz\n(\nint\n \nf\n);\n\n\nstatic\n \nconstexpr\n \nint\n \nmodm\n::\nclock\n::\nkHz\n(\nint\n \nf\n);\n\n\nstatic\n \nmodm_unused\n \nconstexpr\n \nint\n \nmodm\n::\nclock\n::\nHz\n(\nint\n \nf\n);\n\n\nstatic\n \nmodm_unused\n \nconstexpr\n \nuint32_t\n \nmodm\n::\nclock\n::\nu32MHz\n(\nint\n \nf\n);\n\n\nstatic\n \nmodm_unused\n \nconstexpr\n \nuint32_t\n \nmodm\n::\nclock\n::\nu32kHz\n(\nint\n \nf\n);\n\n\n\n// Enum\n\n\nenum\n \nFrequency\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:clock\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_clock->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_clock->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni\n\n\n\n\n\n\nmodm:\n\n\nboard:\n\n\ndisco-f469ni\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_ros\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nros\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_ros->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp2515\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_common\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan.common\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_common->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock.cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nfault.cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_animation\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nanimation\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_animation->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nled\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led->modm_architecture_clock",
            "title": "modm:architecture:clock"
        },
        {
            "location": "/reference/module/modm-architecture-clock/#modmarchitectureclock",
            "text": "",
            "title": "modm:architecture:clock"
        },
        {
            "location": "/reference/module/modm-architecture-clock/#content",
            "text": "// Class  class   modm :: Clock ;  // Function  static   constexpr   int   modm :: clock :: MHz ( int   f );  static   constexpr   int   modm :: clock :: kHz ( int   f );  static   modm_unused   constexpr   int   modm :: clock :: Hz ( int   f );  static   modm_unused   constexpr   uint32_t   modm :: clock :: u32MHz ( int   f );  static   modm_unused   constexpr   uint32_t   modm :: clock :: u32kHz ( int   f );  // Enum  enum   Frequency ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-clock/#dependencies",
            "text": "modm:architecture:clock     modm_architecture_clock   modm:  architecture:  clock     modm_architecture    modm:  architecture       modm_architecture_clock->modm_architecture       modm_processing_timer    modm:  processing:  timer       modm_architecture_clock->modm_processing_timer       modm_processing_timer->modm_architecture_clock       modm_board_disco-f469ni    modm:  board:  disco-f469ni       modm_board_disco-f469ni->modm_architecture_clock       modm_communication_ros    modm:  communication:  ros       modm_communication_ros->modm_architecture_clock       modm_driver_mcp2515    modm:  driver:  mcp2515       modm_driver_mcp2515->modm_architecture_clock       modm_platform_can    modm:  platform:  can       modm_platform_can->modm_architecture_clock       modm_platform_can_common    modm:  platform:  can.common       modm_platform_can_common->modm_architecture_clock       modm_platform_clock_cortex    modm:  platform:  clock.cortex       modm_platform_clock_cortex->modm_architecture_clock       modm_platform_core    modm:  platform:  core       modm_platform_core->modm_architecture_clock       modm_platform_fault_cortex    modm:  platform:  fault.cortex       modm_platform_fault_cortex->modm_architecture_clock       modm_test_architecture    modm:  test:  architecture       modm_test_architecture->modm_architecture_clock       modm_test_driver    modm:  test:  driver       modm_test_driver->modm_architecture_clock       modm_test_platform    modm:  test:  platform       modm_test_platform->modm_architecture_clock       modm_ui_animation    modm:  ui:  animation       modm_ui_animation->modm_architecture_clock       modm_ui_led    modm:  ui:  led       modm_ui_led->modm_architecture_clock",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-delay/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:delay\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Function\n\n\nvoid\n \nmodm\n::\ndelayMicroseconds\n(\nuint16_t\n \nus\n);\n\n\nvoid\n \nmodm\n::\ndelayMilliseconds\n(\nuint16_t\n \nms\n);\n\n\nvoid\n \nmodm\n::\ndelayNanoseconds\n(\nuint16_t\n \nns\n);\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:delay\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_delay->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7280a\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7928\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adns9800\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nadns9800\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adns9800->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ads7843\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nads7843\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ads7843->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1302\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nds1302\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1302->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ea_dog\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nea_dog\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ea_dog->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hd44780\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhd44780\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hd44780->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max6966\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmax6966\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max6966->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp2515\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_memory_bus\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmemory_bus\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_memory_bus->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nnrf24\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_parallel_tft_display\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nparallel_tft_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_parallel_tft_display->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s65\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nsiemens_s65\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s65->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s75\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nsiemens_s75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s75->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_1-wire_bitbang\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\n1-wire.bitbang\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_1-wire_bitbang->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock.cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c.bitbang\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_bitbang\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi.bitbang\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_bitbang->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_gpio->modm_architecture_delay",
            "title": "modm:architecture:delay"
        },
        {
            "location": "/reference/module/modm-architecture-delay/#modmarchitecturedelay",
            "text": "",
            "title": "modm:architecture:delay"
        },
        {
            "location": "/reference/module/modm-architecture-delay/#content",
            "text": "// Function  void   modm :: delayMicroseconds ( uint16_t   us );  void   modm :: delayMilliseconds ( uint16_t   ms );  void   modm :: delayNanoseconds ( uint16_t   ns );",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-delay/#dependencies",
            "text": "modm:architecture:delay     modm_architecture_delay   modm:  architecture:  delay     modm_architecture    modm:  architecture       modm_architecture_delay->modm_architecture       modm_architecture_i2c    modm:  architecture:  i2c       modm_architecture_i2c->modm_architecture_delay       modm_driver_ad7280a    modm:  driver:  ad7280a       modm_driver_ad7280a->modm_architecture_delay       modm_driver_ad7928    modm:  driver:  ad7928       modm_driver_ad7928->modm_architecture_delay       modm_driver_adns9800    modm:  driver:  adns9800       modm_driver_adns9800->modm_architecture_delay       modm_driver_ads7843    modm:  driver:  ads7843       modm_driver_ads7843->modm_architecture_delay       modm_driver_ds1302    modm:  driver:  ds1302       modm_driver_ds1302->modm_architecture_delay       modm_driver_ea_dog    modm:  driver:  ea_dog       modm_driver_ea_dog->modm_architecture_delay       modm_driver_hd44780    modm:  driver:  hd44780       modm_driver_hd44780->modm_architecture_delay       modm_driver_max6966    modm:  driver:  max6966       modm_driver_max6966->modm_architecture_delay       modm_driver_mcp2515    modm:  driver:  mcp2515       modm_driver_mcp2515->modm_architecture_delay       modm_driver_memory_bus    modm:  driver:  memory_bus       modm_driver_memory_bus->modm_architecture_delay       modm_driver_nrf24    modm:  driver:  nrf24       modm_driver_nrf24->modm_architecture_delay       modm_driver_parallel_tft_display    modm:  driver:  parallel_tft_display       modm_driver_parallel_tft_display->modm_architecture_delay       modm_driver_siemens_s65    modm:  driver:  siemens_s65       modm_driver_siemens_s65->modm_architecture_delay       modm_driver_siemens_s75    modm:  driver:  siemens_s75       modm_driver_siemens_s75->modm_architecture_delay       modm_platform_1-wire_bitbang    modm:  platform:  1-wire.bitbang       modm_platform_1-wire_bitbang->modm_architecture_delay       modm_platform_can    modm:  platform:  can       modm_platform_can->modm_architecture_delay       modm_platform_clock_cortex    modm:  platform:  clock.cortex       modm_platform_clock_cortex->modm_architecture_delay       modm_platform_core    modm:  platform:  core       modm_platform_core->modm_architecture_delay       modm_platform_i2c_bitbang    modm:  platform:  i2c.bitbang       modm_platform_i2c_bitbang->modm_architecture_delay       modm_platform_spi_bitbang    modm:  platform:  spi.bitbang       modm_platform_spi_bitbang->modm_architecture_delay       modm_test_platform_gpio    modm:  test:  platform:  gpio       modm_test_platform_gpio->modm_architecture_delay",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-gpio/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:gpio: General Purpose Input/Output\n\u00b6\n\n\nGPIOs are modeled as individual classes with an interface consisting out of a\ncommon set of static methods.\n\n\nUsing GPIOs\n\u00b6\n\n\nThese classes are used to create architecture independent\ndefinitions for hardware pins which then can be used as template\nparameters for miscellaneous device drivers.\n\n\nExample of a platform-independent blinking light:\n\n\n\n\n\n#include\n \n<modm/platform.hpp>\n\n\n\nusing\n \nLed\n \n=\n \nGpioOutputB0\n;\n\n\n\nLed\n::\nsetOutput\n();\n\n\nLed\n::\nset\n();\n\n\n\nwhile\n \n(\n1\n)\n\n\n{\n\n    \nLed\n::\ntoggle\n();\n\n    \nmodm\n::\ndelayMilliseconds\n(\n500\n);\n\n\n}\n\n\n\n\n\nYou can use the common definitions of \nmodm::Gpio\n to express your intention\nfor setting a pin. However, you can also use anything that casts to \nbool\n.\n\n\n\n\n\nLed\n::\nset\n(\nmodm\n::\nGpio\n::\nHigh\n);\n \n// Turns Led on\n\n\nLed\n::\nset\n(\nmodm\n::\nGpio\n::\nLow\n);\n \n// Turns Led off\n\n\nLed\n::\nset\n(\ntrue\n);\n\n\nLed\n::\nset\n(\nfalse\n);\n\n\nLed\n::\nset\n(\n1\n);\n\n\nLed\n::\nset\n(\n0\n);\n\n\nLed\n::\nset\n();\n\n\nLed\n::\nreset\n();\n\n\n\n\n\n\n\nInitialize your GPIOs\n\n\nCall \nGpio::setInput()\n or \nGpio::setOutput()\n before the first use, \notherwise the GPIO state may be undefined!\n\n\n\n\nPassing GPIOs to drivers\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nGpioExpander\n;\n\n\nclass\n \nmodm\n::\nGpioExpanderPin\n<\n \ntypename\n \nGpioExpander\n,\n \nGpioExpander\n \n&\n \nexpander\n,\n \ntypename\n \nGpioExpander\n::\nPin\n \npin\n \n>\n;\n\n\nclass\n \nmodm\n::\nGpioExpanderPort\n<\n \ntypename\n \nGpioExpander\n,\n \nGpioExpander\n \n&\n \nexpander\n,\n \ntypename\n \nGpioExpander\n::\nPin\n \nStartPin\n,\n \nuint8_t\n \nWidth\n,\n \nGpioPort\n::\nDataOrder\n \nDataOrder\n=\nGpioPort\n::\nDataOrder\n::\nNormal\n \n>\n;\n\n\nclass\n \nmodm\n::\nGpioIO\n;\n\n\nclass\n \nmodm\n::\nGpioInput\n;\n\n\nclass\n \nmodm\n::\nGpioOutput\n;\n\n\nclass\n \nmodm\n::\nGpioPort\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nGpio\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:gpio\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio.expander\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7280a\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7928\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ndrv832x_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1302\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nds1302\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1302->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ft245\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nft245\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ft245->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hd44780\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhd44780\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hd44780->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nltc2984\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max6966\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmax6966\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max6966->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_memory_bus\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmemory_bus\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_memory_bus->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio_common\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio.common\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio_common->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c.bitbang\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang->modm_architecture_gpio",
            "title": "modm:architecture:gpio"
        },
        {
            "location": "/reference/module/modm-architecture-gpio/#modmarchitecturegpio-general-purpose-inputoutput",
            "text": "GPIOs are modeled as individual classes with an interface consisting out of a\ncommon set of static methods.",
            "title": "modm:architecture:gpio: General Purpose Input/Output"
        },
        {
            "location": "/reference/module/modm-architecture-gpio/#using-gpios",
            "text": "These classes are used to create architecture independent\ndefinitions for hardware pins which then can be used as template\nparameters for miscellaneous device drivers.  Example of a platform-independent blinking light:   #include   <modm/platform.hpp>  using   Led   =   GpioOutputB0 ;  Led :: setOutput ();  Led :: set ();  while   ( 1 )  { \n     Led :: toggle (); \n     modm :: delayMilliseconds ( 500 );  }   You can use the common definitions of  modm::Gpio  to express your intention\nfor setting a pin. However, you can also use anything that casts to  bool .   Led :: set ( modm :: Gpio :: High );   // Turns Led on  Led :: set ( modm :: Gpio :: Low );   // Turns Led off  Led :: set ( true );  Led :: set ( false );  Led :: set ( 1 );  Led :: set ( 0 );  Led :: set ();  Led :: reset ();    Initialize your GPIOs  Call  Gpio::setInput()  or  Gpio::setOutput()  before the first use, \notherwise the GPIO state may be undefined!",
            "title": "Using GPIOs"
        },
        {
            "location": "/reference/module/modm-architecture-gpio/#passing-gpios-to-drivers",
            "text": "",
            "title": "Passing GPIOs to drivers"
        },
        {
            "location": "/reference/module/modm-architecture-gpio/#content",
            "text": "// Class  class   modm :: GpioExpander ;  class   modm :: GpioExpanderPin <   typename   GpioExpander ,   GpioExpander   &   expander ,   typename   GpioExpander :: Pin   pin   > ;  class   modm :: GpioExpanderPort <   typename   GpioExpander ,   GpioExpander   &   expander ,   typename   GpioExpander :: Pin   StartPin ,   uint8_t   Width ,   GpioPort :: DataOrder   DataOrder = GpioPort :: DataOrder :: Normal   > ;  class   modm :: GpioIO ;  class   modm :: GpioInput ;  class   modm :: GpioOutput ;  class   modm :: GpioPort ;  // Struct  struct   modm :: Gpio ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-gpio/#dependencies",
            "text": "modm:architecture:gpio     modm_architecture_gpio   modm:  architecture:  gpio     modm_architecture    modm:  architecture       modm_architecture_gpio->modm_architecture       modm_architecture_gpio_expander    modm:  architecture:  gpio.expander       modm_architecture_gpio_expander->modm_architecture_gpio       modm_architecture_i2c    modm:  architecture:  i2c       modm_architecture_i2c->modm_architecture_gpio       modm_driver_ad7280a    modm:  driver:  ad7280a       modm_driver_ad7280a->modm_architecture_gpio       modm_driver_ad7928    modm:  driver:  ad7928       modm_driver_ad7928->modm_architecture_gpio       modm_driver_drv832x_spi    modm:  driver:  drv832x_spi       modm_driver_drv832x_spi->modm_architecture_gpio       modm_driver_ds1302    modm:  driver:  ds1302       modm_driver_ds1302->modm_architecture_gpio       modm_driver_ft245    modm:  driver:  ft245       modm_driver_ft245->modm_architecture_gpio       modm_driver_hd44780    modm:  driver:  hd44780       modm_driver_hd44780->modm_architecture_gpio       modm_driver_ltc2984    modm:  driver:  ltc2984       modm_driver_ltc2984->modm_architecture_gpio       modm_driver_max6966    modm:  driver:  max6966       modm_driver_max6966->modm_architecture_gpio       modm_driver_memory_bus    modm:  driver:  memory_bus       modm_driver_memory_bus->modm_architecture_gpio       modm_platform_gpio    modm:  platform:  gpio       modm_platform_gpio->modm_architecture_gpio       modm_platform_gpio_common    modm:  platform:  gpio.common       modm_platform_gpio_common->modm_architecture_gpio       modm_platform_i2c_bitbang    modm:  platform:  i2c.bitbang       modm_platform_i2c_bitbang->modm_architecture_gpio",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-gpio-expander/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:gpio.expander\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nGpioExpander\n;\n\n\nclass\n \nmodm\n::\nGpioExpanderPin\n<\n \ntypename\n \nGpioExpander\n,\n \nGpioExpander\n \n&\n \nexpander\n,\n \ntypename\n \nGpioExpander\n::\nPin\n \npin\n \n>\n;\n\n\nclass\n \nmodm\n::\nGpioExpanderPort\n<\n \ntypename\n \nGpioExpander\n,\n \nGpioExpander\n \n&\n \nexpander\n,\n \ntypename\n \nGpioExpander\n::\nPin\n \nStartPin\n,\n \nuint8_t\n \nWidth\n,\n \nGpioPort\n::\nDataOrder\n \nDataOrder\n=\nGpioPort\n::\nDataOrder\n::\nNormal\n \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:gpio.expander\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio.expander\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp23x17\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17->modm_architecture_gpio_expander\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca8574\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574->modm_architecture_gpio_expander\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca9535\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535->modm_architecture_gpio_expander",
            "title": "modm:architecture:gpio.expander"
        },
        {
            "location": "/reference/module/modm-architecture-gpio-expander/#modmarchitecturegpioexpander",
            "text": "",
            "title": "modm:architecture:gpio.expander"
        },
        {
            "location": "/reference/module/modm-architecture-gpio-expander/#content",
            "text": "// Class  class   modm :: GpioExpander ;  class   modm :: GpioExpanderPin <   typename   GpioExpander ,   GpioExpander   &   expander ,   typename   GpioExpander :: Pin   pin   > ;  class   modm :: GpioExpanderPort <   typename   GpioExpander ,   GpioExpander   &   expander ,   typename   GpioExpander :: Pin   StartPin ,   uint8_t   Width ,   GpioPort :: DataOrder   DataOrder = GpioPort :: DataOrder :: Normal   > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-gpio-expander/#dependencies",
            "text": "modm:architecture:gpio.expander     modm_architecture_gpio_expander   modm:  architecture:  gpio.expander     modm_architecture    modm:  architecture       modm_architecture_gpio_expander->modm_architecture       modm_architecture_gpio    modm:  architecture:  gpio       modm_architecture_gpio_expander->modm_architecture_gpio       modm_architecture_register    modm:  architecture:  register       modm_architecture_gpio_expander->modm_architecture_register       modm_math_utils    modm:  math:  utils       modm_architecture_gpio_expander->modm_math_utils       modm_processing_resumable    modm:  processing:  resumable       modm_architecture_gpio_expander->modm_processing_resumable       modm_driver_mcp23x17    modm:  driver:  mcp23x17       modm_driver_mcp23x17->modm_architecture_gpio_expander       modm_driver_pca8574    modm:  driver:  pca8574       modm_driver_pca8574->modm_architecture_gpio_expander       modm_driver_pca9535    modm:  driver:  pca9535       modm_driver_pca9535->modm_architecture_gpio_expander",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-heap/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:heap\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nBlockAllocator\n<\n \ntypename\n \nT\n \n,\n \nunsigned\n \nint\n \nBLOCK_SIZE\n \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:heap\n\n\n\n\n\n\n\n\nmodm_architecture_heap\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nheap\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_heap->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_heap->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_heap\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_architecture_heap",
            "title": "modm:architecture:heap"
        },
        {
            "location": "/reference/module/modm-architecture-heap/#modmarchitectureheap",
            "text": "",
            "title": "modm:architecture:heap"
        },
        {
            "location": "/reference/module/modm-architecture-heap/#content",
            "text": "// Class  class   modm :: BlockAllocator <   typename   T   ,   unsigned   int   BLOCK_SIZE   > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-heap/#dependencies",
            "text": "modm:architecture:heap     modm_architecture_heap   modm:  architecture:  heap     modm_architecture    modm:  architecture       modm_architecture_heap->modm_architecture       modm_utils    modm:  utils       modm_architecture_heap->modm_utils       modm_platform_core    modm:  platform:  core       modm_platform_core->modm_architecture_heap       modm_test_architecture    modm:  test:  architecture       modm_test_architecture->modm_architecture_heap",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-i2c/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:i2c\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nI2cDevice\n<\n \nclass\n \nI2cMaster\n,\n \nuint8_t\n \nNestingLevels\n=\n10\n,\n \nclass\n \nTransaction\n=\nI2cWriteReadTransaction\n \n>\n;\n\n\nclass\n \nmodm\n::\nI2cMaster\n;\n\n\nclass\n \nmodm\n::\nI2cReadTransaction\n;\n\n\nclass\n \nmodm\n::\nI2cTransaction\n;\n\n\nclass\n \nmodm\n::\nI2cWriteReadTransaction\n;\n\n\nclass\n \nmodm\n::\nI2cWriteTransaction\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nI2c\n;\n\n\nstruct\n \nmodm\n::\nI2cTransaction\n::\nReading\n;\n\n\nstruct\n \nmodm\n::\nI2cTransaction\n::\nStarting\n;\n\n\nstruct\n \nmodm\n::\nI2cTransaction\n::\nWriting\n;\n\n\n\n// Function\n\n\nmodm\n::\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\ns\n,\n \nconst\n \nmodm\n::\nI2c\n::\nOperation\n \nop\n);\n\n\nmodm\n::\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\ns\n,\n \nconst\n \nmodm\n::\nI2c\n::\nOperationAfterRead\n \nop\n);\n\n\nmodm\n::\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\ns\n,\n \nconst\n \nmodm\n::\nI2c\n::\nOperationAfterStart\n \nop\n);\n\n\nmodm\n::\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\ns\n,\n \nconst\n \nmodm\n::\nI2c\n::\nOperationAfterWrite\n \nop\n);\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:i2c\n\n\n\n\n\n\n\n\nmodm_architecture_i2c\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device->modm_architecture_i2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_architecture_i2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c.bitbang\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang->modm_architecture_i2c",
            "title": "modm:architecture:i2c"
        },
        {
            "location": "/reference/module/modm-architecture-i2c/#modmarchitecturei2c",
            "text": "",
            "title": "modm:architecture:i2c"
        },
        {
            "location": "/reference/module/modm-architecture-i2c/#content",
            "text": "// Class  class   modm :: I2cDevice <   class   I2cMaster ,   uint8_t   NestingLevels = 10 ,   class   Transaction = I2cWriteReadTransaction   > ;  class   modm :: I2cMaster ;  class   modm :: I2cReadTransaction ;  class   modm :: I2cTransaction ;  class   modm :: I2cWriteReadTransaction ;  class   modm :: I2cWriteTransaction ;  // Struct  struct   modm :: I2c ;  struct   modm :: I2cTransaction :: Reading ;  struct   modm :: I2cTransaction :: Starting ;  struct   modm :: I2cTransaction :: Writing ;  // Function  modm :: IOStream &   modm :: operator << ( modm :: IOStream   & s ,   const   modm :: I2c :: Operation   op );  modm :: IOStream &   modm :: operator << ( modm :: IOStream   & s ,   const   modm :: I2c :: OperationAfterRead   op );  modm :: IOStream &   modm :: operator << ( modm :: IOStream   & s ,   const   modm :: I2c :: OperationAfterStart   op );  modm :: IOStream &   modm :: operator << ( modm :: IOStream   & s ,   const   modm :: I2c :: OperationAfterWrite   op );",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-i2c/#dependencies",
            "text": "modm:architecture:i2c     modm_architecture_i2c   modm:  architecture:  i2c     modm_architecture    modm:  architecture       modm_architecture_i2c->modm_architecture       modm_architecture_delay    modm:  architecture:  delay       modm_architecture_i2c->modm_architecture_delay       modm_architecture_gpio    modm:  architecture:  gpio       modm_architecture_i2c->modm_architecture_gpio       modm_io    modm:  io       modm_architecture_i2c->modm_io       modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_architecture_i2c_device->modm_architecture_i2c       modm_platform_i2c    modm:  platform:  i2c       modm_platform_i2c->modm_architecture_i2c       modm_platform_i2c_bitbang    modm:  platform:  i2c.bitbang       modm_platform_i2c_bitbang->modm_architecture_i2c",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-i2c-device/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:i2c.device\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nI2cDevice\n<\n \nclass\n \nI2cMaster\n,\n \nuint8_t\n \nNestingLevels\n=\n10\n,\n \nclass\n \nTransaction\n=\nI2cWriteReadTransaction\n \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:i2c.device\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device->modm_architecture_i2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_amsys5915\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\namsys5915\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_amsys5915->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbme280\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbmp085\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nds1631\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ft6x06\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nft6x06\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ft6x06->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hclax\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhclax\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hclax->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc58x\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhmc58x\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc58x->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhmc6343\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_i2c_eeprom\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ni2c.eeprom\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_i2c_eeprom->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_itg3200\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nitg3200\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_itg3200->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3.transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lm75\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlm75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lm75->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp23x17\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca8574\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca9535\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9685\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca9685\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9685->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ssd1306\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nssd1306\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ssd1306->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3414\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntcs3414\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3414->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3472\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntcs3472\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3472->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntmp102\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntmp175\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl53l0\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl6180\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_architecture_i2c_device",
            "title": "modm:architecture:i2c.device"
        },
        {
            "location": "/reference/module/modm-architecture-i2c-device/#modmarchitecturei2cdevice",
            "text": "",
            "title": "modm:architecture:i2c.device"
        },
        {
            "location": "/reference/module/modm-architecture-i2c-device/#content",
            "text": "// Class  class   modm :: I2cDevice <   class   I2cMaster ,   uint8_t   NestingLevels = 10 ,   class   Transaction = I2cWriteReadTransaction   > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-i2c-device/#dependencies",
            "text": "modm:architecture:i2c.device     modm_architecture_i2c_device   modm:  architecture:  i2c.device     modm_architecture    modm:  architecture       modm_architecture_i2c_device->modm_architecture       modm_architecture_i2c    modm:  architecture:  i2c       modm_architecture_i2c_device->modm_architecture_i2c       modm_processing_resumable    modm:  processing:  resumable       modm_architecture_i2c_device->modm_processing_resumable       modm_driver_amsys5915    modm:  driver:  amsys5915       modm_driver_amsys5915->modm_architecture_i2c_device       modm_driver_bme280    modm:  driver:  bme280       modm_driver_bme280->modm_architecture_i2c_device       modm_driver_bmp085    modm:  driver:  bmp085       modm_driver_bmp085->modm_architecture_i2c_device       modm_driver_ds1631    modm:  driver:  ds1631       modm_driver_ds1631->modm_architecture_i2c_device       modm_driver_ft6x06    modm:  driver:  ft6x06       modm_driver_ft6x06->modm_architecture_i2c_device       modm_driver_hclax    modm:  driver:  hclax       modm_driver_hclax->modm_architecture_i2c_device       modm_driver_hmc58x    modm:  driver:  hmc58x       modm_driver_hmc58x->modm_architecture_i2c_device       modm_driver_hmc6343    modm:  driver:  hmc6343       modm_driver_hmc6343->modm_architecture_i2c_device       modm_driver_i2c_eeprom    modm:  driver:  i2c.eeprom       modm_driver_i2c_eeprom->modm_architecture_i2c_device       modm_driver_itg3200    modm:  driver:  itg3200       modm_driver_itg3200->modm_architecture_i2c_device       modm_driver_lis3_transport    modm:  driver:  lis3.transport       modm_driver_lis3_transport->modm_architecture_i2c_device       modm_driver_lm75    modm:  driver:  lm75       modm_driver_lm75->modm_architecture_i2c_device       modm_driver_mcp23x17    modm:  driver:  mcp23x17       modm_driver_mcp23x17->modm_architecture_i2c_device       modm_driver_pca8574    modm:  driver:  pca8574       modm_driver_pca8574->modm_architecture_i2c_device       modm_driver_pca9535    modm:  driver:  pca9535       modm_driver_pca9535->modm_architecture_i2c_device       modm_driver_pca9685    modm:  driver:  pca9685       modm_driver_pca9685->modm_architecture_i2c_device       modm_driver_ssd1306    modm:  driver:  ssd1306       modm_driver_ssd1306->modm_architecture_i2c_device       modm_driver_tcs3414    modm:  driver:  tcs3414       modm_driver_tcs3414->modm_architecture_i2c_device       modm_driver_tcs3472    modm:  driver:  tcs3472       modm_driver_tcs3472->modm_architecture_i2c_device       modm_driver_tmp102    modm:  driver:  tmp102       modm_driver_tmp102->modm_architecture_i2c_device       modm_driver_tmp175    modm:  driver:  tmp175       modm_driver_tmp175->modm_architecture_i2c_device       modm_driver_vl53l0    modm:  driver:  vl53l0       modm_driver_vl53l0->modm_architecture_i2c_device       modm_driver_vl6180    modm:  driver:  vl6180       modm_driver_vl6180->modm_architecture_i2c_device",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-interrupt/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:interrupt\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Define\n\n\n#define MODM_ISR(vector, ...)\n\n\n#define MODM_ISR_CALL(vector)\n\n\n#define MODM_ISR_DECL(vector)\n\n\n#define MODM_ISR_NAME(vector)\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:interrupt\n\n\n\n\n\n\n\n\nmodm_architecture_interrupt\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ninterrupt\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_interrupt->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_architecture_interrupt\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_interrupt\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_architecture_interrupt\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_architecture_interrupt",
            "title": "modm:architecture:interrupt"
        },
        {
            "location": "/reference/module/modm-architecture-interrupt/#modmarchitectureinterrupt",
            "text": "",
            "title": "modm:architecture:interrupt"
        },
        {
            "location": "/reference/module/modm-architecture-interrupt/#content",
            "text": "// Define  #define MODM_ISR(vector, ...)  #define MODM_ISR_CALL(vector)  #define MODM_ISR_DECL(vector)  #define MODM_ISR_NAME(vector)",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-interrupt/#dependencies",
            "text": "modm:architecture:interrupt     modm_architecture_interrupt   modm:  architecture:  interrupt     modm_architecture    modm:  architecture       modm_architecture_interrupt->modm_architecture       modm_platform_can    modm:  platform:  can       modm_platform_can->modm_architecture_interrupt       modm_platform_core    modm:  platform:  core       modm_platform_core->modm_architecture_interrupt       modm_platform_i2c    modm:  platform:  i2c       modm_platform_i2c->modm_architecture_interrupt       modm_platform_uart    modm:  platform:  uart       modm_platform_uart->modm_architecture_interrupt",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-memory/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:memory\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Function\n\n\nvoid\n*\n \noperator\n \nnew\n(\nsize_t\n \nsize\n,\n \nmodm\n::\nMemoryTraits\n \ntraits\n)\n \nnoexcept\n;\n\n\nvoid\n*\n \noperator\n \nnew\n[](\nsize_t\n \nsize\n,\n \nmodm\n::\nMemoryTraits\n \ntraits\n)\n \nnoexcept\n;\n\n\n\n// Enum\n\n\nenum\n \nclass\n \nMemoryTrait\n;\n\n\n\n// Variable\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryBackup\n \n=\n \n(\nMemoryTrait\n::\nAccessSBus\n \n|\n \nMemoryTrait\n::\nTypeNonVolatile\n);\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryDMA\n \n=\n \n(\nMemoryTrait\n::\nAccessSBus\n \n|\n \nMemoryTrait\n::\nAccessDMA\n);\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryDMA2D\n \n=\n \n(\nMemoryTrait\n::\nAccessSBus\n \n|\n \nMemoryTrait\n::\nAccessDMA2D\n);\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryDefault\n \n=\n \nMemoryDMA\n;\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryExternal\n \n=\n \n(\nMemoryTrait\n::\nAccessSBus\n \n|\n \nMemoryTrait\n::\nTypeExternal\n);\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryFastCode\n \n=\n \n(\nMemoryTrait\n::\nAccessIBus\n \n|\n \nMemoryTrait\n::\nTypeCoreCoupled\n);\n\n\nconstexpr\n \nMemoryTraits\n \nmodm\n::\nMemoryFastData\n \n=\n \n(\nMemoryTrait\n::\nAccessDBus\n \n|\n \nMemoryTrait\n::\nTypeCoreCoupled\n);\n\n\n\n// Typedef\n\n\nusing\n \nmodm\n::\nMemoryTraits\n \n=\n \ntypedef\n \nFlags16\n<\nMemoryTrait\n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:memory\n\n\n\n\n\n\n\n\nmodm_architecture_memory\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nmemory\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_memory->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_memory->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni\n\n\n\n\n\n\nmodm:\n\n\nboard:\n\n\ndisco-f469ni\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_architecture_memory\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_memory",
            "title": "modm:architecture:memory"
        },
        {
            "location": "/reference/module/modm-architecture-memory/#modmarchitecturememory",
            "text": "",
            "title": "modm:architecture:memory"
        },
        {
            "location": "/reference/module/modm-architecture-memory/#content",
            "text": "// Function  void *   operator   new ( size_t   size ,   modm :: MemoryTraits   traits )   noexcept ;  void *   operator   new []( size_t   size ,   modm :: MemoryTraits   traits )   noexcept ;  // Enum  enum   class   MemoryTrait ;  // Variable  constexpr   MemoryTraits   modm :: MemoryBackup   =   ( MemoryTrait :: AccessSBus   |   MemoryTrait :: TypeNonVolatile );  constexpr   MemoryTraits   modm :: MemoryDMA   =   ( MemoryTrait :: AccessSBus   |   MemoryTrait :: AccessDMA );  constexpr   MemoryTraits   modm :: MemoryDMA2D   =   ( MemoryTrait :: AccessSBus   |   MemoryTrait :: AccessDMA2D );  constexpr   MemoryTraits   modm :: MemoryDefault   =   MemoryDMA ;  constexpr   MemoryTraits   modm :: MemoryExternal   =   ( MemoryTrait :: AccessSBus   |   MemoryTrait :: TypeExternal );  constexpr   MemoryTraits   modm :: MemoryFastCode   =   ( MemoryTrait :: AccessIBus   |   MemoryTrait :: TypeCoreCoupled );  constexpr   MemoryTraits   modm :: MemoryFastData   =   ( MemoryTrait :: AccessDBus   |   MemoryTrait :: TypeCoreCoupled );  // Typedef  using   modm :: MemoryTraits   =   typedef   Flags16 < MemoryTrait > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-memory/#dependencies",
            "text": "modm:architecture:memory     modm_architecture_memory   modm:  architecture:  memory     modm_architecture    modm:  architecture       modm_architecture_memory->modm_architecture       modm_architecture_register    modm:  architecture:  register       modm_architecture_memory->modm_architecture_register       modm_board_disco-f469ni    modm:  board:  disco-f469ni       modm_board_disco-f469ni->modm_architecture_memory       modm_platform_core    modm:  platform:  core       modm_platform_core->modm_architecture_memory",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-register/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:register\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nConfiguration\n<\n \ntypename\n \nParent\n \n,\n \ntypename\n \nEnum\n \n,\n \ntypename\n \nParent\n::\nUnderlyingType\n \nMask\n,\n \ntypename\n \nParent\n::\nUnderlyingType\n \nPosition\n=\n0\n \n>\n;\n\n\nstruct\n \nmodm\n::\nFlags\n<\n \ntypename\n \nEnum\n \n,\n \ntypename\n \nT\n  \n>\n;\n\n\nstruct\n \nmodm\n::\nFlagsGroup\n<\n \nT\n...\n \n>\n;\n\n\nstruct\n \nmodm\n::\nFlagsOperators\n<\n \ntypename\n \nEnum\n,\n \ntypename\n \nT\n \n>\n;\n\n\nstruct\n \nmodm\n::\nRegister\n<\n \ntypename\n \nT\n \n>\n;\n\n\nstruct\n \nmodm\n::\nValue\n<\n \ntypename\n \nParent\n \n,\n \ntypename\n \nParent\n::\nUnderlyingType\n \nWidth\n,\n \ntypename\n \nParent\n::\nUnderlyingType\n \nPosition\n=\n0\n \n>\n;\n\n\n\n// Typedef\n\n\nusing\n \nmodm\n::\nFlags16\n \n=\n \ntypedef\n \nFlags\n<\nEnum\n,\n \nuint16_t\n>\n;\n\n\nusing\n \nmodm\n::\nFlags32\n \n=\n \ntypedef\n \nFlags\n<\nEnum\n,\n \nuint32_t\n>\n;\n\n\nusing\n \nmodm\n::\nFlags8\n \n=\n \ntypedef\n \nFlags\n<\nEnum\n,\n \nuint8_t\n>\n;\n\n\nusing\n \nmodm\n::\nRegister16\n \n=\n \ntypedef\n \nRegister\n<\nuint16_t\n>\n;\n\n\nusing\n \nmodm\n::\nRegister32\n \n=\n \ntypedef\n \nRegister\n<\nuint32_t\n>\n;\n\n\nusing\n \nmodm\n::\nRegister8\n \n=\n \ntypedef\n \nRegister\n<\nuint8_t\n>\n;\n\n\n\n// Define\n\n\n#define MODM_FLAGS16(Enum)\n\n\n#define MODM_FLAGS32(Enum)\n\n\n#define MODM_FLAGS8(Enum)\n\n\n#define MODM_TYPE_FLAGS(Parent)\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:register\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio.expander\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_memory\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nmemory\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_memory->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7928\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_spi_flash\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device:\n\n\nspi.flash\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_spi_flash->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbme280\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ndrv832x_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nds1631\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc58x\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhmc58x\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc58x->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhmc6343\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_itg3200\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nitg3200\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_itg3200->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nl3gd20\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis302dl\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis302dl\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis302dl->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3dsh\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3dsh\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3dsh->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lm75\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlm75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lm75->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lsm303a\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlsm303a\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lsm303a->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nltc2984\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp23x17\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nnrf24\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca8574\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca9535\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntmp102\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntmp175\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl53l0\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl6180\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_architecture_register",
            "title": "modm:architecture:register"
        },
        {
            "location": "/reference/module/modm-architecture-register/#modmarchitectureregister",
            "text": "",
            "title": "modm:architecture:register"
        },
        {
            "location": "/reference/module/modm-architecture-register/#content",
            "text": "// Struct  struct   modm :: Configuration <   typename   Parent   ,   typename   Enum   ,   typename   Parent :: UnderlyingType   Mask ,   typename   Parent :: UnderlyingType   Position = 0   > ;  struct   modm :: Flags <   typename   Enum   ,   typename   T    > ;  struct   modm :: FlagsGroup <   T ...   > ;  struct   modm :: FlagsOperators <   typename   Enum ,   typename   T   > ;  struct   modm :: Register <   typename   T   > ;  struct   modm :: Value <   typename   Parent   ,   typename   Parent :: UnderlyingType   Width ,   typename   Parent :: UnderlyingType   Position = 0   > ;  // Typedef  using   modm :: Flags16   =   typedef   Flags < Enum ,   uint16_t > ;  using   modm :: Flags32   =   typedef   Flags < Enum ,   uint32_t > ;  using   modm :: Flags8   =   typedef   Flags < Enum ,   uint8_t > ;  using   modm :: Register16   =   typedef   Register < uint16_t > ;  using   modm :: Register32   =   typedef   Register < uint32_t > ;  using   modm :: Register8   =   typedef   Register < uint8_t > ;  // Define  #define MODM_FLAGS16(Enum)  #define MODM_FLAGS32(Enum)  #define MODM_FLAGS8(Enum)  #define MODM_TYPE_FLAGS(Parent)",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-register/#dependencies",
            "text": "modm:architecture:register     modm_architecture_register   modm:  architecture:  register     modm_architecture    modm:  architecture       modm_architecture_register->modm_architecture       modm_io    modm:  io       modm_architecture_register->modm_io       modm_math_utils    modm:  math:  utils       modm_architecture_register->modm_math_utils       modm_architecture_gpio_expander    modm:  architecture:  gpio.expander       modm_architecture_gpio_expander->modm_architecture_register       modm_architecture_memory    modm:  architecture:  memory       modm_architecture_memory->modm_architecture_register       modm_driver_ad7928    modm:  driver:  ad7928       modm_driver_ad7928->modm_architecture_register       modm_driver_block_device_spi_flash    modm:  driver:  block.device:  spi.flash       modm_driver_block_device_spi_flash->modm_architecture_register       modm_driver_bme280    modm:  driver:  bme280       modm_driver_bme280->modm_architecture_register       modm_driver_drv832x_spi    modm:  driver:  drv832x_spi       modm_driver_drv832x_spi->modm_architecture_register       modm_driver_ds1631    modm:  driver:  ds1631       modm_driver_ds1631->modm_architecture_register       modm_driver_hmc58x    modm:  driver:  hmc58x       modm_driver_hmc58x->modm_architecture_register       modm_driver_hmc6343    modm:  driver:  hmc6343       modm_driver_hmc6343->modm_architecture_register       modm_driver_itg3200    modm:  driver:  itg3200       modm_driver_itg3200->modm_architecture_register       modm_driver_l3gd20    modm:  driver:  l3gd20       modm_driver_l3gd20->modm_architecture_register       modm_driver_lis302dl    modm:  driver:  lis302dl       modm_driver_lis302dl->modm_architecture_register       modm_driver_lis3dsh    modm:  driver:  lis3dsh       modm_driver_lis3dsh->modm_architecture_register       modm_driver_lm75    modm:  driver:  lm75       modm_driver_lm75->modm_architecture_register       modm_driver_lsm303a    modm:  driver:  lsm303a       modm_driver_lsm303a->modm_architecture_register       modm_driver_ltc2984    modm:  driver:  ltc2984       modm_driver_ltc2984->modm_architecture_register       modm_driver_mcp23x17    modm:  driver:  mcp23x17       modm_driver_mcp23x17->modm_architecture_register       modm_driver_nrf24    modm:  driver:  nrf24       modm_driver_nrf24->modm_architecture_register       modm_driver_pca8574    modm:  driver:  pca8574       modm_driver_pca8574->modm_architecture_register       modm_driver_pca9535    modm:  driver:  pca9535       modm_driver_pca9535->modm_architecture_register       modm_driver_tmp102    modm:  driver:  tmp102       modm_driver_tmp102->modm_architecture_register       modm_driver_tmp175    modm:  driver:  tmp175       modm_driver_tmp175->modm_architecture_register       modm_driver_vl53l0    modm:  driver:  vl53l0       modm_driver_vl53l0->modm_architecture_register       modm_driver_vl6180    modm:  driver:  vl6180       modm_driver_vl6180->modm_architecture_register       modm_platform_adc    modm:  platform:  adc       modm_platform_adc->modm_architecture_register       modm_platform_spi    modm:  platform:  spi       modm_platform_spi->modm_architecture_register       modm_platform_timer    modm:  platform:  timer       modm_platform_timer->modm_architecture_register       modm_platform_uart    modm:  platform:  uart       modm_platform_uart->modm_architecture_register       modm_test_architecture    modm:  test:  architecture       modm_test_architecture->modm_architecture_register",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-spi/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:spi\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nSpiDevice\n<\n \nclass\n \nSpiMaster\n \n>\n;\n\n\nclass\n \nmodm\n::\nSpiMaster\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nSpi\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:spi\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi_device->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7280a\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adns9800\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nadns9800\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adns9800->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max6966\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmax6966\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max6966->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max7219\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmax7219\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max7219->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nokia5110\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nnokia5110\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nokia5110->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nnrf24\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s65\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nsiemens_s65\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s65->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_bitbang\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi.bitbang\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_bitbang->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_spi\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_spi->modm_architecture_spi",
            "title": "modm:architecture:spi"
        },
        {
            "location": "/reference/module/modm-architecture-spi/#modmarchitecturespi",
            "text": "",
            "title": "modm:architecture:spi"
        },
        {
            "location": "/reference/module/modm-architecture-spi/#content",
            "text": "// Class  class   modm :: SpiDevice <   class   SpiMaster   > ;  class   modm :: SpiMaster ;  // Struct  struct   modm :: Spi ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-spi/#dependencies",
            "text": "modm:architecture:spi     modm_architecture_spi   modm:  architecture:  spi     modm_architecture    modm:  architecture       modm_architecture_spi->modm_architecture       modm_processing_resumable    modm:  processing:  resumable       modm_architecture_spi->modm_processing_resumable       modm_architecture_spi_device    modm:  architecture:  spi.device       modm_architecture_spi_device->modm_architecture_spi       modm_driver_ad7280a    modm:  driver:  ad7280a       modm_driver_ad7280a->modm_architecture_spi       modm_driver_adns9800    modm:  driver:  adns9800       modm_driver_adns9800->modm_architecture_spi       modm_driver_max6966    modm:  driver:  max6966       modm_driver_max6966->modm_architecture_spi       modm_driver_max7219    modm:  driver:  max7219       modm_driver_max7219->modm_architecture_spi       modm_driver_nokia5110    modm:  driver:  nokia5110       modm_driver_nokia5110->modm_architecture_spi       modm_driver_nrf24    modm:  driver:  nrf24       modm_driver_nrf24->modm_architecture_spi       modm_driver_siemens_s65    modm:  driver:  siemens_s65       modm_driver_siemens_s65->modm_architecture_spi       modm_platform_spi    modm:  platform:  spi       modm_platform_spi->modm_architecture_spi       modm_platform_spi_bitbang    modm:  platform:  spi.bitbang       modm_platform_spi_bitbang->modm_architecture_spi       modm_platform_uart_spi    modm:  platform:  uart.spi       modm_platform_uart_spi->modm_architecture_spi       modm_test_platform_spi    modm:  test:  platform:  spi       modm_test_platform_spi->modm_architecture_spi",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-spi-device/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:spi.device\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nSpiDevice\n<\n \nclass\n \nSpiMaster\n \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:spi.device\n\n\n\n\n\n\n\n\nmodm_architecture_spi_device\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi.device\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi_device->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi_device->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7928\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_architecture_spi_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_spi_flash\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device:\n\n\nspi.flash\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_spi_flash->modm_architecture_spi_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ndrv832x_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi->modm_architecture_spi_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3.transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport->modm_architecture_spi_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nltc2984\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984->modm_architecture_spi_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp23x17\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17->modm_architecture_spi_device",
            "title": "modm:architecture:spi.device"
        },
        {
            "location": "/reference/module/modm-architecture-spi-device/#modmarchitecturespidevice",
            "text": "",
            "title": "modm:architecture:spi.device"
        },
        {
            "location": "/reference/module/modm-architecture-spi-device/#content",
            "text": "// Class  class   modm :: SpiDevice <   class   SpiMaster   > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-spi-device/#dependencies",
            "text": "modm:architecture:spi.device     modm_architecture_spi_device   modm:  architecture:  spi.device     modm_architecture    modm:  architecture       modm_architecture_spi_device->modm_architecture       modm_architecture_spi    modm:  architecture:  spi       modm_architecture_spi_device->modm_architecture_spi       modm_driver_ad7928    modm:  driver:  ad7928       modm_driver_ad7928->modm_architecture_spi_device       modm_driver_block_device_spi_flash    modm:  driver:  block.device:  spi.flash       modm_driver_block_device_spi_flash->modm_architecture_spi_device       modm_driver_drv832x_spi    modm:  driver:  drv832x_spi       modm_driver_drv832x_spi->modm_architecture_spi_device       modm_driver_lis3_transport    modm:  driver:  lis3.transport       modm_driver_lis3_transport->modm_architecture_spi_device       modm_driver_ltc2984    modm:  driver:  ltc2984       modm_driver_ltc2984->modm_architecture_spi_device       modm_driver_mcp23x17    modm:  driver:  mcp23x17       modm_driver_mcp23x17->modm_architecture_spi_device",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-uart/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:uart\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nUart\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:uart\n\n\n\n\n\n\n\n\nmodm_architecture_uart\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nuart\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_uart->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_ros\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nros\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_ros->modm_architecture_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_architecture_uart",
            "title": "modm:architecture:uart"
        },
        {
            "location": "/reference/module/modm-architecture-uart/#modmarchitectureuart",
            "text": "",
            "title": "modm:architecture:uart"
        },
        {
            "location": "/reference/module/modm-architecture-uart/#content",
            "text": "// Class  class   modm :: Uart ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-uart/#dependencies",
            "text": "modm:architecture:uart     modm_architecture_uart   modm:  architecture:  uart     modm_architecture    modm:  architecture       modm_architecture_uart->modm_architecture       modm_communication_ros    modm:  communication:  ros       modm_communication_ros->modm_architecture_uart       modm_platform_uart    modm:  platform:  uart       modm_platform_uart->modm_architecture_uart",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-architecture-unaligned/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:architecture:unaligned\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nunaligned_t\n<\n \ntypename\n \nT\n  \n>\n;\n\n\n\n// Function\n\n\nunaligned_t\n<\nT\n>*\n \nmodm\n::\nasUnaligned\n(\nU\n \n*\nvalue\n);\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:architecture:unaligned\n\n\n\n\n\n\n\n\nmodm_architecture_unaligned\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nunaligned\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_unaligned->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl6180\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_architecture_unaligned\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_unaligned",
            "title": "modm:architecture:unaligned"
        },
        {
            "location": "/reference/module/modm-architecture-unaligned/#modmarchitectureunaligned",
            "text": "",
            "title": "modm:architecture:unaligned"
        },
        {
            "location": "/reference/module/modm-architecture-unaligned/#content",
            "text": "// Struct  struct   modm :: unaligned_t <   typename   T    > ;  // Function  unaligned_t < T >*   modm :: asUnaligned ( U   * value );",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-architecture-unaligned/#dependencies",
            "text": "modm:architecture:unaligned     modm_architecture_unaligned   modm:  architecture:  unaligned     modm_architecture    modm:  architecture       modm_architecture_unaligned->modm_architecture       modm_driver_vl6180    modm:  driver:  vl6180       modm_driver_vl6180->modm_architecture_unaligned       modm_platform_core    modm:  platform:  core       modm_platform_core->modm_architecture_unaligned",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-board/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:board\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Struct\n\n\nstruct\n \nBoard\n::\nsystemClock\n;\n\n\n\n// Function\n\n\nmodm\n::\nGraphicDisplay\n&\n \nBoard\n::\ngetDisplay\n();\n\n\nvoid\n \nBoard\n::\ninitialize\n();\n\n\nvoid\n \nBoard\n::\ninitializeDisplay\n();\n\n\nvoid\n \nBoard\n::\ninitializeTouchscreen\n();\n\n\nvoid\n \nBoard\n::\nsetDisplayBuffer\n(\nvoid\n \n*\nbuffer\n);\n\n\nvoid\n*\n \nBoard\n::\ngetDisplayBuffer\n();\n\n\n\n// Typedef\n\n\nusing\n \nBoard\n::\nA0\n \n=\n \ntypedef\n \nGpioB1\n;\n\n\nusing\n \nBoard\n::\nA1\n \n=\n \ntypedef\n \nGpioC2\n;\n\n\nusing\n \nBoard\n::\nA2\n \n=\n \ntypedef\n \nGpioC3\n;\n\n\nusing\n \nBoard\n::\nA3\n \n=\n \ntypedef\n \nGpioC4\n;\n\n\nusing\n \nBoard\n::\nA4\n \n=\n \ntypedef\n \nGpioC5\n;\n\n\nusing\n \nBoard\n::\nA5\n \n=\n \ntypedef\n \nGpioA4\n;\n\n\nusing\n \nBoard\n::\nButton\n \n=\n \ntypedef\n \nGpioInputA0\n;\n\n\nusing\n \nBoard\n::\nD0\n \n=\n \ntypedef\n \nGpioG9\n;\n\n\nusing\n \nBoard\n::\nD1\n \n=\n \ntypedef\n \nGpioG14\n;\n\n\nusing\n \nBoard\n::\nD10\n \n=\n \ntypedef\n \nGpioH6\n;\n\n\nusing\n \nBoard\n::\nD11\n \n=\n \ntypedef\n \nGpioB15\n;\n\n\nusing\n \nBoard\n::\nD12\n \n=\n \ntypedef\n \nGpioB14\n;\n\n\nusing\n \nBoard\n::\nD13\n \n=\n \ntypedef\n \nGpioD3\n;\n\n\nusing\n \nBoard\n::\nD14\n \n=\n \ntypedef\n \nGpioB9\n;\n\n\nusing\n \nBoard\n::\nD15\n \n=\n \ntypedef\n \nGpioB8\n;\n\n\nusing\n \nBoard\n::\nD2\n \n=\n \ntypedef\n \nGpioG13\n;\n\n\nusing\n \nBoard\n::\nD3\n \n=\n \ntypedef\n \nGpioA1\n;\n\n\nusing\n \nBoard\n::\nD4\n \n=\n \ntypedef\n \nGpioG12\n;\n\n\nusing\n \nBoard\n::\nD5\n \n=\n \ntypedef\n \nGpioA2\n;\n\n\nusing\n \nBoard\n::\nD6\n \n=\n \ntypedef\n \nGpioA6\n;\n\n\nusing\n \nBoard\n::\nD7\n \n=\n \ntypedef\n \nGpioG11\n;\n\n\nusing\n \nBoard\n::\nD8\n \n=\n \ntypedef\n \nGpioG10\n;\n\n\nusing\n \nBoard\n::\nD9\n \n=\n \ntypedef\n \nGpioA7\n;\n\n\nusing\n \nBoard\n::\nDisplayReset\n \n=\n \ntypedef\n \nGpioOutputH7\n;\n\n\nusing\n \nBoard\n::\nLedBlue\n \n=\n \ntypedef\n \nGpioInverted\n<\nGpioOutputK3\n>\n;\n\n\nusing\n \nBoard\n::\nLedD13\n \n=\n \ntypedef\n \nGpioOutputD3\n;\n\n\nusing\n \nBoard\n::\nLedGreen\n \n=\n \ntypedef\n \nGpioInverted\n<\nGpioOutputG6\n>\n;\n\n\nusing\n \nBoard\n::\nLedOrange\n \n=\n \ntypedef\n \nGpioInverted\n<\nGpioOutputD4\n>\n;\n\n\nusing\n \nBoard\n::\nLedRed\n \n=\n \ntypedef\n \nGpioInverted\n<\nGpioOutputD5\n>\n;\n\n\nusing\n \nBoard\n::\nLedUsb\n \n=\n \ntypedef\n \nGpioInverted\n<\nGpioOutputB7\n>\n;\n\n\nusing\n \nBoard\n::\nLeds\n \n=\n \ntypedef\n \nSoftwareGpioPort\n<\n \nLedBlue\n,\n \nLedRed\n,\n \nLedOrange\n,\n \nLedGreen\n \n>\n;\n\n\nusing\n \nBoard\n::\nLoggerDevice\n \n=\n \ntypedef\n \nmodm\n::\nIODeviceWrapper\n<\n \nstlink\n::\nUart\n,\n \nmodm\n::\nIOBuffer\n::\nBlockIfFull\n \n>\n;\n\n\nusing\n \nBoard\n::\nft6\n::\nI2cMaster\n \n=\n \ntypedef\n \nI2cMaster1\n;\n\n\nusing\n \nBoard\n::\nft6\n::\nInt\n \n=\n \ntypedef\n \nGpioInputJ5\n;\n\n\nusing\n \nBoard\n::\nft6\n::\nScl\n \n=\n \ntypedef\n \nGpioB8\n;\n\n\nusing\n \nBoard\n::\nft6\n::\nSda\n \n=\n \ntypedef\n \nGpioB9\n;\n\n\nusing\n \nBoard\n::\nft6\n::\nTouch\n \n=\n \ntypedef\n \nmodm\n::\nFt6x06\n<\n \nI2cMaster\n \n>\n;\n\n\nusing\n \nBoard\n::\nstlink\n::\nRx\n \n=\n \ntypedef\n \nGpioInputB11\n;\n\n\nusing\n \nBoard\n::\nstlink\n::\nTx\n \n=\n \ntypedef\n \nGpioOutputB10\n;\n\n\nusing\n \nBoard\n::\nstlink\n::\nUart\n \n=\n \ntypedef\n \nUsart3\n;\n\n\n\n// Define\n\n\n#define MODM_BOARD_HAS_LOGGER\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:board\n\n\n\n\n\n\n\n\nmodm_board\n\n\n\n\nmodm:\n\n\nboard\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni\n\n\n\n\n\n\nmodm:\n\n\nboard:\n\n\ndisco-f469ni\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_board",
            "title": "modm:board"
        },
        {
            "location": "/reference/module/modm-board/#modmboard",
            "text": "",
            "title": "modm:board"
        },
        {
            "location": "/reference/module/modm-board/#content",
            "text": "// Struct  struct   Board :: systemClock ;  // Function  modm :: GraphicDisplay &   Board :: getDisplay ();  void   Board :: initialize ();  void   Board :: initializeDisplay ();  void   Board :: initializeTouchscreen ();  void   Board :: setDisplayBuffer ( void   * buffer );  void *   Board :: getDisplayBuffer ();  // Typedef  using   Board :: A0   =   typedef   GpioB1 ;  using   Board :: A1   =   typedef   GpioC2 ;  using   Board :: A2   =   typedef   GpioC3 ;  using   Board :: A3   =   typedef   GpioC4 ;  using   Board :: A4   =   typedef   GpioC5 ;  using   Board :: A5   =   typedef   GpioA4 ;  using   Board :: Button   =   typedef   GpioInputA0 ;  using   Board :: D0   =   typedef   GpioG9 ;  using   Board :: D1   =   typedef   GpioG14 ;  using   Board :: D10   =   typedef   GpioH6 ;  using   Board :: D11   =   typedef   GpioB15 ;  using   Board :: D12   =   typedef   GpioB14 ;  using   Board :: D13   =   typedef   GpioD3 ;  using   Board :: D14   =   typedef   GpioB9 ;  using   Board :: D15   =   typedef   GpioB8 ;  using   Board :: D2   =   typedef   GpioG13 ;  using   Board :: D3   =   typedef   GpioA1 ;  using   Board :: D4   =   typedef   GpioG12 ;  using   Board :: D5   =   typedef   GpioA2 ;  using   Board :: D6   =   typedef   GpioA6 ;  using   Board :: D7   =   typedef   GpioG11 ;  using   Board :: D8   =   typedef   GpioG10 ;  using   Board :: D9   =   typedef   GpioA7 ;  using   Board :: DisplayReset   =   typedef   GpioOutputH7 ;  using   Board :: LedBlue   =   typedef   GpioInverted < GpioOutputK3 > ;  using   Board :: LedD13   =   typedef   GpioOutputD3 ;  using   Board :: LedGreen   =   typedef   GpioInverted < GpioOutputG6 > ;  using   Board :: LedOrange   =   typedef   GpioInverted < GpioOutputD4 > ;  using   Board :: LedRed   =   typedef   GpioInverted < GpioOutputD5 > ;  using   Board :: LedUsb   =   typedef   GpioInverted < GpioOutputB7 > ;  using   Board :: Leds   =   typedef   SoftwareGpioPort <   LedBlue ,   LedRed ,   LedOrange ,   LedGreen   > ;  using   Board :: LoggerDevice   =   typedef   modm :: IODeviceWrapper <   stlink :: Uart ,   modm :: IOBuffer :: BlockIfFull   > ;  using   Board :: ft6 :: I2cMaster   =   typedef   I2cMaster1 ;  using   Board :: ft6 :: Int   =   typedef   GpioInputJ5 ;  using   Board :: ft6 :: Scl   =   typedef   GpioB8 ;  using   Board :: ft6 :: Sda   =   typedef   GpioB9 ;  using   Board :: ft6 :: Touch   =   typedef   modm :: Ft6x06 <   I2cMaster   > ;  using   Board :: stlink :: Rx   =   typedef   GpioInputB11 ;  using   Board :: stlink :: Tx   =   typedef   GpioOutputB10 ;  using   Board :: stlink :: Uart   =   typedef   Usart3 ;  // Define  #define MODM_BOARD_HAS_LOGGER",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-board/#dependencies",
            "text": "modm:board     modm_board   modm:  board     modm_board_disco-f469ni    modm:  board:  disco-f469ni       modm_board_disco-f469ni->modm_board",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-board-disco-f469ni/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:board:disco-f469ni\n\u00b6\n\n\nDiscovery kit with STM32F469NI MCU\n\n\nThis BSPs \nBoard::initialize()\n sets the board up with these settings:\n\n\n\n\n180MHz CPU clock frequency in overdrive mode.\n\n\n90MHz APB2 and 45MHz APB1 clock frequency.\n\n\nMODM_LOGGER initialized at 115.2kBaud outputting on STLink. \n\n\n16MB SDRAM initialized for heap.\n\n\nDisables the display by default.\n\n\n\n\nYou can enable and use the on-board display in two ways:\n\n\n\n\nUse the \nmodm::GraphicDisplay\n returned by \nBoard::getDisplay()\n, which\n   initializes the display on first call and allocates the framebuffer in the \n   external SDRAM. This is the simplest option.\n\n\nCall \nBoard::initializeDisplay()\n and then provide your own display buffer \n   with \nBoard::setDisplayBuffer(void*)\n.\n\n\n\n\n\n\nCaveats\n\n\nNo double-buffering is implemented, so you may notice some tearing if you\nupdate the display fast enough.\n\n\n\n\nAccess to the capacitive touchscreen is provided in the \nBoard::ft6\n namespace.\nCall \nBoard::initializeTouchscreen()\n to setup the peripherals.\n\n\nProduct Link: \nhttp://www.st.com/en/evaluation-tools/32f469idiscovery.html\n\n\nContent\n\u00b6\n\n\n// Struct\n\n\nstruct\n \nBoard\n::\nsystemClock\n;\n\n\n\n// Function\n\n\nmodm\n::\nGraphicDisplay\n&\n \nBoard\n::\ngetDisplay\n();\n\n\nvoid\n \nBoard\n::\ninitialize\n();\n\n\nvoid\n \nBoard\n::\ninitializeDisplay\n();\n\n\nvoid\n \nBoard\n::\ninitializeTouchscreen\n();\n\n\nvoid\n \nBoard\n::\nsetDisplayBuffer\n(\nvoid\n \n*\nbuffer\n);\n\n\nvoid\n*\n \nBoard\n::\ngetDisplayBuffer\n();\n\n\n\n// Typedef\n\n\nusing\n \nBoard\n::\nA0\n \n=\n \ntypedef\n \nGpioB1\n;\n\n\nusing\n \nBoard\n::\nA1\n \n=\n \ntypedef\n \nGpioC2\n;\n\n\nusing\n \nBoard\n::\nA2\n \n=\n \ntypedef\n \nGpioC3\n;\n\n\nusing\n \nBoard\n::\nA3\n \n=\n \ntypedef\n \nGpioC4\n;\n\n\nusing\n \nBoard\n::\nA4\n \n=\n \ntypedef\n \nGpioC5\n;\n\n\nusing\n \nBoard\n::\nA5\n \n=\n \ntypedef\n \nGpioA4\n;\n\n\nusing\n \nBoard\n::\nButton\n \n=\n \ntypedef\n \nGpioInputA0\n;\n\n\nusing\n \nBoard\n::\nD0\n \n=\n \ntypedef\n \nGpioG9\n;\n\n\nusing\n \nBoard\n::\nD1\n \n=\n \ntypedef\n \nGpioG14\n;\n\n\nusing\n \nBoard\n::\nD10\n \n=\n \ntypedef\n \nGpioH6\n;\n\n\nusing\n \nBoard\n::\nD11\n \n=\n \ntypedef\n \nGpioB15\n;\n\n\nusing\n \nBoard\n::\nD12\n \n=\n \ntypedef\n \nGpioB14\n;\n\n\nusing\n \nBoard\n::\nD13\n \n=\n \ntypedef\n \nGpioD3\n;\n\n\nusing\n \nBoard\n::\nD14\n \n=\n \ntypedef\n \nGpioB9\n;\n\n\nusing\n \nBoard\n::\nD15\n \n=\n \ntypedef\n \nGpioB8\n;\n\n\nusing\n \nBoard\n::\nD2\n \n=\n \ntypedef\n \nGpioG13\n;\n\n\nusing\n \nBoard\n::\nD3\n \n=\n \ntypedef\n \nGpioA1\n;\n\n\nusing\n \nBoard\n::\nD4\n \n=\n \ntypedef\n \nGpioG12\n;\n\n\nusing\n \nBoard\n::\nD5\n \n=\n \ntypedef\n \nGpioA2\n;\n\n\nusing\n \nBoard\n::\nD6\n \n=\n \ntypedef\n \nGpioA6\n;\n\n\nusing\n \nBoard\n::\nD7\n \n=\n \ntypedef\n \nGpioG11\n;\n\n\nusing\n \nBoard\n::\nD8\n \n=\n \ntypedef\n \nGpioG10\n;\n\n\nusing\n \nBoard\n::\nD9\n \n=\n \ntypedef\n \nGpioA7\n;\n\n\nusing\n \nBoard\n::\nDisplayReset\n \n=\n \ntypedef\n \nGpioOutputH7\n;\n\n\nusing\n \nBoard\n::\nLedBlue\n \n=\n \ntypedef\n \nGpioInverted\n<\nGpioOutputK3\n>\n;\n\n\nusing\n \nBoard\n::\nLedD13\n \n=\n \ntypedef\n \nGpioOutputD3\n;\n\n\nusing\n \nBoard\n::\nLedGreen\n \n=\n \ntypedef\n \nGpioInverted\n<\nGpioOutputG6\n>\n;\n\n\nusing\n \nBoard\n::\nLedOrange\n \n=\n \ntypedef\n \nGpioInverted\n<\nGpioOutputD4\n>\n;\n\n\nusing\n \nBoard\n::\nLedRed\n \n=\n \ntypedef\n \nGpioInverted\n<\nGpioOutputD5\n>\n;\n\n\nusing\n \nBoard\n::\nLedUsb\n \n=\n \ntypedef\n \nGpioInverted\n<\nGpioOutputB7\n>\n;\n\n\nusing\n \nBoard\n::\nLeds\n \n=\n \ntypedef\n \nSoftwareGpioPort\n<\n \nLedBlue\n,\n \nLedRed\n,\n \nLedOrange\n,\n \nLedGreen\n \n>\n;\n\n\nusing\n \nBoard\n::\nLoggerDevice\n \n=\n \ntypedef\n \nmodm\n::\nIODeviceWrapper\n<\n \nstlink\n::\nUart\n,\n \nmodm\n::\nIOBuffer\n::\nBlockIfFull\n \n>\n;\n\n\nusing\n \nBoard\n::\nft6\n::\nI2cMaster\n \n=\n \ntypedef\n \nI2cMaster1\n;\n\n\nusing\n \nBoard\n::\nft6\n::\nInt\n \n=\n \ntypedef\n \nGpioInputJ5\n;\n\n\nusing\n \nBoard\n::\nft6\n::\nScl\n \n=\n \ntypedef\n \nGpioB8\n;\n\n\nusing\n \nBoard\n::\nft6\n::\nSda\n \n=\n \ntypedef\n \nGpioB9\n;\n\n\nusing\n \nBoard\n::\nft6\n::\nTouch\n \n=\n \ntypedef\n \nmodm\n::\nFt6x06\n<\n \nI2cMaster\n \n>\n;\n\n\nusing\n \nBoard\n::\nstlink\n::\nRx\n \n=\n \ntypedef\n \nGpioInputB11\n;\n\n\nusing\n \nBoard\n::\nstlink\n::\nTx\n \n=\n \ntypedef\n \nGpioOutputB10\n;\n\n\nusing\n \nBoard\n::\nstlink\n::\nUart\n \n=\n \ntypedef\n \nUsart3\n;\n\n\n\n// Define\n\n\n#define MODM_BOARD_HAS_LOGGER\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:board:disco-f469ni\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni\n\n\n\n\nmodm:\n\n\nboard:\n\n\ndisco-f469ni\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_memory\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nmemory\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_architecture_memory\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board\n\n\n\n\n\n\nmodm:\n\n\nboard\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_board\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ft6x06\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nft6x06\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_driver_ft6x06\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_platform_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_platform_core\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_1\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c:\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_platform_i2c_1\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_3\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_platform_uart_3\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_tlsf\n\n\n\n\n\n\nmodm:\n\n\ntlsf\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_tlsf\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_ui_display",
            "title": "modm:board:disco-f469ni"
        },
        {
            "location": "/reference/module/modm-board-disco-f469ni/#modmboarddisco-f469ni",
            "text": "Discovery kit with STM32F469NI MCU  This BSPs  Board::initialize()  sets the board up with these settings:   180MHz CPU clock frequency in overdrive mode.  90MHz APB2 and 45MHz APB1 clock frequency.  MODM_LOGGER initialized at 115.2kBaud outputting on STLink.   16MB SDRAM initialized for heap.  Disables the display by default.   You can enable and use the on-board display in two ways:   Use the  modm::GraphicDisplay  returned by  Board::getDisplay() , which\n   initializes the display on first call and allocates the framebuffer in the \n   external SDRAM. This is the simplest option.  Call  Board::initializeDisplay()  and then provide your own display buffer \n   with  Board::setDisplayBuffer(void*) .    Caveats  No double-buffering is implemented, so you may notice some tearing if you\nupdate the display fast enough.   Access to the capacitive touchscreen is provided in the  Board::ft6  namespace.\nCall  Board::initializeTouchscreen()  to setup the peripherals.  Product Link:  http://www.st.com/en/evaluation-tools/32f469idiscovery.html",
            "title": "modm:board:disco-f469ni"
        },
        {
            "location": "/reference/module/modm-board-disco-f469ni/#content",
            "text": "// Struct  struct   Board :: systemClock ;  // Function  modm :: GraphicDisplay &   Board :: getDisplay ();  void   Board :: initialize ();  void   Board :: initializeDisplay ();  void   Board :: initializeTouchscreen ();  void   Board :: setDisplayBuffer ( void   * buffer );  void *   Board :: getDisplayBuffer ();  // Typedef  using   Board :: A0   =   typedef   GpioB1 ;  using   Board :: A1   =   typedef   GpioC2 ;  using   Board :: A2   =   typedef   GpioC3 ;  using   Board :: A3   =   typedef   GpioC4 ;  using   Board :: A4   =   typedef   GpioC5 ;  using   Board :: A5   =   typedef   GpioA4 ;  using   Board :: Button   =   typedef   GpioInputA0 ;  using   Board :: D0   =   typedef   GpioG9 ;  using   Board :: D1   =   typedef   GpioG14 ;  using   Board :: D10   =   typedef   GpioH6 ;  using   Board :: D11   =   typedef   GpioB15 ;  using   Board :: D12   =   typedef   GpioB14 ;  using   Board :: D13   =   typedef   GpioD3 ;  using   Board :: D14   =   typedef   GpioB9 ;  using   Board :: D15   =   typedef   GpioB8 ;  using   Board :: D2   =   typedef   GpioG13 ;  using   Board :: D3   =   typedef   GpioA1 ;  using   Board :: D4   =   typedef   GpioG12 ;  using   Board :: D5   =   typedef   GpioA2 ;  using   Board :: D6   =   typedef   GpioA6 ;  using   Board :: D7   =   typedef   GpioG11 ;  using   Board :: D8   =   typedef   GpioG10 ;  using   Board :: D9   =   typedef   GpioA7 ;  using   Board :: DisplayReset   =   typedef   GpioOutputH7 ;  using   Board :: LedBlue   =   typedef   GpioInverted < GpioOutputK3 > ;  using   Board :: LedD13   =   typedef   GpioOutputD3 ;  using   Board :: LedGreen   =   typedef   GpioInverted < GpioOutputG6 > ;  using   Board :: LedOrange   =   typedef   GpioInverted < GpioOutputD4 > ;  using   Board :: LedRed   =   typedef   GpioInverted < GpioOutputD5 > ;  using   Board :: LedUsb   =   typedef   GpioInverted < GpioOutputB7 > ;  using   Board :: Leds   =   typedef   SoftwareGpioPort <   LedBlue ,   LedRed ,   LedOrange ,   LedGreen   > ;  using   Board :: LoggerDevice   =   typedef   modm :: IODeviceWrapper <   stlink :: Uart ,   modm :: IOBuffer :: BlockIfFull   > ;  using   Board :: ft6 :: I2cMaster   =   typedef   I2cMaster1 ;  using   Board :: ft6 :: Int   =   typedef   GpioInputJ5 ;  using   Board :: ft6 :: Scl   =   typedef   GpioB8 ;  using   Board :: ft6 :: Sda   =   typedef   GpioB9 ;  using   Board :: ft6 :: Touch   =   typedef   modm :: Ft6x06 <   I2cMaster   > ;  using   Board :: stlink :: Rx   =   typedef   GpioInputB11 ;  using   Board :: stlink :: Tx   =   typedef   GpioOutputB10 ;  using   Board :: stlink :: Uart   =   typedef   Usart3 ;  // Define  #define MODM_BOARD_HAS_LOGGER",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-board-disco-f469ni/#dependencies",
            "text": "modm:board:disco-f469ni     modm_board_disco-f469ni   modm:  board:  disco-f469ni     modm_architecture_clock    modm:  architecture:  clock       modm_board_disco-f469ni->modm_architecture_clock       modm_architecture_memory    modm:  architecture:  memory       modm_board_disco-f469ni->modm_architecture_memory       modm_board    modm:  board       modm_board_disco-f469ni->modm_board       modm_debug    modm:  debug       modm_board_disco-f469ni->modm_debug       modm_driver_ft6x06    modm:  driver:  ft6x06       modm_board_disco-f469ni->modm_driver_ft6x06       modm_platform_clock    modm:  platform:  clock       modm_board_disco-f469ni->modm_platform_clock       modm_platform_core    modm:  platform:  core       modm_board_disco-f469ni->modm_platform_core       modm_platform_gpio    modm:  platform:  gpio       modm_board_disco-f469ni->modm_platform_gpio       modm_platform_i2c_1    modm:  platform:  i2c:  1       modm_board_disco-f469ni->modm_platform_i2c_1       modm_platform_uart_3    modm:  platform:  uart:  3       modm_board_disco-f469ni->modm_platform_uart_3       modm_tlsf    modm:  tlsf       modm_board_disco-f469ni->modm_tlsf       modm_ui_display    modm:  ui:  display       modm_board_disco-f469ni->modm_ui_display",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-build/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:build: Build System Generators\n\u00b6\n\n\nThis parent module defines a common set of functionality that is independent of\nthe specific build system generator implementation.\nThis includes straight-forward options like project name and build path\nbut also more complicated configuration for programming your target via\nAvrDude/OpenOCD and debugging via GDB.\n\n\nNote that this module does not compile your project, you will need to choose\nthe \nmodm:build:scons\n or \nmodm:build:cmake\n submodule for that, or provide\nyour own build system.\n\n\nUsing OpenOCD\n\u00b6\n\n\nFor accessing your ARM Cortex-M based device, we use OpenOCD and generate a\n\nmodm/openocd.cfg\n file with the target specific configuration:\n\n\n\n\nSearch directories passed via the \nopenocd.search\n metadata key.\n\n\nUser configuration files passed via the \nopenocd.configfile\n metadata key.\n  Your custom \nmodm:build:openocd.cfg\n is added here too.\n\n\nTwo programming commands:\n\n\nprogram_release\n for uploading the release profile.\n\n\nprogram_debug\n for uploading your debug profile.\n\n\n\n\n\n\n\n\nYou can now upload your program in a one-line command:\n\n\nopenocd -f modm/openocd.cfg -c \n\"program_release\"\n\nopenocd -f modm/openocd.cfg -c \n\"program_debug\"\n\n\n\n\nOpen On-Chip Debugger 0.10.0\nadapter speed: 2000 kHz\nadapter_nsrst_delay: 100\nnone separate\nsrst_only separate srst_nogate srst_open_drain connect_deassert_srst\nprogram_debug\nInfo : clock speed 1800 kHz\nInfo : STLINK v2 JTAG v28 API v2 SWIM v18 VID 0x0483 PID 0x374B\nInfo : using stlink api v2\nInfo : Target voltage: 3.260972\nInfo : stm32f4x.cpu: hardware has 6 breakpoints, 4 watchpoints\nadapter speed: 1800 kHz\n** Programming Started **\nauto erase enabled\nInfo : device id = 0x10006434\nInfo : flash size = 2048kbytes\nwrote 16384 bytes from file path/to/project.elf in 0.589551s (27.139 KiB/s)\n** Programming Finished **\n** Verify Started **\nverified 13064 bytes in 0.328969s (38.781 KiB/s)\n** Verified OK **\nadapter speed: 1800 kHz\ntarget halted due to debug-request, current mode: Thread\nxPSR: 0x01000000 pc: 0x0800263c msp: 0x10000be0\nshutdown command invoked\n\n\n\nUsing GDB\n\u00b6\n\n\nFor debugging your program on ARM Cortex-M device, we provide the \nmodm/gdbinit\n\nfile for the \narm-none-eabi-gdb\n debugger connected to your target via OpenOCD.\n\n\nFour commands are provided for convenience:\n\n\n\n\nfile_debug\n loads the debug profile ELF file.\n\n\nfile_release\n loads the release profile ELF file.\n\n\nrestart\n resets the device and halts.\n\n\nrerun\n resets the device and continues execution.\n\n\n\n\nGDB is configured in TUI mode and continues running the target after attaching,\nbut \ndoes not\n load an ELF file! Please call \nfile_{debug, release}\n first or\npass the ELF file as a command line argument.\n\n\nYou can start your debug session by launching OpenOCD and then GDB:\n\n\n# Run OpenOCD without any commands in the background\n\nopenocd -f modm/openocd.cfg\n\n# Open another terminal\n\narm-none-eabi-gdb -x modm/gdbinit\n\n# OR optionally with your custom ELF file\n\narm-none-eabi-gdb -x modm/gdbinit path/to/project.elf\n\n\n\n\n   \u250c\u2014\u2014main.cpp\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2510\n  >\u2502194             DRAW(x+1, y+3);                                  \u2502\n   \u2502195             DRAW(x+2, y+3);                                  \u2502\n   \u2502196     #else                                                    \u2502\n   \u2502197             DRAW(x  , y  );                                  \u2502\n   \u2502198     #endif                                                   \u2502\n   \u2502199     #undef DRAW                                              \u2502\n   \u2502200     }                                                        \u2502\n   \u2502201                                                              \u2502\n   \u2502202     static inline void drawScreen(framebuffer_t before, frame\u2502\n   \u2514\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2518\n  >\u25020x80017a0 <game_of_life()+1692> strh.w r3, [r4, r12, lsl #1]     \u2502\n   \u25020x80017a4 <game_of_life()+1696> add    r0, lr                    \u2502\n   \u25020x80017a6 <game_of_life()+1698> ldr    r2, [r2, #0]              \u2502\n   \u25020x80017a8 <game_of_life()+1700> strh.w r3, [r2, r0, lsl #1]      \u2502\n   \u25020x80017ac <game_of_life()+1704> ldr    r3, [sp, #12]             \u2502\n   \u25020x80017ae <game_of_life()+1706> ldr    r2, [sp, #0]              \u2502\n   \u25020x80017b0 <game_of_life()+1708> add    r2, r3                    \u2502\n   \u25020x80017b2 <game_of_life()+1710> ldrb   r3, [r7, r1]              \u2502\n   \u25020x80017b4 <game_of_life()+1712> strb   r3, [r2, r1]              \u2502\n   \u2514\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2518\nextended-r Remote target In: game_of_life         L194  PC: 0x80017a0\n\nProgram received signal SIGINT, Interrupt.\n0x080017a0 in drawPixel (color=<optimized out>, y=42, x=578) at main.c\n(gdb)\n\n\n\n\n\n\nBe careful attaching to a running target\n\n\nDue to the OpenOCD implementation, the target is halted for a very short\nperiod of time, while the device's debug peripheral is initialized.\nThis time is dependent on the debug adapter and may range from just a few\nmilliseconds to hundreds. Make sure your hardware can handle that!\n\n\n\n\nUsing AvrDude\n\u00b6\n\n\nUnfortunately AvrDude does not support a user configuration file like OpenOCD\ndoes, so there is no convenient one-line command to issue.\nYou have to use the support of the specific build system.\n\n\nCompiler Options\n\u00b6\n\n\nWe maintain a common set of compiler options for all build system generator, so \nthat they all have feature parity. We currently only support compiling modm\nwith GCC for AVR, ARM Cortex-M and x86/posix with the options mentioned in the\n\noffical GCC options documentation\n.\n\n\nYou can find all compiler options inside the generated build script for your\nproject, the options presented here are only the most important ones.\n\n\nShared for C and C++\n\u00b6\n\n\n\n\n-W{all, extra}\n: a basic set of warnings.\n\n\n-Werror={format, maybe-uninitialized, overflow, sign-compare}\n: these warnings are treated as errors.\n\n\n-f{data, function}-sections\n: puts data and functions into their own linker section.\n\n\n-funsigned-{char, bitfields}\n: modm tries to use \nstdint.h\n types everywhere, but just in case.\n\n\n\n\nFor \nrelease builds\n:\n\n\n\n\n-Os\n: optimize for smaller size.\n\n\n\n\nFor \ndebug builds\n:\n\n\n\n\n-Og\n: optimize for debugging experience.\n\n\n\n\nOnly C\n\u00b6\n\n\n\n\n-std=gnu11\n: use C11 with GNU extensions (for \nasm volatile\n).\n\n\n-Wnested-externs\n: shouldn't use \nextern\n inside a function body.\n\n\n\n\nOnly C++\n\u00b6\n\n\n\n\n-std=c++17\n: use C++17\n\n\n-fno-exceptions\n: no exceptions.\n\n\n-fno-rtti\n: no run-time type information.\n\n\n\n\nLinker\n\u00b6\n\n\n\n\n--gc-section\n: garbage collecting sections throws out a lot of unused data/code.\n\n\n-L{linkdir} -Tlinkerscript.ld\n: modm uses a custom linkerscript.\n\n\n\n\nOnly AVR\n\u00b6\n\n\n\n\n-mmcu={target}\n: the target to compile for.\n\n\n\n\nOnly ARM Cortex-M\n\u00b6\n\n\n\n\n-mcpu=cortex-m{type}\n: the target to compile for.\n\n\n-mthumb\n: only Thumb2 instruction set is supported.\n\n\n-mfloat-abi=hard\n: if FPU available use the fastest ABI available.\n\n\n-mfpu=fpv{4, 5}-{sp}-d16\n: single or double precision FPU.\n\n\n-fsingle-precision-constant\n: if SP-FPU, treat all FP constants as SP.\n\n\n-Wdouble-promotion\n: if SP-FPU, warn if FPs are promoted to doubles.\n\n\n\n\nIn addition, these linker options are added:\n\n\n\n\n-nostartfiles\n: modm implements its own startup script.\n\n\n--specs=nano.specs\n: use Newlib Nano.\n\n\n--specs=nosys.specs\n: modm does not use C stdlib features.\n\n\n-wrap,_{calloc, malloc, realloc, free}_r\n: reimplemented Newlib with our own allocator.\n\n\n\n\nOptions\n\u00b6\n\n\nproject.name\n\u00b6\n\n\nProject Name: \nblink\n \u2208 \n{ String }\n\n\nThe project name defaults to the folder name you're calling lbuild from.\n\n\nIt's used by your build system to name the executable and it may also be passed\nto your application via a string constant or CPP define.\n\n\nbuild.path\n\u00b6\n\n\nBuild Path: \n../../../build/stm32f469_discovery/blink\n \u2208 \n{ String }\n\n\nThe build path is defaulted to \nbuild/{modm:build:project.name}\n.\n\n\nIf you have a lot of embedded projects, you may want to change the build path\nto a \ncommon\n directory so that you don't have \nbuild/\n folders everywhere.\nRemember to add your build path to your \n.gitignore\n.\n\n\nYou should use a relative path instead of an absolute one, so that this option\nstill works for other developers.\n\n\nopenocd.cfg\n\u00b6\n\n\nPath to a custom OpenOCD configuration file: \n{ String }\n\n\nIf you have a custom configuration file for your target, it will get included\nby the generated \nmodm/openocd.cfg\n.\n\n\nThis is useful for not having to duplicate your config if you have several\nprojects using the same target (like small bring-up and test projects).\n\n\n\n\nDo not execute commands by default\n\n\nWhen providing your own config file, wrap your specific commands into functions\nand do not execute them by default. A stray \ninit\n or similar in your script\nwill mess with modm's ability to program and debug a device correctly.\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:build\n\n\n\n\n\n\n\n\nmodm_build\n\n\n\n\nmodm:\n\n\nbuild\n\n\n\n\n\n\n\n\nmodm_build_cmake\n\n\n\n\n\n\nmodm:\n\n\nbuild:\n\n\ncmake\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_build_cmake->modm_build\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_build_scons\n\n\n\n\n\n\nmodm:\n\n\nbuild:\n\n\nscons\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_build_scons->modm_build",
            "title": "modm:build"
        },
        {
            "location": "/reference/module/modm-build/#modmbuild-build-system-generators",
            "text": "This parent module defines a common set of functionality that is independent of\nthe specific build system generator implementation.\nThis includes straight-forward options like project name and build path\nbut also more complicated configuration for programming your target via\nAvrDude/OpenOCD and debugging via GDB.  Note that this module does not compile your project, you will need to choose\nthe  modm:build:scons  or  modm:build:cmake  submodule for that, or provide\nyour own build system.",
            "title": "modm:build: Build System Generators"
        },
        {
            "location": "/reference/module/modm-build/#using-openocd",
            "text": "For accessing your ARM Cortex-M based device, we use OpenOCD and generate a modm/openocd.cfg  file with the target specific configuration:   Search directories passed via the  openocd.search  metadata key.  User configuration files passed via the  openocd.configfile  metadata key.\n  Your custom  modm:build:openocd.cfg  is added here too.  Two programming commands:  program_release  for uploading the release profile.  program_debug  for uploading your debug profile.     You can now upload your program in a one-line command:  openocd -f modm/openocd.cfg -c  \"program_release\" \nopenocd -f modm/openocd.cfg -c  \"program_debug\"   Open On-Chip Debugger 0.10.0\nadapter speed: 2000 kHz\nadapter_nsrst_delay: 100\nnone separate\nsrst_only separate srst_nogate srst_open_drain connect_deassert_srst\nprogram_debug\nInfo : clock speed 1800 kHz\nInfo : STLINK v2 JTAG v28 API v2 SWIM v18 VID 0x0483 PID 0x374B\nInfo : using stlink api v2\nInfo : Target voltage: 3.260972\nInfo : stm32f4x.cpu: hardware has 6 breakpoints, 4 watchpoints\nadapter speed: 1800 kHz\n** Programming Started **\nauto erase enabled\nInfo : device id = 0x10006434\nInfo : flash size = 2048kbytes\nwrote 16384 bytes from file path/to/project.elf in 0.589551s (27.139 KiB/s)\n** Programming Finished **\n** Verify Started **\nverified 13064 bytes in 0.328969s (38.781 KiB/s)\n** Verified OK **\nadapter speed: 1800 kHz\ntarget halted due to debug-request, current mode: Thread\nxPSR: 0x01000000 pc: 0x0800263c msp: 0x10000be0\nshutdown command invoked",
            "title": "Using OpenOCD"
        },
        {
            "location": "/reference/module/modm-build/#using-gdb",
            "text": "For debugging your program on ARM Cortex-M device, we provide the  modm/gdbinit \nfile for the  arm-none-eabi-gdb  debugger connected to your target via OpenOCD.  Four commands are provided for convenience:   file_debug  loads the debug profile ELF file.  file_release  loads the release profile ELF file.  restart  resets the device and halts.  rerun  resets the device and continues execution.   GDB is configured in TUI mode and continues running the target after attaching,\nbut  does not  load an ELF file! Please call  file_{debug, release}  first or\npass the ELF file as a command line argument.  You can start your debug session by launching OpenOCD and then GDB:  # Run OpenOCD without any commands in the background \nopenocd -f modm/openocd.cfg # Open another terminal \narm-none-eabi-gdb -x modm/gdbinit # OR optionally with your custom ELF file \narm-none-eabi-gdb -x modm/gdbinit path/to/project.elf     \u250c\u2014\u2014main.cpp\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2510\n  >\u2502194             DRAW(x+1, y+3);                                  \u2502\n   \u2502195             DRAW(x+2, y+3);                                  \u2502\n   \u2502196     #else                                                    \u2502\n   \u2502197             DRAW(x  , y  );                                  \u2502\n   \u2502198     #endif                                                   \u2502\n   \u2502199     #undef DRAW                                              \u2502\n   \u2502200     }                                                        \u2502\n   \u2502201                                                              \u2502\n   \u2502202     static inline void drawScreen(framebuffer_t before, frame\u2502\n   \u2514\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2518\n  >\u25020x80017a0 <game_of_life()+1692> strh.w r3, [r4, r12, lsl #1]     \u2502\n   \u25020x80017a4 <game_of_life()+1696> add    r0, lr                    \u2502\n   \u25020x80017a6 <game_of_life()+1698> ldr    r2, [r2, #0]              \u2502\n   \u25020x80017a8 <game_of_life()+1700> strh.w r3, [r2, r0, lsl #1]      \u2502\n   \u25020x80017ac <game_of_life()+1704> ldr    r3, [sp, #12]             \u2502\n   \u25020x80017ae <game_of_life()+1706> ldr    r2, [sp, #0]              \u2502\n   \u25020x80017b0 <game_of_life()+1708> add    r2, r3                    \u2502\n   \u25020x80017b2 <game_of_life()+1710> ldrb   r3, [r7, r1]              \u2502\n   \u25020x80017b4 <game_of_life()+1712> strb   r3, [r2, r1]              \u2502\n   \u2514\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2518\nextended-r Remote target In: game_of_life         L194  PC: 0x80017a0\n\nProgram received signal SIGINT, Interrupt.\n0x080017a0 in drawPixel (color=<optimized out>, y=42, x=578) at main.c\n(gdb)   Be careful attaching to a running target  Due to the OpenOCD implementation, the target is halted for a very short\nperiod of time, while the device's debug peripheral is initialized.\nThis time is dependent on the debug adapter and may range from just a few\nmilliseconds to hundreds. Make sure your hardware can handle that!",
            "title": "Using GDB"
        },
        {
            "location": "/reference/module/modm-build/#using-avrdude",
            "text": "Unfortunately AvrDude does not support a user configuration file like OpenOCD\ndoes, so there is no convenient one-line command to issue.\nYou have to use the support of the specific build system.",
            "title": "Using AvrDude"
        },
        {
            "location": "/reference/module/modm-build/#compiler-options",
            "text": "We maintain a common set of compiler options for all build system generator, so \nthat they all have feature parity. We currently only support compiling modm\nwith GCC for AVR, ARM Cortex-M and x86/posix with the options mentioned in the offical GCC options documentation .  You can find all compiler options inside the generated build script for your\nproject, the options presented here are only the most important ones.",
            "title": "Compiler Options"
        },
        {
            "location": "/reference/module/modm-build/#shared-for-c-and-c",
            "text": "-W{all, extra} : a basic set of warnings.  -Werror={format, maybe-uninitialized, overflow, sign-compare} : these warnings are treated as errors.  -f{data, function}-sections : puts data and functions into their own linker section.  -funsigned-{char, bitfields} : modm tries to use  stdint.h  types everywhere, but just in case.   For  release builds :   -Os : optimize for smaller size.   For  debug builds :   -Og : optimize for debugging experience.",
            "title": "Shared for C and C++"
        },
        {
            "location": "/reference/module/modm-build/#only-c",
            "text": "-std=gnu11 : use C11 with GNU extensions (for  asm volatile ).  -Wnested-externs : shouldn't use  extern  inside a function body.",
            "title": "Only C"
        },
        {
            "location": "/reference/module/modm-build/#only-c_1",
            "text": "-std=c++17 : use C++17  -fno-exceptions : no exceptions.  -fno-rtti : no run-time type information.",
            "title": "Only C++"
        },
        {
            "location": "/reference/module/modm-build/#linker",
            "text": "--gc-section : garbage collecting sections throws out a lot of unused data/code.  -L{linkdir} -Tlinkerscript.ld : modm uses a custom linkerscript.",
            "title": "Linker"
        },
        {
            "location": "/reference/module/modm-build/#only-avr",
            "text": "-mmcu={target} : the target to compile for.",
            "title": "Only AVR"
        },
        {
            "location": "/reference/module/modm-build/#only-arm-cortex-m",
            "text": "-mcpu=cortex-m{type} : the target to compile for.  -mthumb : only Thumb2 instruction set is supported.  -mfloat-abi=hard : if FPU available use the fastest ABI available.  -mfpu=fpv{4, 5}-{sp}-d16 : single or double precision FPU.  -fsingle-precision-constant : if SP-FPU, treat all FP constants as SP.  -Wdouble-promotion : if SP-FPU, warn if FPs are promoted to doubles.   In addition, these linker options are added:   -nostartfiles : modm implements its own startup script.  --specs=nano.specs : use Newlib Nano.  --specs=nosys.specs : modm does not use C stdlib features.  -wrap,_{calloc, malloc, realloc, free}_r : reimplemented Newlib with our own allocator.",
            "title": "Only ARM Cortex-M"
        },
        {
            "location": "/reference/module/modm-build/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-build/#projectname",
            "text": "Project Name:  blink  \u2208  { String }  The project name defaults to the folder name you're calling lbuild from.  It's used by your build system to name the executable and it may also be passed\nto your application via a string constant or CPP define.",
            "title": "project.name"
        },
        {
            "location": "/reference/module/modm-build/#buildpath",
            "text": "Build Path:  ../../../build/stm32f469_discovery/blink  \u2208  { String }  The build path is defaulted to  build/{modm:build:project.name} .  If you have a lot of embedded projects, you may want to change the build path\nto a  common  directory so that you don't have  build/  folders everywhere.\nRemember to add your build path to your  .gitignore .  You should use a relative path instead of an absolute one, so that this option\nstill works for other developers.",
            "title": "build.path"
        },
        {
            "location": "/reference/module/modm-build/#openocdcfg",
            "text": "Path to a custom OpenOCD configuration file:  { String }  If you have a custom configuration file for your target, it will get included\nby the generated  modm/openocd.cfg .  This is useful for not having to duplicate your config if you have several\nprojects using the same target (like small bring-up and test projects).   Do not execute commands by default  When providing your own config file, wrap your specific commands into functions\nand do not execute them by default. A stray  init  or similar in your script\nwill mess with modm's ability to program and debug a device correctly.",
            "title": "openocd.cfg"
        },
        {
            "location": "/reference/module/modm-build/#dependencies",
            "text": "modm:build     modm_build   modm:  build     modm_build_cmake    modm:  build:  cmake       modm_build_cmake->modm_build       modm_build_scons    modm:  build:  scons       modm_build_scons->modm_build",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-build-cmake/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:build:cmake: CMake Build Script Generator\n\u00b6\n\n\nCMake\n is a widely used build tool supported by almost every IDE.\n\n\nThis module generates two files:\n\n\n\n\na top-level \nCMakeLists.txt\n: configures CMake to build modm and your\n  application.\n\n\na top-level \nMakefile\n: provides a convenience wrapper for calling CMake from\n  the command line.\n\n\n\n\nThis module is intended to be used for integration with IDEs that natively only\nsupport CMake. It therefore only provides the bare minimum of features and\ncan only be used to compile for ARM Cortex-M targets.\n\n\nThe \nmodm:build:scons\n module is the preferred build system for modm.\n\n\nMake Methods\n\u00b6\n\n\nThe \nMakefile\n wrapper provides these convenience methods.\n\n\nmake cmake\n\u00b6\n\n\nGenerates the CMake build folders and initializes the build system.\n\n\n $ make cmake\n    ...\n-- Project : blink_cmake\n-- Platform: stm32\n-- Compiler: gcc\n-- Part    : stm32f103c8t\n-- Family  : f1\n-- Core    : cortex-m3\n-- Path    : build/{project.name}\n-- Configuring done\n-- Generating done\n-- Build files have been written to: build/{project.name}/cmake-build-release\n    ...\n-- Build files have been written to: build/{project.name}/cmake-build-debug\n\n\n\n\n\n\nYou must call this once before you can build!\n\n\nIf you forget to call this first, the build will fail with this error message:\n\n\n $ make build-release\nError: build/cmake-build-release is not a directory\nmake: *** [build-release] Error 1\n\n\n\n\n\n\nmake build-release\n\u00b6\n\n\nmake build-debug\n\u00b6\n\n\nCompiles your application into an executable using the release or debug profile.\n\n\n $ make build-release\nScanning dependencies of target blink_cmake\n[  3%] Building C object CMakeFiles/blink_cmake.dir/modm/ext/cmsis/device/peripherals.c.o\n[  7%] Building CXX object CMakeFiles/blink_cmake.dir/modm/src/modm/architecture/driver/atomic/flag.cpp.o\n[ 19%] Building CXX object CMakeFiles/blink_cmake.dir/modm/src/modm/board/board.cpp.o\n    ...\n[ 96%] Building CXX object CMakeFiles/blink_cmake.dir/main.cpp.o\n[100%] Linking CXX executable blink_cmake.elf\n   text    data     bss     dec     hex filename\n   1596      52   20468   22116    5664 blink_cmake.elf\n[100%] Built target blink_cmake.bin\n[100%] Built target blink_cmake.hex\n[100%] Built target blink_cmake.lss\n\n\n\n\nmake upload-release\n\u00b6\n\n\nmake upload-debug\n\u00b6\n\n\nWrites the executable onto your target via OpenOCD.\nThis is a convenience wrapper around the programming options and methods\ndefined in the \nmodm:build\n module.\n\n\n $ make upload-release\n[100%] Built target blink_cmake\n[100%] Built target blink_cmake.bin\n[100%] Built target blink_cmake.hex\n[100%] Built target blink_cmake.lss\nOpen On-Chip Debugger 0.10.0\n    ...\nInfo : using stlink api v2\nInfo : Target voltage: 3.171034\nInfo : stm32f1x.cpu: hardware has 6 breakpoints, 4 watchpoints\n    ...\n** Programming Started **\nauto erase enabled\nInfo : device id = 0x20036410\nInfo : flash size = 64kbytes\n    ...\nwrote 2048 bytes from file build/cmake-build-release/blink_cmake.elf in 0.187893s (10.644 KiB/s)\n** Programming Finished **\n** Verify Started **\nverified 1652 bytes in 0.104584s (15.426 KiB/s)\n** Verified OK **\nshutdown command invoked\n\n\n\n\nmake gdb\n\u00b6\n\n\nmake gdb-release\n\u00b6\n\n\nLaunches GDB with the debug or release executable.\nThis is just a convenience wrapper for the debug functionality defined in the\n\nmodm:build\n module.\n\n\nOpenOCD must already be running in the background\n. Launch it by manually\ncalling it in another terminal:\n\n\nopenocd -f modm/openocd.cfg\n\n\n\n\nmake clean\n\u00b6\n\n\nRemoves the CMake build artifacts.\n\n\nmake cleanall\n\u00b6\n\n\nRemoves the entire build folders. You must then first call \nmake cmake\n before\nbeing able to build again\n\n\nOptions\n\u00b6\n\n\ninclude_makefile\n\u00b6\n\n\nGenerate a wrapper Makefile: \nTrue\n \u2208 \n{ True, False }\n\n\n\n\nThis overwrites any top-level \nMakefile\n file!\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:build:cmake\n\n\n\n\n\n\n\n\nmodm_build_cmake\n\n\n\n\nmodm:\n\n\nbuild:\n\n\ncmake\n\n\n\n\n\n\n\n\nmodm_build\n\n\n\n\n\n\nmodm:\n\n\nbuild\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_build_cmake->modm_build",
            "title": "modm:build:cmake"
        },
        {
            "location": "/reference/module/modm-build-cmake/#modmbuildcmake-cmake-build-script-generator",
            "text": "CMake  is a widely used build tool supported by almost every IDE.  This module generates two files:   a top-level  CMakeLists.txt : configures CMake to build modm and your\n  application.  a top-level  Makefile : provides a convenience wrapper for calling CMake from\n  the command line.   This module is intended to be used for integration with IDEs that natively only\nsupport CMake. It therefore only provides the bare minimum of features and\ncan only be used to compile for ARM Cortex-M targets.  The  modm:build:scons  module is the preferred build system for modm.",
            "title": "modm:build:cmake: CMake Build Script Generator"
        },
        {
            "location": "/reference/module/modm-build-cmake/#make-methods",
            "text": "The  Makefile  wrapper provides these convenience methods.",
            "title": "Make Methods"
        },
        {
            "location": "/reference/module/modm-build-cmake/#make-cmake",
            "text": "Generates the CMake build folders and initializes the build system.   $ make cmake\n    ...\n-- Project : blink_cmake\n-- Platform: stm32\n-- Compiler: gcc\n-- Part    : stm32f103c8t\n-- Family  : f1\n-- Core    : cortex-m3\n-- Path    : build/{project.name}\n-- Configuring done\n-- Generating done\n-- Build files have been written to: build/{project.name}/cmake-build-release\n    ...\n-- Build files have been written to: build/{project.name}/cmake-build-debug   You must call this once before you can build!  If you forget to call this first, the build will fail with this error message:   $ make build-release\nError: build/cmake-build-release is not a directory\nmake: *** [build-release] Error 1",
            "title": "make cmake"
        },
        {
            "location": "/reference/module/modm-build-cmake/#make-build-release",
            "text": "",
            "title": "make build-release"
        },
        {
            "location": "/reference/module/modm-build-cmake/#make-build-debug",
            "text": "Compiles your application into an executable using the release or debug profile.   $ make build-release\nScanning dependencies of target blink_cmake\n[  3%] Building C object CMakeFiles/blink_cmake.dir/modm/ext/cmsis/device/peripherals.c.o\n[  7%] Building CXX object CMakeFiles/blink_cmake.dir/modm/src/modm/architecture/driver/atomic/flag.cpp.o\n[ 19%] Building CXX object CMakeFiles/blink_cmake.dir/modm/src/modm/board/board.cpp.o\n    ...\n[ 96%] Building CXX object CMakeFiles/blink_cmake.dir/main.cpp.o\n[100%] Linking CXX executable blink_cmake.elf\n   text    data     bss     dec     hex filename\n   1596      52   20468   22116    5664 blink_cmake.elf\n[100%] Built target blink_cmake.bin\n[100%] Built target blink_cmake.hex\n[100%] Built target blink_cmake.lss",
            "title": "make build-debug"
        },
        {
            "location": "/reference/module/modm-build-cmake/#make-upload-release",
            "text": "",
            "title": "make upload-release"
        },
        {
            "location": "/reference/module/modm-build-cmake/#make-upload-debug",
            "text": "Writes the executable onto your target via OpenOCD.\nThis is a convenience wrapper around the programming options and methods\ndefined in the  modm:build  module.   $ make upload-release\n[100%] Built target blink_cmake\n[100%] Built target blink_cmake.bin\n[100%] Built target blink_cmake.hex\n[100%] Built target blink_cmake.lss\nOpen On-Chip Debugger 0.10.0\n    ...\nInfo : using stlink api v2\nInfo : Target voltage: 3.171034\nInfo : stm32f1x.cpu: hardware has 6 breakpoints, 4 watchpoints\n    ...\n** Programming Started **\nauto erase enabled\nInfo : device id = 0x20036410\nInfo : flash size = 64kbytes\n    ...\nwrote 2048 bytes from file build/cmake-build-release/blink_cmake.elf in 0.187893s (10.644 KiB/s)\n** Programming Finished **\n** Verify Started **\nverified 1652 bytes in 0.104584s (15.426 KiB/s)\n** Verified OK **\nshutdown command invoked",
            "title": "make upload-debug"
        },
        {
            "location": "/reference/module/modm-build-cmake/#make-gdb",
            "text": "",
            "title": "make gdb"
        },
        {
            "location": "/reference/module/modm-build-cmake/#make-gdb-release",
            "text": "Launches GDB with the debug or release executable.\nThis is just a convenience wrapper for the debug functionality defined in the modm:build  module.  OpenOCD must already be running in the background . Launch it by manually\ncalling it in another terminal:  openocd -f modm/openocd.cfg",
            "title": "make gdb-release"
        },
        {
            "location": "/reference/module/modm-build-cmake/#make-clean",
            "text": "Removes the CMake build artifacts.",
            "title": "make clean"
        },
        {
            "location": "/reference/module/modm-build-cmake/#make-cleanall",
            "text": "Removes the entire build folders. You must then first call  make cmake  before\nbeing able to build again",
            "title": "make cleanall"
        },
        {
            "location": "/reference/module/modm-build-cmake/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-build-cmake/#include_makefile",
            "text": "Generate a wrapper Makefile:  True  \u2208  { True, False }   This overwrites any top-level  Makefile  file!",
            "title": "include_makefile"
        },
        {
            "location": "/reference/module/modm-build-cmake/#dependencies",
            "text": "modm:build:cmake     modm_build_cmake   modm:  build:  cmake     modm_build    modm:  build       modm_build_cmake->modm_build",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-build-scons/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:build:scons: SCons Build Script Generator\n\u00b6\n\n\nSCons\n is a software construction build system written in Python.\nFor a better embedded experience, we've extended it with a custom build tools\n\nby the DLR\n as well as our own modm-specific build tools.\n\n\nThis module generates two files:\n\n\n\n\na \nmodm/SConscript\n file: configures all required SCons tools with\n  the right settings (also using information from the \nmodm:build\n module) to\n  compile the modm library.\n\n\na top-level \nSConstruct\n file: configures additional, optional tools and sets\n  up all the relevant SCons functions for your target.\n\n\n\n\nThe \nSConscript\n file is self contained and does not depend on anything outside of\nthe \nmodm/\n directory. This allows it to be combined with \nSConscript\n of other\nprojects without clashing.\n\n\nIn fact, if you look at your generated \nSConstruct\n file, you'll notice that\nit doesn't contain a lot of logic or specific data, it is only meant for calling\nthe right SCons tool with the right arguments.\n\n\nWe do not intend to serve every possible use-case with this module.\n\nIf you need something special, write your own SConstruct file, maybe\nstarting by modifying ours.\n\nRemember to set \nmodm:build:scons:include_sconstruct\n to \nFalse\n, so that your\ncustom \nSConstruct\n does not get overwritten.\n\n\nSCons Methods\n\u00b6\n\n\nThis module generates these SCons methods depending on the target.\n\n\nscons\n\u00b6\n\n\nDefaults to \nscons build\n.\n\n\nYou can add these arguments to any of the scons commands:\n\n\n\n\nverbose=1\n: gives a more verbose output, so you can, for example, check what\n  options the compiler is called with.\n\n\nprofile=release\n: Compile project with the release profile options (default).\n\n\nprofile=debug\n: Compile project with the debug profile options.\n\n\n\n\nFor a description of the \nrelease\n and \ndebug\n profiles, see the \nmodm:build\n\nmodule documentation.\n\n\n\n\nDebug Profile\n\n\nWhen working with the debug profile, make sure to add \nprofile=debug\n to all\ncommands, especially \nscons program profile=debug\n and \n\nscons gdb profile=debug\n!\n\n\n\n\nscons build\n\u00b6\n\n\nCompiles your application into an executable.\n\n\nExample for a STM32 target:\n\n\n $ scons build\nCompiling C++\u00b7\u00b7 build/release/main.o\nCompiling C\u00b7\u00b7\u00b7\u00b7 build/release/modm/ext/tlsf/tlsf.o\n    ...\nCompiling C++\u00b7\u00b7 build/release/modm/src/modm/ui/display/virtual_graphic_display.o\nCompiling C++\u00b7\u00b7 build/release/modm/src/modm/utils/dummy.o\nCreate Library\u00b7 build/release/modm/libmodm.a\nIndexing\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 build/release/modm/libmodm.a\nLinking\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 build/release/game_of_life.elf\n\n\n\n\nscons size\n\u00b6\n\n\nDisplays the static Flash and RAM consumption of your target.\n(* \nonly STM32 targets\n)\n\n\nExample for a STM32 target with 16MB external heap:\n\n\n $ scons size\nMemory usage:.. build/release/game_of_life.elf\n\nProgram:  12.8 KiB (0.6% used)\n(.data + .fastcode + .fastdata + .hardware_init + .reset + .rodata +\n .table.copy.extern + .table.copy.intern + .table.section_heap +\n .table.zero.intern + .text)\n\nData:      5.8 KiB (1.5% used) = 2936 B static (0.7%) + 3040 B stack (0.8%)\n(.bss + .data + .fastdata + .stack)\n\nHeap:     16.4 MiB (4321.2% available)\n(.heap0 + .heap1 + .heap2 + .heap3 + .heap5 + .heap_extern)\n\n\n\n\nscons program\n\u00b6\n\n\nWrites the executable onto your target via Avrdude or OpenOCD.\nThis is a convenience wrapper around the programming options and methods\ndefined in the \nmodm:build\n module.\n(* \nonly AVR and STM32 targets\n)\n\n\nExample for a STM32 target:\n\n\n $ scons program\n.----OpenOCD--- build/release/game_of_life.elf\n'-------------> stm32f469nih\nOpen On-Chip Debugger 0.10.0\n    ...\nInfo : using stlink api v2\nInfo : Target voltage: 3.259396\nInfo : stm32f4x.cpu: hardware has 6 breakpoints, 4 watchpoints\n    ...\n** Programming Started **\nauto erase enabled\nInfo : device id = 0x10006434\nInfo : flash size = 2048kbytes\nInfo : Dual Bank 2048 kiB STM32F42x/43x/469/479 found\n    ...\nwrote 16384 bytes from file build/release/game_of_life.elf in 0.589736s (27.131 KiB/s)\n** Programming Finished **\n** Verify Started **\nverified 13064 bytes in 0.296308s (43.056 KiB/s)\n** Verified OK **\nshutdown command invoked\n\n\n\n\nscons run\n\u00b6\n\n\nExecutes your project on your computer.\n(* \nonly Hosted targets\n)\n\n\nscons gdb\n\u00b6\n\n\nLaunches OpenOCD in the background, then launches GDB in foreground with the\ncorrect executable. When GDB exits, it stops the OpenOCD process.\n(* \nonly STM32 targets\n)\n\n\nThis is just a convenience wrapper for the debug functionality defined in the\n\nmodm:build\n module.\n\n\n\n\nChoose the correct profile\n\n\nWhen debugging, make sure to select the correct compilation profile.\nThe firmware and the executable given to GDB have to be the some or you'll\nsee GDB translate the program counter to the wrong code locations.\nWhen you suspect a bug in your firmware, consider that it was most likely\ncompiled with the release profile, since that's the default.\nFirst try to \nscons gdb profile=release\n, and if that doesn't help, compile\nand \nscons program profile=debug\n and try \nscons gdb profile=debug\n again.\n\n\n\n\nscons symbols\n\u00b6\n\n\nDumps the symbol table for your executable.\n\n\n $ scons symbols\nShow symbols for 'build/release/game_of_life.elf':\n536871656 00000001 b (anonymous namespace)::nextOperation\n536871657 00000001 b (anonymous namespace)::checkNextOperation\n536871658 00000001 b (anonymous namespace)::error\n536871444 00000001 b read_touch()::initialized\n    ...\n134228236 00000668 T I2C1_EV_IRQHandler\n134224924 00001136 T otm8009a_init(unsigned char)\n134221192 00001378 t _GLOBAL__sub_I_p\n536871782 00002054 b (anonymous namespace)::txBuffer\n\n\n\n\nscons listing\n\u00b6\n\n\nDecompiles your executable into an annotated assembly listing.\nThis is very useful for checking and learning how the compiler translates C++\ninto assembly instructions:\n\n\n $ scons listing\nExt. Listing\u00b7\u00b7\u00b7 build/release/game_of_life.lss\n $ less build/release/game_of_life.lss\n    ...\nDisassembly of section .text:\n    ...\n08000d74 <main>:\nmain():\n./main.cpp:315\n\nint\nmain()\n{\n 8000d74:   b508        push    {r3, lr}\n    Board::initialize();\n 8000d76:   f7ff fcc9   bl  800070c <_ZN5Board10initializeEv>\n    Board::initializeDisplay();\n 8000d7a:   f000 fd91   bl  80018a0 <_ZN5Board17initializeDisplayEv>\n    Board::initializeTouchscreen();\n 8000d7e:   f7ff fc55   bl  800062c <_ZN5Board21initializeTouchscreenEv>\n    game_of_life();\n 8000d82:   f7ff feff   bl  8000b84 <_Z12game_of_lifev>\n    ...\n\n\n\n\nscons bin\n\u00b6\n\n\nCreates a binary file of your executable.\n\n\n $ scons bin\nBinary File\u00b7\u00b7\u00b7\u00b7 build/release/game_of_life.bin\n\n\n\n\nscons -c\n\u00b6\n\n\nCleans the build artifacts.\n\n\n $ scons -c\nRemoved build/release/main.o\nRemoved build/release/modm/ext/tlsf/tlsf.o\n\nRemoved build/release/modm/src/modm/ui/display/virtual_graphic_display.o\nRemoved build/release/modm/src/modm/utils/dummy.o\nRemoved build/release/modm/libmodm.a\nRemoved build/release/game_of_life.elf\nRemoved build/release/game_of_life.lss\n\n\n\n\nscons cmakewrapper\n\u00b6\n\n\nGenerates a \nCMakeLists.txt\n file that wraps the scons commands so\nthat the project can be imported into IDE with CMake support, like CLion.\n\n\n\n\nConsider this an unstable feature\n\n\n\n\nscons qtcreator\n\u00b6\n\n\nGenerates several files so that the project can be imported into Qt Creator via\nthe \n.creator\n file importer. Note, that no compiliation or debugging features\nare supported, this is only meant for using the IDE as an editor.\n\n\n\n\nConsider this an unstable feature\n\n\n\n\nXPCC Generator Tool\n\u00b6\n\n\nThe \nmodm:communication:xpcc:generator\n module contains the Python tools to \ntranslate the XPCC XML declarations into various language implementations.\nThis module contains a SCons wrapper tool, that understands the XML dependencies\nand automatically updates the generated files when it becomes necessary.\n\n\nThe wrapper tool is automatically used when the generator module is detected,\nand it's options are evaluated for the wrapper as follows:\n\n\nenv\n.\nXpccCommunication\n(\n\n    \nxmlfile\n=\noptions\n[\n\"::xpcc:generator:source\"\n],\n\n    \ncontainer\n=\noptions\n[\n\"::xpcc:generator:container\"\n],\n\n    \npath\n=\noptions\n[\n\"::xpcc:generator:path\"\n],\n\n    \nnamespace\n=\noptions\n[\n\"::xpcc:generator:namespace\"\n]\n\n\n)\n\n\n\n\n\nThe generated files are available as a top-level \n#include <identifiers.hpp>\n.\n\n\nInformation Tool\n\u00b6\n\n\nOur \ninfo\n SCons tool generates a set of header files containing preprocessor\ndefines with the repository state.\n\n\nA call to \nenv.InfoGit(with_status={True, False})\n will generate a \n<info_git.h>\n\nheader file and add these two defines to the command line CPP options:\n\n\n\n\nMODM_GIT_INFO\n\n\nMODM_GIT_STATUS\n: defined only if called with \nwith_state=True\n.\n\n\n\n\nYou can enable this by setting the \nmodm:build:scons:info.git\n option.\n\n\nA call to \nenv.InfoBuild()\n will generate a \n<info_build.h>\n header file and add\nthis define to the command line CPP options:\n\n\n\n\nMODM_BUILD_INFO\n\n\n\n\nYou can enable this by setting the \nmodm:build:scons:info.build\n option.\n\n\n\n\nOnly include in source files\n\n\nSince this information may change often, you must only \n#include\n the\ngenerated header files in source files, not in header files. Otherwise\n\nyou risk a complete rebuild of your project every time this information\nchanges\n! If you need to use the information in a header file, expose it\nas a \nextern const char *info_git_{name};\n and initialize it with\nthe defines in a separate source file. Then only this source file needs to\nbe rebuild and the project relinked, which is significantly faster:\n\n\n// In header file\n\n\nextern\n \nconst\n \nchar\n \n*\ninfo_git_sha\n;\n\n\n// In source file\n\n\nconst\n \nchar\n \ninfo_git_sha\n[]\n \n=\n \nMODM_GIT_SHA\n;\n\n\n\n\n\n\n\n\n\nRespect developers privacy\n\n\nThis information is placed into the firmware in \ncleartext\n, so it will\nbe trivial to extract from a memory dump. Consider this information public\nas soon as it is uploaded to your target. Make sure you only use the\ninformation you absolutely need!\n\n\n\n\nGit Information\n\u00b6\n\n\nThese are the values defines as strings in \n<info_git.h>\n:\n\n\n\n\nMODM_GIT_SHA\n: commit hash: \n%H\n.\n\n\nMODM_GIT_SHA_ABBR\n: short commit hash: \n%h\n.\n\n\nMODM_GIT_SUBJECT\n: commit subject as text: \n%s\n.\n\n\nMODM_GIT_AUTHOR\n: author name: \n%an\n.\n\n\nMODM_GIT_AUTHOR_EMAIL\n: author email: \n%ae\n.\n\n\nMODM_GIT_AUTHOR_DATE\n: authoring date: \n%ad\n.\n\n\nMODM_GIT_AUTHOR_DATE_TIMESTAMP\n: authoring date as Unix timestamp: \n%at\n.\n\n\nMODM_GIT_COMMITTER\n: committer name: \n%cn\n.\n\n\nMODM_GIT_COMMITTER_EMAIL\n: committer email: \n%ce\n.\n\n\nMODM_GIT_COMMITTER_DATE\n: committer date: \n%cd\n.\n\n\nMODM_GIT_COMMITTER_DATE_TIMESTAMP\n: committer das as Unix timestamp: \n%ct\n.\n\n\nMODM_GIT_CONFIG_USER_NAME\n: local user name: \nuser.name\n.\n\n\nMODM_GIT_CONFIG_USER_EMAIL\n: local user email: \nuser.email\n.\n\n\n\n\nIf called \nwith_status=True\n, this information is added as well: \n\n\n\n\nMODM_GIT_MODIFIED\n: number of modified files: \nM\n.\n\n\nMODM_GIT_ADDED\n: number of added files: \nA\n.\n\n\nMODM_GIT_DELETED\n: number of deleted files: \nD\n.\n\n\nMODM_GIT_RENAMED\n: number of renamed files: \nR\n.\n\n\nMODM_GIT_COPIED\n: number of copied files: \nC\n.\n\n\nMODM_GIT_UPDATED_NOT_MERGED\n: number of updated, but not merged files: \nU\n.\n\n\nMODM_GIT_UNTRACKED\n: number of untracked files: \n?\n.\n\n\n\n\nThis is the output of the \nexample/linux/git\n project showing an unclean\nrepository state with uncommitted changes. This can give you a few hints as to\nwhere a firmware came from and help you pinpoint the source of a bug or feature.\n\n\nInfo:    Local Git User:\nInfo:    Name:  Name Surname\nInfo:    Email: name.surname@provider.com\nInfo:    Last Commit:\nInfo:    SHA:             1b5a9a642857182161a615039c92907e59881614\nInfo:    Abbreviated SHA: 1b5a9a642\nInfo:    Subject:         wip\nInfo:\nInfo:    Author:\nInfo:    Name:      Name Surname\nInfo:    Email:     name.surname@provider.com\nInfo:    Date:      Tue Jul 17 22:23:20 2018 +0200\nInfo:    Timestamp: 1531859000\nInfo:\nInfo:    Committer:\nInfo:    Name:      Name Surname\nInfo:    Email:     name.surname@provider.com\nInfo:    Date:      Tue Jul 17 22:23:20 2018 +0200\nInfo:    Timestamp: 1531859000\nInfo:\nInfo:    File Status:\nInfo:    Modified:  10\nInfo:    Added:     0\nInfo:    Deleted:   0\nInfo:    Renamed:   0\nInfo:    Copied:    0\nInfo:    Untracked: 6\n\n\n\n\nBuild Information\n\u00b6\n\n\nThese are the values defines as strings in \n<info_build.h>\n:\n\n\n\n\nMODM_BUILD_PROJECT_NAME\n: as defined in the \nmodm:build:project.name\n option.\n\n\nMODM_BUILD_MACHINE\n: machine information.\n\n\nMODM_BUILD_USER\n: user information.\n\n\nMODM_BUILD_OS\n: OS version string (best effort, may not be useful!).\n\n\nMODM_BUILD_COMPILER\n: compiler information.\n\n\n\n\nThe output of the \nexamples/linux/build_info\n running on macOS:\n\n\nInfo:    Project:  build_info\nInfo:    Machine:  name.local\nInfo:    User:     user\nInfo:    Os:       Mac 10.12.6 (x86_64)\nInfo:    Compiler: g++-8 (Homebrew GCC 8.1.0) 8.1.0\n\n\n\n\nBitmap Tool\n\u00b6\n\n\nIf the \nmodm:build:scons:image.source\n is defined as a path, it'll be searched\nfor \n.pbm\n files to convert into C++ data files using the \nbitmap\n tool:\n\n\nsource\n,\n \nheader\n \n=\n \nenv\n.\nBitmap\n(\nbpm_file\n)\n\n\n\n\n\nSee the \nGraphicsDisplay::drawImage()\n method in the \nmodm:ui:display\n module\nfor how to use these generated files.\nThe directory is added to the include search paths, so the generated files\ncan be accessed as \n#include <image.hpp>\n.\n\n\nOptions\n\u00b6\n\n\ninclude_sconstruct\n\u00b6\n\n\nGenerate a SConstruct file: \nTrue\n \u2208 \n{ True, False }\n\n\n\n\nThis overwrites any top-level \nSConstruct\n file!\n\n\n\n\nimage.source\n\u00b6\n\n\nPath to directory containing .pbm files: \n{ String }\n\n\ninfo.git\n\u00b6\n\n\nGenerate git repository state information: \nDisabled\n \u2208 \n{ Disabled, Info, Info+Status }\n\n\n\n\nInfo\n: generates information about the last commit.\n\n\nInfo+Status\n: like \nInfo\n plus git file status.\n\n\n\n\ninfo.build\n\u00b6\n\n\nGenerate build state information: \nFalse\n \u2208 \n{ True, False }\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:build:scons\n\n\n\n\n\n\n\n\nmodm_build_scons\n\n\n\n\nmodm:\n\n\nbuild:\n\n\nscons\n\n\n\n\n\n\n\n\nmodm_build\n\n\n\n\n\n\nmodm:\n\n\nbuild\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_build_scons->modm_build",
            "title": "modm:build:scons"
        },
        {
            "location": "/reference/module/modm-build-scons/#modmbuildscons-scons-build-script-generator",
            "text": "SCons  is a software construction build system written in Python.\nFor a better embedded experience, we've extended it with a custom build tools by the DLR  as well as our own modm-specific build tools.  This module generates two files:   a  modm/SConscript  file: configures all required SCons tools with\n  the right settings (also using information from the  modm:build  module) to\n  compile the modm library.  a top-level  SConstruct  file: configures additional, optional tools and sets\n  up all the relevant SCons functions for your target.   The  SConscript  file is self contained and does not depend on anything outside of\nthe  modm/  directory. This allows it to be combined with  SConscript  of other\nprojects without clashing.  In fact, if you look at your generated  SConstruct  file, you'll notice that\nit doesn't contain a lot of logic or specific data, it is only meant for calling\nthe right SCons tool with the right arguments.  We do not intend to serve every possible use-case with this module. If you need something special, write your own SConstruct file, maybe\nstarting by modifying ours. \nRemember to set  modm:build:scons:include_sconstruct  to  False , so that your\ncustom  SConstruct  does not get overwritten.",
            "title": "modm:build:scons: SCons Build Script Generator"
        },
        {
            "location": "/reference/module/modm-build-scons/#scons-methods",
            "text": "This module generates these SCons methods depending on the target.",
            "title": "SCons Methods"
        },
        {
            "location": "/reference/module/modm-build-scons/#scons",
            "text": "Defaults to  scons build .  You can add these arguments to any of the scons commands:   verbose=1 : gives a more verbose output, so you can, for example, check what\n  options the compiler is called with.  profile=release : Compile project with the release profile options (default).  profile=debug : Compile project with the debug profile options.   For a description of the  release  and  debug  profiles, see the  modm:build \nmodule documentation.   Debug Profile  When working with the debug profile, make sure to add  profile=debug  to all\ncommands, especially  scons program profile=debug  and  scons gdb profile=debug !",
            "title": "scons"
        },
        {
            "location": "/reference/module/modm-build-scons/#scons-build",
            "text": "Compiles your application into an executable.  Example for a STM32 target:   $ scons build\nCompiling C++\u00b7\u00b7 build/release/main.o\nCompiling C\u00b7\u00b7\u00b7\u00b7 build/release/modm/ext/tlsf/tlsf.o\n    ...\nCompiling C++\u00b7\u00b7 build/release/modm/src/modm/ui/display/virtual_graphic_display.o\nCompiling C++\u00b7\u00b7 build/release/modm/src/modm/utils/dummy.o\nCreate Library\u00b7 build/release/modm/libmodm.a\nIndexing\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 build/release/modm/libmodm.a\nLinking\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 build/release/game_of_life.elf",
            "title": "scons build"
        },
        {
            "location": "/reference/module/modm-build-scons/#scons-size",
            "text": "Displays the static Flash and RAM consumption of your target.\n(*  only STM32 targets )  Example for a STM32 target with 16MB external heap:   $ scons size\nMemory usage:.. build/release/game_of_life.elf\n\nProgram:  12.8 KiB (0.6% used)\n(.data + .fastcode + .fastdata + .hardware_init + .reset + .rodata +\n .table.copy.extern + .table.copy.intern + .table.section_heap +\n .table.zero.intern + .text)\n\nData:      5.8 KiB (1.5% used) = 2936 B static (0.7%) + 3040 B stack (0.8%)\n(.bss + .data + .fastdata + .stack)\n\nHeap:     16.4 MiB (4321.2% available)\n(.heap0 + .heap1 + .heap2 + .heap3 + .heap5 + .heap_extern)",
            "title": "scons size"
        },
        {
            "location": "/reference/module/modm-build-scons/#scons-program",
            "text": "Writes the executable onto your target via Avrdude or OpenOCD.\nThis is a convenience wrapper around the programming options and methods\ndefined in the  modm:build  module.\n(*  only AVR and STM32 targets )  Example for a STM32 target:   $ scons program\n.----OpenOCD--- build/release/game_of_life.elf\n'-------------> stm32f469nih\nOpen On-Chip Debugger 0.10.0\n    ...\nInfo : using stlink api v2\nInfo : Target voltage: 3.259396\nInfo : stm32f4x.cpu: hardware has 6 breakpoints, 4 watchpoints\n    ...\n** Programming Started **\nauto erase enabled\nInfo : device id = 0x10006434\nInfo : flash size = 2048kbytes\nInfo : Dual Bank 2048 kiB STM32F42x/43x/469/479 found\n    ...\nwrote 16384 bytes from file build/release/game_of_life.elf in 0.589736s (27.131 KiB/s)\n** Programming Finished **\n** Verify Started **\nverified 13064 bytes in 0.296308s (43.056 KiB/s)\n** Verified OK **\nshutdown command invoked",
            "title": "scons program"
        },
        {
            "location": "/reference/module/modm-build-scons/#scons-run",
            "text": "Executes your project on your computer.\n(*  only Hosted targets )",
            "title": "scons run"
        },
        {
            "location": "/reference/module/modm-build-scons/#scons-gdb",
            "text": "Launches OpenOCD in the background, then launches GDB in foreground with the\ncorrect executable. When GDB exits, it stops the OpenOCD process.\n(*  only STM32 targets )  This is just a convenience wrapper for the debug functionality defined in the modm:build  module.   Choose the correct profile  When debugging, make sure to select the correct compilation profile.\nThe firmware and the executable given to GDB have to be the some or you'll\nsee GDB translate the program counter to the wrong code locations.\nWhen you suspect a bug in your firmware, consider that it was most likely\ncompiled with the release profile, since that's the default.\nFirst try to  scons gdb profile=release , and if that doesn't help, compile\nand  scons program profile=debug  and try  scons gdb profile=debug  again.",
            "title": "scons gdb"
        },
        {
            "location": "/reference/module/modm-build-scons/#scons-symbols",
            "text": "Dumps the symbol table for your executable.   $ scons symbols\nShow symbols for 'build/release/game_of_life.elf':\n536871656 00000001 b (anonymous namespace)::nextOperation\n536871657 00000001 b (anonymous namespace)::checkNextOperation\n536871658 00000001 b (anonymous namespace)::error\n536871444 00000001 b read_touch()::initialized\n    ...\n134228236 00000668 T I2C1_EV_IRQHandler\n134224924 00001136 T otm8009a_init(unsigned char)\n134221192 00001378 t _GLOBAL__sub_I_p\n536871782 00002054 b (anonymous namespace)::txBuffer",
            "title": "scons symbols"
        },
        {
            "location": "/reference/module/modm-build-scons/#scons-listing",
            "text": "Decompiles your executable into an annotated assembly listing.\nThis is very useful for checking and learning how the compiler translates C++\ninto assembly instructions:   $ scons listing\nExt. Listing\u00b7\u00b7\u00b7 build/release/game_of_life.lss\n $ less build/release/game_of_life.lss\n    ...\nDisassembly of section .text:\n    ...\n08000d74 <main>:\nmain():\n./main.cpp:315\n\nint\nmain()\n{\n 8000d74:   b508        push    {r3, lr}\n    Board::initialize();\n 8000d76:   f7ff fcc9   bl  800070c <_ZN5Board10initializeEv>\n    Board::initializeDisplay();\n 8000d7a:   f000 fd91   bl  80018a0 <_ZN5Board17initializeDisplayEv>\n    Board::initializeTouchscreen();\n 8000d7e:   f7ff fc55   bl  800062c <_ZN5Board21initializeTouchscreenEv>\n    game_of_life();\n 8000d82:   f7ff feff   bl  8000b84 <_Z12game_of_lifev>\n    ...",
            "title": "scons listing"
        },
        {
            "location": "/reference/module/modm-build-scons/#scons-bin",
            "text": "Creates a binary file of your executable.   $ scons bin\nBinary File\u00b7\u00b7\u00b7\u00b7 build/release/game_of_life.bin",
            "title": "scons bin"
        },
        {
            "location": "/reference/module/modm-build-scons/#scons-c",
            "text": "Cleans the build artifacts.   $ scons -c\nRemoved build/release/main.o\nRemoved build/release/modm/ext/tlsf/tlsf.o\n\nRemoved build/release/modm/src/modm/ui/display/virtual_graphic_display.o\nRemoved build/release/modm/src/modm/utils/dummy.o\nRemoved build/release/modm/libmodm.a\nRemoved build/release/game_of_life.elf\nRemoved build/release/game_of_life.lss",
            "title": "scons -c"
        },
        {
            "location": "/reference/module/modm-build-scons/#scons-cmakewrapper",
            "text": "Generates a  CMakeLists.txt  file that wraps the scons commands so\nthat the project can be imported into IDE with CMake support, like CLion.   Consider this an unstable feature",
            "title": "scons cmakewrapper"
        },
        {
            "location": "/reference/module/modm-build-scons/#scons-qtcreator",
            "text": "Generates several files so that the project can be imported into Qt Creator via\nthe  .creator  file importer. Note, that no compiliation or debugging features\nare supported, this is only meant for using the IDE as an editor.   Consider this an unstable feature",
            "title": "scons qtcreator"
        },
        {
            "location": "/reference/module/modm-build-scons/#xpcc-generator-tool",
            "text": "The  modm:communication:xpcc:generator  module contains the Python tools to \ntranslate the XPCC XML declarations into various language implementations.\nThis module contains a SCons wrapper tool, that understands the XML dependencies\nand automatically updates the generated files when it becomes necessary.  The wrapper tool is automatically used when the generator module is detected,\nand it's options are evaluated for the wrapper as follows:  env . XpccCommunication ( \n     xmlfile = options [ \"::xpcc:generator:source\" ], \n     container = options [ \"::xpcc:generator:container\" ], \n     path = options [ \"::xpcc:generator:path\" ], \n     namespace = options [ \"::xpcc:generator:namespace\" ]  )   The generated files are available as a top-level  #include <identifiers.hpp> .",
            "title": "XPCC Generator Tool"
        },
        {
            "location": "/reference/module/modm-build-scons/#information-tool",
            "text": "Our  info  SCons tool generates a set of header files containing preprocessor\ndefines with the repository state.  A call to  env.InfoGit(with_status={True, False})  will generate a  <info_git.h> \nheader file and add these two defines to the command line CPP options:   MODM_GIT_INFO  MODM_GIT_STATUS : defined only if called with  with_state=True .   You can enable this by setting the  modm:build:scons:info.git  option.  A call to  env.InfoBuild()  will generate a  <info_build.h>  header file and add\nthis define to the command line CPP options:   MODM_BUILD_INFO   You can enable this by setting the  modm:build:scons:info.build  option.   Only include in source files  Since this information may change often, you must only  #include  the\ngenerated header files in source files, not in header files. Otherwise you risk a complete rebuild of your project every time this information\nchanges ! If you need to use the information in a header file, expose it\nas a  extern const char *info_git_{name};  and initialize it with\nthe defines in a separate source file. Then only this source file needs to\nbe rebuild and the project relinked, which is significantly faster:  // In header file  extern   const   char   * info_git_sha ;  // In source file  const   char   info_git_sha []   =   MODM_GIT_SHA ;     Respect developers privacy  This information is placed into the firmware in  cleartext , so it will\nbe trivial to extract from a memory dump. Consider this information public\nas soon as it is uploaded to your target. Make sure you only use the\ninformation you absolutely need!",
            "title": "Information Tool"
        },
        {
            "location": "/reference/module/modm-build-scons/#git-information",
            "text": "These are the values defines as strings in  <info_git.h> :   MODM_GIT_SHA : commit hash:  %H .  MODM_GIT_SHA_ABBR : short commit hash:  %h .  MODM_GIT_SUBJECT : commit subject as text:  %s .  MODM_GIT_AUTHOR : author name:  %an .  MODM_GIT_AUTHOR_EMAIL : author email:  %ae .  MODM_GIT_AUTHOR_DATE : authoring date:  %ad .  MODM_GIT_AUTHOR_DATE_TIMESTAMP : authoring date as Unix timestamp:  %at .  MODM_GIT_COMMITTER : committer name:  %cn .  MODM_GIT_COMMITTER_EMAIL : committer email:  %ce .  MODM_GIT_COMMITTER_DATE : committer date:  %cd .  MODM_GIT_COMMITTER_DATE_TIMESTAMP : committer das as Unix timestamp:  %ct .  MODM_GIT_CONFIG_USER_NAME : local user name:  user.name .  MODM_GIT_CONFIG_USER_EMAIL : local user email:  user.email .   If called  with_status=True , this information is added as well:    MODM_GIT_MODIFIED : number of modified files:  M .  MODM_GIT_ADDED : number of added files:  A .  MODM_GIT_DELETED : number of deleted files:  D .  MODM_GIT_RENAMED : number of renamed files:  R .  MODM_GIT_COPIED : number of copied files:  C .  MODM_GIT_UPDATED_NOT_MERGED : number of updated, but not merged files:  U .  MODM_GIT_UNTRACKED : number of untracked files:  ? .   This is the output of the  example/linux/git  project showing an unclean\nrepository state with uncommitted changes. This can give you a few hints as to\nwhere a firmware came from and help you pinpoint the source of a bug or feature.  Info:    Local Git User:\nInfo:    Name:  Name Surname\nInfo:    Email: name.surname@provider.com\nInfo:    Last Commit:\nInfo:    SHA:             1b5a9a642857182161a615039c92907e59881614\nInfo:    Abbreviated SHA: 1b5a9a642\nInfo:    Subject:         wip\nInfo:\nInfo:    Author:\nInfo:    Name:      Name Surname\nInfo:    Email:     name.surname@provider.com\nInfo:    Date:      Tue Jul 17 22:23:20 2018 +0200\nInfo:    Timestamp: 1531859000\nInfo:\nInfo:    Committer:\nInfo:    Name:      Name Surname\nInfo:    Email:     name.surname@provider.com\nInfo:    Date:      Tue Jul 17 22:23:20 2018 +0200\nInfo:    Timestamp: 1531859000\nInfo:\nInfo:    File Status:\nInfo:    Modified:  10\nInfo:    Added:     0\nInfo:    Deleted:   0\nInfo:    Renamed:   0\nInfo:    Copied:    0\nInfo:    Untracked: 6",
            "title": "Git Information"
        },
        {
            "location": "/reference/module/modm-build-scons/#build-information",
            "text": "These are the values defines as strings in  <info_build.h> :   MODM_BUILD_PROJECT_NAME : as defined in the  modm:build:project.name  option.  MODM_BUILD_MACHINE : machine information.  MODM_BUILD_USER : user information.  MODM_BUILD_OS : OS version string (best effort, may not be useful!).  MODM_BUILD_COMPILER : compiler information.   The output of the  examples/linux/build_info  running on macOS:  Info:    Project:  build_info\nInfo:    Machine:  name.local\nInfo:    User:     user\nInfo:    Os:       Mac 10.12.6 (x86_64)\nInfo:    Compiler: g++-8 (Homebrew GCC 8.1.0) 8.1.0",
            "title": "Build Information"
        },
        {
            "location": "/reference/module/modm-build-scons/#bitmap-tool",
            "text": "If the  modm:build:scons:image.source  is defined as a path, it'll be searched\nfor  .pbm  files to convert into C++ data files using the  bitmap  tool:  source ,   header   =   env . Bitmap ( bpm_file )   See the  GraphicsDisplay::drawImage()  method in the  modm:ui:display  module\nfor how to use these generated files.\nThe directory is added to the include search paths, so the generated files\ncan be accessed as  #include <image.hpp> .",
            "title": "Bitmap Tool"
        },
        {
            "location": "/reference/module/modm-build-scons/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-build-scons/#include_sconstruct",
            "text": "Generate a SConstruct file:  True  \u2208  { True, False }   This overwrites any top-level  SConstruct  file!",
            "title": "include_sconstruct"
        },
        {
            "location": "/reference/module/modm-build-scons/#imagesource",
            "text": "Path to directory containing .pbm files:  { String }",
            "title": "image.source"
        },
        {
            "location": "/reference/module/modm-build-scons/#infogit",
            "text": "Generate git repository state information:  Disabled  \u2208  { Disabled, Info, Info+Status }   Info : generates information about the last commit.  Info+Status : like  Info  plus git file status.",
            "title": "info.git"
        },
        {
            "location": "/reference/module/modm-build-scons/#infobuild",
            "text": "Generate build state information:  False  \u2208  { True, False }",
            "title": "info.build"
        },
        {
            "location": "/reference/module/modm-build-scons/#dependencies",
            "text": "modm:build:scons     modm_build_scons   modm:  build:  scons     modm_build    modm:  build       modm_build_scons->modm_build",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-cmsis/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:cmsis: ARM CMSIS Support\n\u00b6\n\n\nThe \nCortex Microcontroller Software Interface Standard\n is a software\nstandard by ARM that defines a number of foundational interfaces for Cortex-M\nmicrocontrollers.\n\n\n\n\n\n\n\n\nWe use only use these parts of CMSIS:\n\n\n\n\nThe \nmodm:cmsis:core\n module provides access to the ARM Cortex-M peripherals\n  via CMSIS-CORE.\n\n\nThe \nmodm:cmsis:device\n module provides access to the peripherals of the\n  \nmodm:target\n devices via the vendor's CMSIS implementation.\n\n\nThe \nmodm:cmsis:dsp\n module provides a basic digital signal processing library\n  via CMSIS-DSP.\n\n\n\n\nContent\n\u00b6\n\n\n// Define\n\n\n#define STM32F469xx\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:cmsis\n\n\n\n\n\n\n\n\nmodm_cmsis\n\n\n\n\nmodm:\n\n\ncmsis\n\n\n\n\n\n\n\n\nmodm_cmsis_core\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_core->modm_cmsis\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device->modm_cmsis\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_dsp\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndsp\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_dsp->modm_cmsis",
            "title": "modm:cmsis"
        },
        {
            "location": "/reference/module/modm-cmsis/#modmcmsis-arm-cmsis-support",
            "text": "The  Cortex Microcontroller Software Interface Standard  is a software\nstandard by ARM that defines a number of foundational interfaces for Cortex-M\nmicrocontrollers.     We use only use these parts of CMSIS:   The  modm:cmsis:core  module provides access to the ARM Cortex-M peripherals\n  via CMSIS-CORE.  The  modm:cmsis:device  module provides access to the peripherals of the\n   modm:target  devices via the vendor's CMSIS implementation.  The  modm:cmsis:dsp  module provides a basic digital signal processing library\n  via CMSIS-DSP.",
            "title": "modm:cmsis: ARM CMSIS Support"
        },
        {
            "location": "/reference/module/modm-cmsis/#content",
            "text": "// Define  #define STM32F469xx",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-cmsis/#dependencies",
            "text": "modm:cmsis     modm_cmsis   modm:  cmsis     modm_cmsis_core    modm:  cmsis:  core       modm_cmsis_core->modm_cmsis       modm_cmsis_device    modm:  cmsis:  device       modm_cmsis_device->modm_cmsis       modm_cmsis_dsp    modm:  cmsis:  dsp       modm_cmsis_dsp->modm_cmsis",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-cmsis-core/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:cmsis:core: ARM CMSIS-CORE\n\u00b6\n\n\nThis module provides these files for accessing the ARM Cortex-M CPU and \nperipherals:\n\n\n\n\ncmsis_gcc.h\n: Contains the GCC-specific API.\n\n\ncore_cm{core}.h\n: Contains the core-specific API.\n\n\n\n\nPlease \nsee the API documentation\n for their content and how to use them.\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:cmsis:core\n\n\n\n\n\n\n\n\nmodm_cmsis_core\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ncore\n\n\n\n\n\n\n\n\nmodm_cmsis\n\n\n\n\n\n\nmodm:\n\n\ncmsis\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_core->modm_cmsis\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device->modm_cmsis_core",
            "title": "modm:cmsis:core"
        },
        {
            "location": "/reference/module/modm-cmsis-core/#modmcmsiscore-arm-cmsis-core",
            "text": "This module provides these files for accessing the ARM Cortex-M CPU and \nperipherals:   cmsis_gcc.h : Contains the GCC-specific API.  core_cm{core}.h : Contains the core-specific API.   Please  see the API documentation  for their content and how to use them.",
            "title": "modm:cmsis:core: ARM CMSIS-CORE"
        },
        {
            "location": "/reference/module/modm-cmsis-core/#dependencies",
            "text": "modm:cmsis:core     modm_cmsis_core   modm:  cmsis:  core     modm_cmsis    modm:  cmsis       modm_cmsis_core->modm_cmsis       modm_cmsis_device    modm:  cmsis:  device       modm_cmsis_device->modm_cmsis_core",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-cmsis-device/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:cmsis:device\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Define\n\n\n#define STM32F469xx\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:cmsis:device\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\nmodm_cmsis\n\n\n\n\n\n\nmodm:\n\n\ncmsis\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device->modm_cmsis\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_core\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device->modm_cmsis_core\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock.cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_dma\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ndma\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_dma->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nfault.cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_random\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nrandom\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_random->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi->modm_cmsis_device",
            "title": "modm:cmsis:device"
        },
        {
            "location": "/reference/module/modm-cmsis-device/#modmcmsisdevice",
            "text": "",
            "title": "modm:cmsis:device"
        },
        {
            "location": "/reference/module/modm-cmsis-device/#content",
            "text": "// Define  #define STM32F469xx",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-cmsis-device/#dependencies",
            "text": "modm:cmsis:device     modm_cmsis_device   modm:  cmsis:  device     modm_cmsis    modm:  cmsis       modm_cmsis_device->modm_cmsis       modm_cmsis_core    modm:  cmsis:  core       modm_cmsis_device->modm_cmsis_core       modm_platform_adc    modm:  platform:  adc       modm_platform_adc->modm_cmsis_device       modm_platform_can    modm:  platform:  can       modm_platform_can->modm_cmsis_device       modm_platform_clock    modm:  platform:  clock       modm_platform_clock->modm_cmsis_device       modm_platform_clock_cortex    modm:  platform:  clock.cortex       modm_platform_clock_cortex->modm_cmsis_device       modm_platform_core    modm:  platform:  core       modm_platform_core->modm_cmsis_device       modm_platform_dma    modm:  platform:  dma       modm_platform_dma->modm_cmsis_device       modm_platform_fault_cortex    modm:  platform:  fault.cortex       modm_platform_fault_cortex->modm_cmsis_device       modm_platform_gpio    modm:  platform:  gpio       modm_platform_gpio->modm_cmsis_device       modm_platform_i2c    modm:  platform:  i2c       modm_platform_i2c->modm_cmsis_device       modm_platform_random    modm:  platform:  random       modm_platform_random->modm_cmsis_device       modm_platform_spi    modm:  platform:  spi       modm_platform_spi->modm_cmsis_device       modm_platform_timer    modm:  platform:  timer       modm_platform_timer->modm_cmsis_device       modm_platform_uart    modm:  platform:  uart       modm_platform_uart->modm_cmsis_device       modm_platform_uart_spi    modm:  platform:  uart.spi       modm_platform_uart_spi->modm_cmsis_device",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-cmsis-dsp/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:cmsis:dsp: ARM CMSIS-DSP\n\u00b6\n\n\nThis module provides the CMSIS-DSP library.\nPlease \nsee the API documentation\n for details.\n\n\nOptions\n\u00b6\n\n\nunaligned_data\n\u00b6\n\n\nAllow unaligned data storage: \nFalse\n \u2208 \n{ True, False }\n\n\nIf the core supports it, this options enables storing data in unaligned memory.\nThis may reduce data size, but cost some speed.\n\n\ncheck_matrix_sizes\n\u00b6\n\n\nCheck input/output matrix size: \nFalse\n \u2208 \n{ True, False }\n\n\nCheck the input and output sizes of matrices and return\n\nARM_MATH_SIZE_MISMATCH\n on failure.\n\n\nround_float_inputs\n\u00b6\n\n\nRound float inputs: \nTrue\n \u2208 \n{ True, False }\n\n\nRounds float inputs properly during all conversions.\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:cmsis:dsp\n\n\n\n\n\n\n\n\nmodm_cmsis_dsp\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndsp\n\n\n\n\n\n\n\n\nmodm_cmsis\n\n\n\n\n\n\nmodm:\n\n\ncmsis\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_dsp->modm_cmsis",
            "title": "modm:cmsis:dsp"
        },
        {
            "location": "/reference/module/modm-cmsis-dsp/#modmcmsisdsp-arm-cmsis-dsp",
            "text": "This module provides the CMSIS-DSP library.\nPlease  see the API documentation  for details.",
            "title": "modm:cmsis:dsp: ARM CMSIS-DSP"
        },
        {
            "location": "/reference/module/modm-cmsis-dsp/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-cmsis-dsp/#unaligned_data",
            "text": "Allow unaligned data storage:  False  \u2208  { True, False }  If the core supports it, this options enables storing data in unaligned memory.\nThis may reduce data size, but cost some speed.",
            "title": "unaligned_data"
        },
        {
            "location": "/reference/module/modm-cmsis-dsp/#check_matrix_sizes",
            "text": "Check input/output matrix size:  False  \u2208  { True, False }  Check the input and output sizes of matrices and return ARM_MATH_SIZE_MISMATCH  on failure.",
            "title": "check_matrix_sizes"
        },
        {
            "location": "/reference/module/modm-cmsis-dsp/#round_float_inputs",
            "text": "Round float inputs:  True  \u2208  { True, False }  Rounds float inputs properly during all conversions.",
            "title": "round_float_inputs"
        },
        {
            "location": "/reference/module/modm-cmsis-dsp/#dependencies",
            "text": "modm:cmsis:dsp     modm_cmsis_dsp   modm:  cmsis:  dsp     modm_cmsis    modm:  cmsis       modm_cmsis_dsp->modm_cmsis",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-communication/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:communication\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nModmHardware\n<\n \nclass\n \nUart\n  \n>\n;\n\n\nclass\n \nmodm\n::\nsab2\n::\nInterface\n<\n \ntypename\n \nDevice\n,\n \nstd\n::\nsize_t\n \nN\n=\nmaxPayloadLength\n \n>\n;\n\n\nclass\n \nmodm\n::\nsab\n::\nInterface\n<\n \ntypename\n \nDevice\n \n>\n;\n\n\nclass\n \nmodm\n::\nsab\n::\nMaster\n<\n \ntypename\n \nInterface\n \n>\n;\n\n\nclass\n \nmodm\n::\nsab\n::\nResponse\n;\n\n\nclass\n \nmodm\n::\nsab\n::\nSlave\n<\n \ntypename\n \nInterface\n  \n>\n;\n\n\nclass\n \nmodm\n::\nsab\n::\nTransmitter\n;\n\n\nclass\n \nxpcc\n::\nAbstractComponent\n;\n\n\nclass\n \nxpcc\n::\nActionResult\n<\n \ntypename\n \nT\n \n=\nvoid\n \n>\n;\n\n\nclass\n \nxpcc\n::\nActionResult\n<\n \nvoid\n \n>\n;\n\n\nclass\n \nxpcc\n::\nBackendInterface\n;\n\n\nclass\n \nxpcc\n::\nCanConnector\n::\nReceiveListItem\n;\n\n\nclass\n \nxpcc\n::\nCanConnector\n::\nSendListItem\n;\n\n\nclass\n \nxpcc\n::\nCanConnector\n<\n \ntypename\n \nDriver\n  \n>\n;\n\n\nclass\n \nxpcc\n::\nCanConnectorBase\n;\n\n\nclass\n \nxpcc\n::\nCommunicatable\n;\n\n\nclass\n \nxpcc\n::\nCommunicatableTask\n;\n\n\nclass\n \nxpcc\n::\nCommunicator\n;\n\n\nclass\n \nxpcc\n::\nDispatcher\n::\nEntry\n;\n\n\nclass\n \nxpcc\n::\nDispatcher\n;\n\n\nclass\n \nxpcc\n::\nDynamicPostman\n::\nActionHandler\n;\n\n\nclass\n \nxpcc\n::\nDynamicPostman\n::\nEventListener\n;\n\n\nclass\n \nxpcc\n::\nDynamicPostman\n;\n\n\nclass\n \nxpcc\n::\nPostman\n;\n\n\nclass\n \nxpcc\n::\nResponseCallback\n;\n\n\nclass\n \nxpcc\n::\nResponseHandle\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nsab\n::\nAction\n;\n\n\nstruct\n \nmodm\n::\nsab\n::\nCallable\n;\n\n\nstruct\n \nxpcc\n::\nHeader\n;\n\n\n\n// Function\n\n\nmodm\n::\nIOStream\n&\n \nxpcc\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\ns\n,\n \nconst\n \nHeader\n \n&\nheader\n);\n\n\nuint16_t\n \nmodm\n::\nsab2\n::\ncrcUpdate\n(\nuint16_t\n \ncrc\n,\n \nuint8_t\n \ndata\n);\n\n\nuint8_t\n \nmodm\n::\nsab\n::\ncrcUpdate\n(\nuint8_t\n \ncrc\n,\n \nuint8_t\n \ndata\n);\n\n\n\n// Enum\n\n\nenum\n \nError\n;\n\n\nenum\n \nError\n;\n\n\nenum\n \nFlags\n;\n\n\nenum\n \nclass\n \nResponse\n;\n\n\n\n// Variable\n\n\nconst\n \nuint16_t\n \nmodm\n::\nsab2\n::\ncrcInitialValue\n \n=\n \n0xffff\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab2\n::\ncontrolEscapeByte\n \n=\n \n0x7d\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab2\n::\nframeBounderyByte\n \n=\n \n0x7e\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab2\n::\nmaxPayloadLength\n \n=\n \n32\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab\n::\ncrcInitialValue\n \n=\n \n0x00\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab\n::\nmaxPayloadLength\n \n=\n \n32\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab\n::\nsyncByte\n \n=\n \n0x54\n;\n\n\n\n// Typedef\n\n\nusing\n \nxpcc\n::\nActionResponse\n \n=\n \ntypedef\n \nmodm\n::\nResumableResult\n<\n \nxpcc\n::\nActionResult\n<\n \nT\n \n>\n \n>\n;\n\n\n\n// Define\n\n\n#define SAB_ACTION(command, object, function, length)\n\n\n#define XPCC_CAN_PACKET_ACKNOWLEDGE\n\n\n#define XPCC_CAN_PACKET_ACKNOWLEDGE_MASK\n\n\n#define XPCC_CAN_PACKET_DESTINATION(x)\n\n\n#define XPCC_CAN_PACKET_DESTINATION_MASK\n\n\n#define XPCC_CAN_PACKET_EVENT\n\n\n#define XPCC_CAN_PACKET_EVENT_MASK\n\n\n#define XPCC_CAN_PACKET_ID(x)\n\n\n#define XPCC_CAN_PACKET_ID_MASK\n\n\n#define XPCC_CAN_PACKET_SOURCE(x)\n\n\n#define XPCC_CAN_PACKET_SOURCE_MASK\n\n\n#define XPCC_CAN_PACKET_TYPE_MASK\n\n\n#define XPCC_CAN_PACKET_TYPE_REQUEST\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:communication\n\n\n\n\n\n\n\n\nmodm_communication\n\n\n\n\nmodm:\n\n\ncommunication\n\n\n\n\n\n\n\n\nmodm_communication_ros\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nros\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_ros->modm_communication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nsab\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab->modm_communication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nsab2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2->modm_communication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_communication",
            "title": "modm:communication"
        },
        {
            "location": "/reference/module/modm-communication/#modmcommunication",
            "text": "",
            "title": "modm:communication"
        },
        {
            "location": "/reference/module/modm-communication/#content",
            "text": "// Class  class   ModmHardware <   class   Uart    > ;  class   modm :: sab2 :: Interface <   typename   Device ,   std :: size_t   N = maxPayloadLength   > ;  class   modm :: sab :: Interface <   typename   Device   > ;  class   modm :: sab :: Master <   typename   Interface   > ;  class   modm :: sab :: Response ;  class   modm :: sab :: Slave <   typename   Interface    > ;  class   modm :: sab :: Transmitter ;  class   xpcc :: AbstractComponent ;  class   xpcc :: ActionResult <   typename   T   = void   > ;  class   xpcc :: ActionResult <   void   > ;  class   xpcc :: BackendInterface ;  class   xpcc :: CanConnector :: ReceiveListItem ;  class   xpcc :: CanConnector :: SendListItem ;  class   xpcc :: CanConnector <   typename   Driver    > ;  class   xpcc :: CanConnectorBase ;  class   xpcc :: Communicatable ;  class   xpcc :: CommunicatableTask ;  class   xpcc :: Communicator ;  class   xpcc :: Dispatcher :: Entry ;  class   xpcc :: Dispatcher ;  class   xpcc :: DynamicPostman :: ActionHandler ;  class   xpcc :: DynamicPostman :: EventListener ;  class   xpcc :: DynamicPostman ;  class   xpcc :: Postman ;  class   xpcc :: ResponseCallback ;  class   xpcc :: ResponseHandle ;  // Struct  struct   modm :: sab :: Action ;  struct   modm :: sab :: Callable ;  struct   xpcc :: Header ;  // Function  modm :: IOStream &   xpcc :: operator << ( modm :: IOStream   & s ,   const   Header   & header );  uint16_t   modm :: sab2 :: crcUpdate ( uint16_t   crc ,   uint8_t   data );  uint8_t   modm :: sab :: crcUpdate ( uint8_t   crc ,   uint8_t   data );  // Enum  enum   Error ;  enum   Error ;  enum   Flags ;  enum   class   Response ;  // Variable  const   uint16_t   modm :: sab2 :: crcInitialValue   =   0xffff ;  const   uint8_t   modm :: sab2 :: controlEscapeByte   =   0x7d ;  const   uint8_t   modm :: sab2 :: frameBounderyByte   =   0x7e ;  const   uint8_t   modm :: sab2 :: maxPayloadLength   =   32 ;  const   uint8_t   modm :: sab :: crcInitialValue   =   0x00 ;  const   uint8_t   modm :: sab :: maxPayloadLength   =   32 ;  const   uint8_t   modm :: sab :: syncByte   =   0x54 ;  // Typedef  using   xpcc :: ActionResponse   =   typedef   modm :: ResumableResult <   xpcc :: ActionResult <   T   >   > ;  // Define  #define SAB_ACTION(command, object, function, length)  #define XPCC_CAN_PACKET_ACKNOWLEDGE  #define XPCC_CAN_PACKET_ACKNOWLEDGE_MASK  #define XPCC_CAN_PACKET_DESTINATION(x)  #define XPCC_CAN_PACKET_DESTINATION_MASK  #define XPCC_CAN_PACKET_EVENT  #define XPCC_CAN_PACKET_EVENT_MASK  #define XPCC_CAN_PACKET_ID(x)  #define XPCC_CAN_PACKET_ID_MASK  #define XPCC_CAN_PACKET_SOURCE(x)  #define XPCC_CAN_PACKET_SOURCE_MASK  #define XPCC_CAN_PACKET_TYPE_MASK  #define XPCC_CAN_PACKET_TYPE_REQUEST",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-communication/#dependencies",
            "text": "modm:communication     modm_communication   modm:  communication     modm_communication_ros    modm:  communication:  ros       modm_communication_ros->modm_communication       modm_communication_sab    modm:  communication:  sab       modm_communication_sab->modm_communication       modm_communication_sab2    modm:  communication:  sab2       modm_communication_sab2->modm_communication       modm_communication_xpcc    modm:  communication:  xpcc       modm_communication_xpcc->modm_communication",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-communication-ros/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:communication:ros\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nModmHardware\n<\n \nclass\n \nUart\n  \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:communication:ros\n\n\n\n\n\n\n\n\nmodm_communication_ros\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nros\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_ros->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_uart\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_ros->modm_architecture_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication\n\n\n\n\n\n\nmodm:\n\n\ncommunication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_ros->modm_communication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_ros->modm_processing_timer",
            "title": "modm:communication:ros"
        },
        {
            "location": "/reference/module/modm-communication-ros/#modmcommunicationros",
            "text": "",
            "title": "modm:communication:ros"
        },
        {
            "location": "/reference/module/modm-communication-ros/#content",
            "text": "// Class  class   ModmHardware <   class   Uart    > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-communication-ros/#dependencies",
            "text": "modm:communication:ros     modm_communication_ros   modm:  communication:  ros     modm_architecture_clock    modm:  architecture:  clock       modm_communication_ros->modm_architecture_clock       modm_architecture_uart    modm:  architecture:  uart       modm_communication_ros->modm_architecture_uart       modm_communication    modm:  communication       modm_communication_ros->modm_communication       modm_processing_timer    modm:  processing:  timer       modm_communication_ros->modm_processing_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-communication-sab/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:communication:sab\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nsab2\n::\nInterface\n<\n \ntypename\n \nDevice\n,\n \nstd\n::\nsize_t\n \nN\n=\nmaxPayloadLength\n \n>\n;\n\n\nclass\n \nmodm\n::\nsab\n::\nInterface\n<\n \ntypename\n \nDevice\n \n>\n;\n\n\nclass\n \nmodm\n::\nsab\n::\nMaster\n<\n \ntypename\n \nInterface\n \n>\n;\n\n\nclass\n \nmodm\n::\nsab\n::\nResponse\n;\n\n\nclass\n \nmodm\n::\nsab\n::\nSlave\n<\n \ntypename\n \nInterface\n  \n>\n;\n\n\nclass\n \nmodm\n::\nsab\n::\nTransmitter\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nsab\n::\nAction\n;\n\n\nstruct\n \nmodm\n::\nsab\n::\nCallable\n;\n\n\n\n// Function\n\n\nuint16_t\n \nmodm\n::\nsab2\n::\ncrcUpdate\n(\nuint16_t\n \ncrc\n,\n \nuint8_t\n \ndata\n);\n\n\nuint8_t\n \nmodm\n::\nsab\n::\ncrcUpdate\n(\nuint8_t\n \ncrc\n,\n \nuint8_t\n \ndata\n);\n\n\n\n// Enum\n\n\nenum\n \nError\n;\n\n\nenum\n \nError\n;\n\n\nenum\n \nFlags\n;\n\n\n\n// Variable\n\n\nconst\n \nuint16_t\n \nmodm\n::\nsab2\n::\ncrcInitialValue\n \n=\n \n0xffff\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab2\n::\ncontrolEscapeByte\n \n=\n \n0x7d\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab2\n::\nframeBounderyByte\n \n=\n \n0x7e\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab2\n::\nmaxPayloadLength\n \n=\n \n32\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab\n::\ncrcInitialValue\n \n=\n \n0x00\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab\n::\nmaxPayloadLength\n \n=\n \n32\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab\n::\nsyncByte\n \n=\n \n0x54\n;\n\n\n\n// Define\n\n\n#define SAB_ACTION(command, object, function, length)\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:communication:sab\n\n\n\n\n\n\n\n\nmodm_communication_sab\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nsab\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication\n\n\n\n\n\n\nmodm:\n\n\ncommunication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab->modm_communication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nsab2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2->modm_communication_sab\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_communication\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ncommunication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_communication->modm_communication_sab",
            "title": "modm:communication:sab"
        },
        {
            "location": "/reference/module/modm-communication-sab/#modmcommunicationsab",
            "text": "",
            "title": "modm:communication:sab"
        },
        {
            "location": "/reference/module/modm-communication-sab/#content",
            "text": "// Class  class   modm :: sab2 :: Interface <   typename   Device ,   std :: size_t   N = maxPayloadLength   > ;  class   modm :: sab :: Interface <   typename   Device   > ;  class   modm :: sab :: Master <   typename   Interface   > ;  class   modm :: sab :: Response ;  class   modm :: sab :: Slave <   typename   Interface    > ;  class   modm :: sab :: Transmitter ;  // Struct  struct   modm :: sab :: Action ;  struct   modm :: sab :: Callable ;  // Function  uint16_t   modm :: sab2 :: crcUpdate ( uint16_t   crc ,   uint8_t   data );  uint8_t   modm :: sab :: crcUpdate ( uint8_t   crc ,   uint8_t   data );  // Enum  enum   Error ;  enum   Error ;  enum   Flags ;  // Variable  const   uint16_t   modm :: sab2 :: crcInitialValue   =   0xffff ;  const   uint8_t   modm :: sab2 :: controlEscapeByte   =   0x7d ;  const   uint8_t   modm :: sab2 :: frameBounderyByte   =   0x7e ;  const   uint8_t   modm :: sab2 :: maxPayloadLength   =   32 ;  const   uint8_t   modm :: sab :: crcInitialValue   =   0x00 ;  const   uint8_t   modm :: sab :: maxPayloadLength   =   32 ;  const   uint8_t   modm :: sab :: syncByte   =   0x54 ;  // Define  #define SAB_ACTION(command, object, function, length)",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-communication-sab/#dependencies",
            "text": "modm:communication:sab     modm_communication_sab   modm:  communication:  sab     modm_architecture_accessor    modm:  architecture:  accessor       modm_communication_sab->modm_architecture_accessor       modm_communication    modm:  communication       modm_communication_sab->modm_communication       modm_debug    modm:  debug       modm_communication_sab->modm_debug       modm_processing_timer    modm:  processing:  timer       modm_communication_sab->modm_processing_timer       modm_communication_sab2    modm:  communication:  sab2       modm_communication_sab2->modm_communication_sab       modm_test_communication    modm:  test:  communication       modm_test_communication->modm_communication_sab",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-communication-sab2/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:communication:sab2\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nsab2\n::\nInterface\n<\n \ntypename\n \nDevice\n,\n \nstd\n::\nsize_t\n \nN\n=\nmaxPayloadLength\n \n>\n;\n\n\n\n// Function\n\n\nuint16_t\n \nmodm\n::\nsab2\n::\ncrcUpdate\n(\nuint16_t\n \ncrc\n,\n \nuint8_t\n \ndata\n);\n\n\n\n// Enum\n\n\nenum\n \nError\n;\n\n\n\n// Variable\n\n\nconst\n \nuint16_t\n \nmodm\n::\nsab2\n::\ncrcInitialValue\n \n=\n \n0xffff\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab2\n::\ncontrolEscapeByte\n \n=\n \n0x7d\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab2\n::\nframeBounderyByte\n \n=\n \n0x7e\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nsab2\n::\nmaxPayloadLength\n \n=\n \n32\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:communication:sab2\n\n\n\n\n\n\n\n\nmodm_communication_sab2\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nsab2\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication\n\n\n\n\n\n\nmodm:\n\n\ncommunication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2->modm_communication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nsab\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2->modm_communication_sab\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2->modm_processing_timer",
            "title": "modm:communication:sab2"
        },
        {
            "location": "/reference/module/modm-communication-sab2/#modmcommunicationsab2",
            "text": "",
            "title": "modm:communication:sab2"
        },
        {
            "location": "/reference/module/modm-communication-sab2/#content",
            "text": "// Class  class   modm :: sab2 :: Interface <   typename   Device ,   std :: size_t   N = maxPayloadLength   > ;  // Function  uint16_t   modm :: sab2 :: crcUpdate ( uint16_t   crc ,   uint8_t   data );  // Enum  enum   Error ;  // Variable  const   uint16_t   modm :: sab2 :: crcInitialValue   =   0xffff ;  const   uint8_t   modm :: sab2 :: controlEscapeByte   =   0x7d ;  const   uint8_t   modm :: sab2 :: frameBounderyByte   =   0x7e ;  const   uint8_t   modm :: sab2 :: maxPayloadLength   =   32 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-communication-sab2/#dependencies",
            "text": "modm:communication:sab2     modm_communication_sab2   modm:  communication:  sab2     modm_architecture_accessor    modm:  architecture:  accessor       modm_communication_sab2->modm_architecture_accessor       modm_communication    modm:  communication       modm_communication_sab2->modm_communication       modm_communication_sab    modm:  communication:  sab       modm_communication_sab2->modm_communication_sab       modm_debug    modm:  debug       modm_communication_sab2->modm_debug       modm_processing_timer    modm:  processing:  timer       modm_communication_sab2->modm_processing_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-communication-xpcc/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:communication:xpcc\n\u00b6\n\n\nOptions\n\u00b6\n\n\ntimeout.acknowledge\n\u00b6\n\n\nTimeout in ms of an reception acknowledgement: \n100\n \u2208 \n{ 10 ... 10000 }\n\n\ntimeout.response\n\u00b6\n\n\nTimeout in ms of an request response: \n200\n \u2208 \n{ 10 ... 10000 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nxpcc\n::\nAbstractComponent\n;\n\n\nclass\n \nxpcc\n::\nActionResult\n<\n \ntypename\n \nT\n \n=\nvoid\n \n>\n;\n\n\nclass\n \nxpcc\n::\nActionResult\n<\n \nvoid\n \n>\n;\n\n\nclass\n \nxpcc\n::\nBackendInterface\n;\n\n\nclass\n \nxpcc\n::\nCanConnector\n::\nReceiveListItem\n;\n\n\nclass\n \nxpcc\n::\nCanConnector\n::\nSendListItem\n;\n\n\nclass\n \nxpcc\n::\nCanConnector\n<\n \ntypename\n \nDriver\n  \n>\n;\n\n\nclass\n \nxpcc\n::\nCanConnectorBase\n;\n\n\nclass\n \nxpcc\n::\nCommunicatable\n;\n\n\nclass\n \nxpcc\n::\nCommunicatableTask\n;\n\n\nclass\n \nxpcc\n::\nCommunicator\n;\n\n\nclass\n \nxpcc\n::\nDispatcher\n::\nEntry\n;\n\n\nclass\n \nxpcc\n::\nDispatcher\n;\n\n\nclass\n \nxpcc\n::\nDynamicPostman\n::\nActionHandler\n;\n\n\nclass\n \nxpcc\n::\nDynamicPostman\n::\nEventListener\n;\n\n\nclass\n \nxpcc\n::\nDynamicPostman\n;\n\n\nclass\n \nxpcc\n::\nPostman\n;\n\n\nclass\n \nxpcc\n::\nResponseCallback\n;\n\n\nclass\n \nxpcc\n::\nResponseHandle\n;\n\n\n\n// Struct\n\n\nstruct\n \nxpcc\n::\nHeader\n;\n\n\n\n// Function\n\n\nmodm\n::\nIOStream\n&\n \nxpcc\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\ns\n,\n \nconst\n \nHeader\n \n&\nheader\n);\n\n\n\n// Enum\n\n\nenum\n \nclass\n \nResponse\n;\n\n\n\n// Typedef\n\n\nusing\n \nxpcc\n::\nActionResponse\n \n=\n \ntypedef\n \nmodm\n::\nResumableResult\n<\n \nxpcc\n::\nActionResult\n<\n \nT\n \n>\n \n>\n;\n\n\n\n// Define\n\n\n#define XPCC_CAN_PACKET_ACKNOWLEDGE\n\n\n#define XPCC_CAN_PACKET_ACKNOWLEDGE_MASK\n\n\n#define XPCC_CAN_PACKET_DESTINATION(x)\n\n\n#define XPCC_CAN_PACKET_DESTINATION_MASK\n\n\n#define XPCC_CAN_PACKET_EVENT\n\n\n#define XPCC_CAN_PACKET_EVENT_MASK\n\n\n#define XPCC_CAN_PACKET_ID(x)\n\n\n#define XPCC_CAN_PACKET_ID_MASK\n\n\n#define XPCC_CAN_PACKET_SOURCE(x)\n\n\n#define XPCC_CAN_PACKET_SOURCE_MASK\n\n\n#define XPCC_CAN_PACKET_TYPE_MASK\n\n\n#define XPCC_CAN_PACKET_TYPE_REQUEST\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:communication:xpcc\n\n\n\n\n\n\n\n\nmodm_communication_xpcc\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc\n\n\n\n\n\n\n\n\nmodm_architecture_can\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_architecture_can\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication\n\n\n\n\n\n\nmodm:\n\n\ncommunication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_communication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container\n\n\n\n\n\n\nmodm:\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc_generator\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc:\n\n\ngenerator\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc_generator->modm_communication_xpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_communication\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ncommunication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_communication->modm_communication_xpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nmenu\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu->modm_communication_xpcc",
            "title": "modm:communication:xpcc"
        },
        {
            "location": "/reference/module/modm-communication-xpcc/#modmcommunicationxpcc",
            "text": "",
            "title": "modm:communication:xpcc"
        },
        {
            "location": "/reference/module/modm-communication-xpcc/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-communication-xpcc/#timeoutacknowledge",
            "text": "Timeout in ms of an reception acknowledgement:  100  \u2208  { 10 ... 10000 }",
            "title": "timeout.acknowledge"
        },
        {
            "location": "/reference/module/modm-communication-xpcc/#timeoutresponse",
            "text": "Timeout in ms of an request response:  200  \u2208  { 10 ... 10000 }",
            "title": "timeout.response"
        },
        {
            "location": "/reference/module/modm-communication-xpcc/#content",
            "text": "// Class  class   xpcc :: AbstractComponent ;  class   xpcc :: ActionResult <   typename   T   = void   > ;  class   xpcc :: ActionResult <   void   > ;  class   xpcc :: BackendInterface ;  class   xpcc :: CanConnector :: ReceiveListItem ;  class   xpcc :: CanConnector :: SendListItem ;  class   xpcc :: CanConnector <   typename   Driver    > ;  class   xpcc :: CanConnectorBase ;  class   xpcc :: Communicatable ;  class   xpcc :: CommunicatableTask ;  class   xpcc :: Communicator ;  class   xpcc :: Dispatcher :: Entry ;  class   xpcc :: Dispatcher ;  class   xpcc :: DynamicPostman :: ActionHandler ;  class   xpcc :: DynamicPostman :: EventListener ;  class   xpcc :: DynamicPostman ;  class   xpcc :: Postman ;  class   xpcc :: ResponseCallback ;  class   xpcc :: ResponseHandle ;  // Struct  struct   xpcc :: Header ;  // Function  modm :: IOStream &   xpcc :: operator << ( modm :: IOStream   & s ,   const   Header   & header );  // Enum  enum   class   Response ;  // Typedef  using   xpcc :: ActionResponse   =   typedef   modm :: ResumableResult <   xpcc :: ActionResult <   T   >   > ;  // Define  #define XPCC_CAN_PACKET_ACKNOWLEDGE  #define XPCC_CAN_PACKET_ACKNOWLEDGE_MASK  #define XPCC_CAN_PACKET_DESTINATION(x)  #define XPCC_CAN_PACKET_DESTINATION_MASK  #define XPCC_CAN_PACKET_EVENT  #define XPCC_CAN_PACKET_EVENT_MASK  #define XPCC_CAN_PACKET_ID(x)  #define XPCC_CAN_PACKET_ID_MASK  #define XPCC_CAN_PACKET_SOURCE(x)  #define XPCC_CAN_PACKET_SOURCE_MASK  #define XPCC_CAN_PACKET_TYPE_MASK  #define XPCC_CAN_PACKET_TYPE_REQUEST",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-communication-xpcc/#dependencies",
            "text": "modm:communication:xpcc     modm_communication_xpcc   modm:  communication:  xpcc     modm_architecture_can    modm:  architecture:  can       modm_communication_xpcc->modm_architecture_can       modm_communication    modm:  communication       modm_communication_xpcc->modm_communication       modm_container    modm:  container       modm_communication_xpcc->modm_container       modm_debug    modm:  debug       modm_communication_xpcc->modm_debug       modm_io    modm:  io       modm_communication_xpcc->modm_io       modm_math_utils    modm:  math:  utils       modm_communication_xpcc->modm_math_utils       modm_processing_resumable    modm:  processing:  resumable       modm_communication_xpcc->modm_processing_resumable       modm_processing_timer    modm:  processing:  timer       modm_communication_xpcc->modm_processing_timer       modm_communication_xpcc_generator    modm:  communication:  xpcc:  generator       modm_communication_xpcc_generator->modm_communication_xpcc       modm_test_communication    modm:  test:  communication       modm_test_communication->modm_communication_xpcc       modm_ui_menu    modm:  ui:  menu       modm_ui_menu->modm_communication_xpcc",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-communication-xpcc-generator/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:communication:xpcc:generator\n\u00b6\n\n\nOptions\n\u00b6\n\n\nsource\n\u00b6\n\n\nPath to the XPCC source file: \n{ String }\n\n\ncontainer\n\u00b6\n\n\nName of the XPCC container to generate for: \n{ String }\n\n\npath\n\u00b6\n\n\nPath to the XPCC generated folder: \ngenerated/xpcc\n \u2208 \n{ String }\n\n\nnamespace\n\u00b6\n\n\nNamespace of the generated XPCC communications: \nrobot\n \u2208 \n{ String }\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:communication:xpcc:generator\n\n\n\n\n\n\n\n\nmodm_communication_xpcc_generator\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc:\n\n\ngenerator\n\n\n\n\n\n\n\n\nmodm_communication_xpcc\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc_generator->modm_communication_xpcc",
            "title": "modm:communication:xpcc:generator"
        },
        {
            "location": "/reference/module/modm-communication-xpcc-generator/#modmcommunicationxpccgenerator",
            "text": "",
            "title": "modm:communication:xpcc:generator"
        },
        {
            "location": "/reference/module/modm-communication-xpcc-generator/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-communication-xpcc-generator/#source",
            "text": "Path to the XPCC source file:  { String }",
            "title": "source"
        },
        {
            "location": "/reference/module/modm-communication-xpcc-generator/#container",
            "text": "Name of the XPCC container to generate for:  { String }",
            "title": "container"
        },
        {
            "location": "/reference/module/modm-communication-xpcc-generator/#path",
            "text": "Path to the XPCC generated folder:  generated/xpcc  \u2208  { String }",
            "title": "path"
        },
        {
            "location": "/reference/module/modm-communication-xpcc-generator/#namespace",
            "text": "Namespace of the generated XPCC communications:  robot  \u2208  { String }",
            "title": "namespace"
        },
        {
            "location": "/reference/module/modm-communication-xpcc-generator/#dependencies",
            "text": "modm:communication:xpcc:generator     modm_communication_xpcc_generator   modm:  communication:  xpcc:  generator     modm_communication_xpcc    modm:  communication:  xpcc       modm_communication_xpcc_generator->modm_communication_xpcc",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-container/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:container\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nBoundedDeque\n::\nconst_iterator\n;\n\n\nclass\n \nmodm\n::\nBoundedDeque\n<\n \ntypename\n \nT\n,\n \nstd\n::\nsize_t\n \nN\n \n>\n;\n\n\nclass\n \nmodm\n::\nBoundedQueue\n<\n \ntypename\n \nT\n \n,\n \nstd\n::\nsize_t\n \nN\n,\n \ntypename\n \nContainer\n \n=\nBoundedDeque\n<\nT\n,\n \nN\n>\n \n>\n;\n\n\nclass\n \nmodm\n::\nBoundedStack\n<\n \ntypename\n \nT\n \n,\n \nstd\n::\nsize_t\n \nN\n,\n \ntypename\n \nContainer\n \n=\nBoundedDeque\n<\nT\n,\n \nN\n>\n \n>\n;\n\n\nclass\n \nmodm\n::\nDoublyLinkedList\n::\nconst_iterator\n;\n\n\nclass\n \nmodm\n::\nDoublyLinkedList\n::\niterator\n;\n\n\nclass\n \nmodm\n::\nDoublyLinkedList\n<\n \ntypename\n \nT\n,\n \ntypename\n \nAllocator\n=\nallocator\n::\nDynamic\n<\nT\n>\n \n>\n;\n\n\nclass\n \nmodm\n::\nDynamicArray\n::\nconst_iterator\n;\n\n\nclass\n \nmodm\n::\nDynamicArray\n::\niterator\n;\n\n\nclass\n \nmodm\n::\nDynamicArray\n<\n \ntypename\n \nT\n,\n \ntypename\n \nAllocator\n=\nallocator\n::\nDynamic\n<\nT\n>\n \n>\n;\n\n\nclass\n \nmodm\n::\nLinkedList\n::\nconst_iterator\n;\n\n\nclass\n \nmodm\n::\nLinkedList\n::\niterator\n;\n\n\nclass\n \nmodm\n::\nLinkedList\n<\n \ntypename\n \nT\n,\n \ntypename\n \nAllocator\n=\nallocator\n::\nDynamic\n<\nT\n>\n \n>\n;\n\n\nclass\n \nmodm\n::\nPair\n<\n \ntypename\n \nT1\n \n,\n \ntypename\n \nT2\n  \n>\n;\n\n\nclass\n \nmodm\n::\nQueue\n<\n \ntypename\n \nT\n \n,\n \ntypename\n \nContainer\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSmartPointer\n;\n\n\nclass\n \nmodm\n::\nStack\n<\n \ntypename\n \nT\n,\n \ntypename\n \nContainer\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nDoublyLinkedList\n::\nNode\n;\n\n\nstruct\n \nmodm\n::\nLinkedList\n::\nNode\n;\n\n\n\n// Function\n\n\nmodm\n::\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nmodm\n::\nIOStream\n \n&\ns\n,\n \nconst\n \nmodm\n::\nSmartPointer\n \n&\nsPtr\n);\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:container\n\n\n\n\n\n\n\n\nmodm_container\n\n\n\n\nmodm:\n\n\ncontainer\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\ngeometry\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_interpolation\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\ninterpolation\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_interpolation->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_container\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_container->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_spi\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_spi->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ngui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nmenu\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu->modm_container",
            "title": "modm:container"
        },
        {
            "location": "/reference/module/modm-container/#modmcontainer",
            "text": "",
            "title": "modm:container"
        },
        {
            "location": "/reference/module/modm-container/#content",
            "text": "// Class  class   modm :: BoundedDeque :: const_iterator ;  class   modm :: BoundedDeque <   typename   T ,   std :: size_t   N   > ;  class   modm :: BoundedQueue <   typename   T   ,   std :: size_t   N ,   typename   Container   = BoundedDeque < T ,   N >   > ;  class   modm :: BoundedStack <   typename   T   ,   std :: size_t   N ,   typename   Container   = BoundedDeque < T ,   N >   > ;  class   modm :: DoublyLinkedList :: const_iterator ;  class   modm :: DoublyLinkedList :: iterator ;  class   modm :: DoublyLinkedList <   typename   T ,   typename   Allocator = allocator :: Dynamic < T >   > ;  class   modm :: DynamicArray :: const_iterator ;  class   modm :: DynamicArray :: iterator ;  class   modm :: DynamicArray <   typename   T ,   typename   Allocator = allocator :: Dynamic < T >   > ;  class   modm :: LinkedList :: const_iterator ;  class   modm :: LinkedList :: iterator ;  class   modm :: LinkedList <   typename   T ,   typename   Allocator = allocator :: Dynamic < T >   > ;  class   modm :: Pair <   typename   T1   ,   typename   T2    > ;  class   modm :: Queue <   typename   T   ,   typename   Container    > ;  class   modm :: SmartPointer ;  class   modm :: Stack <   typename   T ,   typename   Container   > ;  // Struct  struct   modm :: DoublyLinkedList :: Node ;  struct   modm :: LinkedList :: Node ;  // Function  modm :: IOStream &   modm :: operator << ( modm :: IOStream   & s ,   const   modm :: SmartPointer   & sPtr );",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-container/#dependencies",
            "text": "modm:container     modm_container   modm:  container     modm_architecture    modm:  architecture       modm_container->modm_architecture       modm_io    modm:  io       modm_container->modm_io       modm_utils    modm:  utils       modm_container->modm_utils       modm_communication_xpcc    modm:  communication:  xpcc       modm_communication_xpcc->modm_container       modm_math_geometry    modm:  math:  geometry       modm_math_geometry->modm_container       modm_math_interpolation    modm:  math:  interpolation       modm_math_interpolation->modm_container       modm_platform_i2c    modm:  platform:  i2c       modm_platform_i2c->modm_container       modm_test_container    modm:  test:  container       modm_test_container->modm_container       modm_test_platform_spi    modm:  test:  platform:  spi       modm_test_platform_spi->modm_container       modm_ui_gui    modm:  ui:  gui       modm_ui_gui->modm_container       modm_ui_menu    modm:  ui:  menu       modm_ui_menu->modm_container",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-debug/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:debug\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nErrorReport\n;\n\n\nclass\n \nmodm\n::\nlog\n::\nDefaultStyle\n;\n\n\nclass\n \nmodm\n::\nlog\n::\nLogger\n;\n\n\nclass\n \nmodm\n::\nlog\n::\nPrefix\n<\n \ntypename\n \nT\n \n,\n \ntypename\n \nSTYLE\n \n=\nDefaultStyle\n \n>\n;\n\n\nclass\n \nmodm\n::\nlog\n::\nStdColour\n<\n \nColour\n \nTEXT\n,\n \nColour\n \nBACKGROUND\n,\n \ntypename\n \nSTYLE\n \n=\nDefaultStyle\n \n>\n;\n\n\nclass\n \nmodm\n::\nlog\n::\nStyle\n<\n \ntypename\n \nSTYLE\n \n=\nDefaultStyle\n \n>\n;\n\n\nclass\n \nmodm\n::\nlog\n::\nStyleWrapper\n<\n \ntypename\n \nSTYLE\n  \n>\n;\n\n\n\n// Enum\n\n\nenum\n \nColour\n;\n\n\nenum\n \nLevel\n;\n\n\n\n// Variable\n\n\nLogger\n \nmodm\n::\nlog\n::\ndebug\n \n;\n\n\nLogger\n \nmodm\n::\nlog\n::\nerror\n \n;\n\n\nLogger\n \nmodm\n::\nlog\n::\ninfo\n \n;\n\n\nLogger\n \nmodm\n::\nlog\n::\nwarning\n \n;\n\n\n\n// Define\n\n\n#define FILENAME\n\n\n#define MODM_FILE_INFO\n\n\n#define MODM_LOG_DEBUG\n\n\n#define MODM_LOG_ERROR\n\n\n#define MODM_LOG_INFO\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_OFF\n\n\n#define MODM_LOG_WARNING\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:debug\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni\n\n\n\n\n\n\nmodm:\n\n\nboard:\n\n\ndisco-f469ni\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nsab\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nsab2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adns9800\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nadns9800\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adns9800->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbme280\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbmp085\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp2515\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nnrf24\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl53l0\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl6180\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ngui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_debug",
            "title": "modm:debug"
        },
        {
            "location": "/reference/module/modm-debug/#modmdebug",
            "text": "",
            "title": "modm:debug"
        },
        {
            "location": "/reference/module/modm-debug/#content",
            "text": "// Class  class   modm :: ErrorReport ;  class   modm :: log :: DefaultStyle ;  class   modm :: log :: Logger ;  class   modm :: log :: Prefix <   typename   T   ,   typename   STYLE   = DefaultStyle   > ;  class   modm :: log :: StdColour <   Colour   TEXT ,   Colour   BACKGROUND ,   typename   STYLE   = DefaultStyle   > ;  class   modm :: log :: Style <   typename   STYLE   = DefaultStyle   > ;  class   modm :: log :: StyleWrapper <   typename   STYLE    > ;  // Enum  enum   Colour ;  enum   Level ;  // Variable  Logger   modm :: log :: debug   ;  Logger   modm :: log :: error   ;  Logger   modm :: log :: info   ;  Logger   modm :: log :: warning   ;  // Define  #define FILENAME  #define MODM_FILE_INFO  #define MODM_LOG_DEBUG  #define MODM_LOG_ERROR  #define MODM_LOG_INFO  #define MODM_LOG_LEVEL  #define MODM_LOG_OFF  #define MODM_LOG_WARNING",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-debug/#dependencies",
            "text": "modm:debug     modm_debug   modm:  debug     modm_architecture    modm:  architecture       modm_debug->modm_architecture       modm_io    modm:  io       modm_debug->modm_io       modm_utils    modm:  utils       modm_debug->modm_utils       modm_board_disco-f469ni    modm:  board:  disco-f469ni       modm_board_disco-f469ni->modm_debug       modm_communication_sab    modm:  communication:  sab       modm_communication_sab->modm_debug       modm_communication_sab2    modm:  communication:  sab2       modm_communication_sab2->modm_debug       modm_communication_xpcc    modm:  communication:  xpcc       modm_communication_xpcc->modm_debug       modm_driver_adns9800    modm:  driver:  adns9800       modm_driver_adns9800->modm_debug       modm_driver_bme280    modm:  driver:  bme280       modm_driver_bme280->modm_debug       modm_driver_bmp085    modm:  driver:  bmp085       modm_driver_bmp085->modm_debug       modm_driver_mcp2515    modm:  driver:  mcp2515       modm_driver_mcp2515->modm_debug       modm_driver_nrf24    modm:  driver:  nrf24       modm_driver_nrf24->modm_debug       modm_driver_vl53l0    modm:  driver:  vl53l0       modm_driver_vl53l0->modm_debug       modm_driver_vl6180    modm:  driver:  vl6180       modm_driver_vl6180->modm_debug       modm_platform_can    modm:  platform:  can       modm_platform_can->modm_debug       modm_test_driver    modm:  test:  driver       modm_test_driver->modm_debug       modm_ui_gui    modm:  ui:  gui       modm_ui_gui->modm_debug",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-docs/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:docs\n\u00b6",
            "title": "modm:docs"
        },
        {
            "location": "/reference/module/modm-docs/#modmdocs",
            "text": "",
            "title": "modm:docs"
        },
        {
            "location": "/reference/module/modm-driver/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nAd7280a\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCs\n \n,\n \ntypename\n \nCnvst\n \n,\n \nint\n \nN\n \n>\n;\n\n\nclass\n \nmodm\n::\nAd7928\n<\n \ntypename\n \nSpiMaster\n \n,\n \ntypename\n \nCs\n  \n>\n;\n\n\nclass\n \nmodm\n::\nAdcSampler\n<\n \nclass\n \nAdcInterrupt\n,\n \nuint8_t\n \nChannels\n,\n \nuint32_t\n \nOversamples\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nAdns9800\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCs\n  \n>\n;\n\n\nclass\n \nmodm\n::\nAds7843\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCs\n \n,\n \ntypename\n \nInt\n  \n>\n;\n\n\nclass\n \nmodm\n::\nAmsys5915\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nBdHeap\n<\n \nsize_t\n \nDeviceSize_\n,\n \nbool\n \nexternalMemory\n=\nfalse\n \n>\n;\n\n\nclass\n \nmodm\n::\nBdMirror\n<\n \ntypename\n \nBlockDeviceA\n \n,\n \ntypename\n \nBlockDeviceB\n  \n>\n;\n\n\nclass\n \nmodm\n::\nBdSpiFlash\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCs\n \n,\n \nuint32_t\n \nflashSize\n \n>\n;\n\n\nclass\n \nmodm\n::\nBitbangMemoryInterface\n<\n \ntypename\n \nPORT\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nCD\n \n,\n \ntypename\n \nWR\n  \n>\n;\n\n\nclass\n \nmodm\n::\nBme280\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nBmp085\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nCanBitTimingMcp2515\n<\n \nint32_t\n \nClk\n,\n \nint32_t\n \nBitrate\n \n>\n;\n\n\nclass\n \nmodm\n::\nCanLawicelFormatter\n;\n\n\nclass\n \nmodm\n::\nDogL128\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nA0\n \n,\n \ntypename\n \nReset\n \n,\n \nbool\n \nTopView\n=\nfalse\n \n>\n;\n\n\nclass\n \nmodm\n::\nDogM081\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRS\n  \n>\n;\n\n\nclass\n \nmodm\n::\nDogM128\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nA0\n \n,\n \ntypename\n \nReset\n \n,\n \nbool\n \nTopView\n=\nfalse\n \n>\n;\n\n\nclass\n \nmodm\n::\nDogM132\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nA0\n \n,\n \ntypename\n \nReset\n \n,\n \nbool\n \nTopView\n=\nfalse\n \n>\n;\n\n\nclass\n \nmodm\n::\nDogM162\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRS\n  \n>\n;\n\n\nclass\n \nmodm\n::\nDogM163\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRS\n  \n>\n;\n\n\nclass\n \nmodm\n::\nDogS102\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nA0\n \n,\n \ntypename\n \nReset\n \n,\n \nbool\n \nTopView\n=\nfalse\n \n>\n;\n\n\nclass\n \nmodm\n::\nDrv832xSpi\n<\n \nclass\n \nSpiMaster\n \n,\n \nclass\n \nCs\n  \n>\n;\n\n\nclass\n \nmodm\n::\nDs1302\n<\n \nclass\n \nPinSet\n  \n>\n;\n\n\nclass\n \nmodm\n::\nDs1631\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nDs18b20\n<\n \ntypename\n \nOneWire\n  \n>\n;\n\n\nclass\n \nmodm\n::\nFt245\n<\n \ntypename\n \nPORT\n \n,\n \ntypename\n \nRD\n \n,\n \ntypename\n \nWR\n \n,\n \ntypename\n \nRXF\n \n,\n \ntypename\n \nTXE\n  \n>\n;\n\n\nclass\n \nmodm\n::\nFt6x06\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nHclaX\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nHd44780\n<\n \ntypename\n \nDATA\n \n,\n \ntypename\n \nRW\n \n,\n \ntypename\n \nRS\n \n,\n \ntypename\n \nE\n  \n>\n;\n\n\nclass\n \nmodm\n::\nHd44780Base\n<\n \ntypename\n \nDATA\n \n,\n \ntypename\n \nRW\n \n,\n \ntypename\n \nRS\n \n,\n \ntypename\n \nE\n  \n>\n;\n\n\nclass\n \nmodm\n::\nHd44780Dual\n<\n \ntypename\n \nDATA\n \n,\n \ntypename\n \nRW\n \n,\n \ntypename\n \nRS\n \n,\n \ntypename\n \nE1\n \n,\n \ntypename\n \nE2\n  \n>\n;\n\n\nclass\n \nmodm\n::\nHmc5843\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nHmc5883\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nHmc58x3\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nHmc6343\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nI2cEeprom\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nItg3200\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nL3gd20\n<\n \nclass\n \nTransport\n  \n>\n;\n\n\nclass\n \nmodm\n::\nLis302dl\n<\n \nclass\n \nTransport\n  \n>\n;\n\n\nclass\n \nmodm\n::\nLis3TransportI2c\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nLis3TransportSpi\n<\n \nclass\n \nSpiMaster\n \n,\n \nclass\n \nCs\n  \n>\n;\n\n\nclass\n \nmodm\n::\nLis3dsh\n<\n \nclass\n \nTransport\n  \n>\n;\n\n\nclass\n \nmodm\n::\nLm75\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nLsm303a\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nLtc2984\n<\n \nclass\n \nSpiMaster\n \n,\n \nclass\n \nCs\n  \n>\n;\n\n\nclass\n \nmodm\n::\nMAX6966\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCs\n \n,\n \nuint8_t\n \nDRIVERS\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nMax7219\n<\n \ntypename\n \nSPI\n,\n \ntypename\n \nCS\n,\n \nuint8_t\n \nMODULES\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nMax7219matrix\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \nuint8_t\n \nCOLUMNS\n=\n1\n,\n \nuint8_t\n \nROWS\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nMcp23TransportI2c\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nMcp23TransportSpi\n<\n \nclass\n \nSpiMaster\n \n,\n \nclass\n \nCs\n  \n>\n;\n\n\nclass\n \nmodm\n::\nMcp23x17\n<\n \nclass\n \nTransport\n  \n>\n;\n\n\nclass\n \nmodm\n::\nMcp2515\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nINT\n  \n>\n;\n\n\nclass\n \nmodm\n::\nMemoryBus\n<\n \ntypename\n \nPORT\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRD\n \n,\n \ntypename\n \nWR\n  \n>\n;\n\n\nclass\n \nmodm\n::\nNokia5110\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCe\n \n,\n \ntypename\n \nDc\n \n,\n \ntypename\n \nReset\n  \n>\n;\n\n\nclass\n \nmodm\n::\nNrf24Config\n<\n \ntypename\n \nNrf24Phy\n  \n>\n;\n\n\nclass\n \nmodm\n::\nNrf24Data\n<\n \ntypename\n \nNrf24Phy\n \n>\n;\n\n\nclass\n \nmodm\n::\nNrf24Phy\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCsn\n \n,\n \ntypename\n \nCe\n  \n>\n;\n\n\nclass\n \nmodm\n::\nParallelTft\n<\n \ntypename\n \nINTERFACE\n  \n>\n;\n\n\nclass\n \nmodm\n::\nPca8574\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nPca9535\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nPca9685\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS65Common\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRS\n \n,\n \ntypename\n \nReset\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS65Landscape\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRS\n \n,\n \ntypename\n \nReset\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS65Portrait\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRS\n \n,\n \ntypename\n \nReset\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS75Common\n<\n \ntypename\n \nMEMORY\n,\n \ntypename\n \nRESET\n,\n \nuint16_t\n \nWIDTH\n,\n \nuint16_t\n \nHEIGHT\n,\n \nmodm\n::\nOrientation\n \nORIENTATION\n \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS75LandscapeLeft\n<\n \ntypename\n \nMEMORY\n \n,\n \ntypename\n \nRESET\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS75LandscapeRight\n<\n \ntypename\n \nMEMORY\n \n,\n \ntypename\n \nRESET\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS75Portrait\n<\n \ntypename\n \nMEMORY\n \n,\n \ntypename\n \nRESET\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS75PortraitUpsideDown\n<\n \ntypename\n \nMEMORY\n \n,\n \ntypename\n \nRESET\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSsd1306\n<\n \nclass\n \nI2cMaster\n \n,\n \nuint8_t\n \nHeight\n=\n64\n \n>\n;\n\n\nclass\n \nmodm\n::\nSt7036\n<\n \ntypename\n \nSPI\n,\n \ntypename\n \nCS\n,\n \ntypename\n \nRS\n,\n \nunsigned\n \nint\n \nWidth\n,\n \nunsigned\n \nint\n \nHeigth\n \n>\n;\n\n\nclass\n \nmodm\n::\nSt7565\n<\n \ntypename\n \nSPI\n,\n \ntypename\n \nCS\n,\n \ntypename\n \nA0\n,\n \ntypename\n \nReset\n,\n \nunsigned\n \nint\n \nWidth\n,\n \nunsigned\n \nint\n \nHeight\n,\n \nbool\n \nTopView\n \n>\n;\n\n\nclass\n \nmodm\n::\nTcs3414\n::\nuint16_t_LOW_HIGH\n;\n\n\nclass\n \nmodm\n::\nTcs3414\n<\n \ntypename\n \nI2cMaster\n \n>\n;\n\n\nclass\n \nmodm\n::\nTcs3472\n::\nuint16_t_LOW_HIGH\n;\n\n\nclass\n \nmodm\n::\nTcs3472\n<\n \ntypename\n \nI2cMaster\n \n>\n;\n\n\nclass\n \nmodm\n::\nTftMemoryBus16Bit\n;\n\n\nclass\n \nmodm\n::\nTftMemoryBus8Bit\n;\n\n\nclass\n \nmodm\n::\nTftMemoryBus8BitGpio\n<\n \ntypename\n \nPORT\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRD\n \n,\n \ntypename\n \nWR\n \n,\n \ntypename\n \nCD\n  \n>\n;\n\n\nclass\n \nmodm\n::\nTmp102\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nTmp175\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nVl53l0\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nVl6180\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nbme280data\n::\nData\n;\n\n\nclass\n \nmodm\n::\nbme280data\n::\nDataDouble\n;\n\n\nclass\n \nmodm\n::\nbmp085data\n::\nData\n;\n\n\nclass\n \nmodm\n::\nbmp085data\n::\nDataBase\n;\n\n\nclass\n \nmodm\n::\nbmp085data\n::\nDataDouble\n;\n\n\nclass\n \nmodm\n::\nfat\n::\nDirectory\n;\n\n\nclass\n \nmodm\n::\nfat\n::\nFile\n;\n\n\nclass\n \nmodm\n::\nfat\n::\nFileInfo\n;\n\n\nclass\n \nmodm\n::\nfat\n::\nFileSystem\n;\n\n\nclass\n \nmodm\n::\nfat\n::\nPhysicalVolume\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nBdSpiFlash\n::\nJedecId\n;\n\n\nstruct\n \nmodm\n::\nCanBitTimingMcp2515\n::\nCanBitTimingConfiguration\n;\n\n\nstruct\n \nmodm\n::\nHd44780Base\n::\nBus\n<\n \nData\n,\n \nEnable\n,\n \n4\n \n>\n;\n\n\nstruct\n \nmodm\n::\nHd44780Base\n::\nBus\n<\n \nData\n,\n \nEnable\n,\n \n8\n \n>\n;\n\n\nstruct\n \nmodm\n::\nHd44780Base\n::\nBus\n<\n \ntypename\n \nData\n \n,\n \ntypename\n \nEnable\n \n,\n \nuint8_t\n \nWidth\n \n>\n;\n\n\nstruct\n \nmodm\n::\nMcp23x17\n::\nMemory\n;\n\n\nstruct\n \nmodm\n::\nNrf24Data\n::\nFrame\n;\n\n\nstruct\n \nmodm\n::\nNrf24Data\n::\nHeader\n;\n\n\nstruct\n \nmodm\n::\nNrf24Data\n::\nPacket\n::\nPayload\n;\n\n\nstruct\n \nmodm\n::\nNrf24Data\n::\nPacket\n;\n\n\nstruct\n \nmodm\n::\nNrf24Register\n;\n\n\nstruct\n \nmodm\n::\nad7280a\n::\nConversionValue\n;\n\n\nstruct\n \nmodm\n::\nad7280a\n::\nRegisterValue\n;\n\n\nstruct\n \nmodm\n::\nad7928\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nad7928\n;\n\n\nstruct\n \nmodm\n::\nadns9800\n;\n\n\nstruct\n \nmodm\n::\namsys5915\n::\nData\n;\n\n\nstruct\n \nmodm\n::\namsys5915\n;\n\n\nstruct\n \nmodm\n::\nbme280\n;\n\n\nstruct\n \nmodm\n::\nbme280data\n::\nCalibration\n;\n\n\nstruct\n \nmodm\n::\nbme280data\n::\nDataBase\n;\n\n\nstruct\n \nmodm\n::\nbmp085\n;\n\n\nstruct\n \nmodm\n::\nbmp085data\n::\nCalibration\n;\n\n\nstruct\n \nmodm\n::\ndrv832xSpi\n;\n\n\nstruct\n \nmodm\n::\nds1302\n::\nConfig\n;\n\n\nstruct\n \nmodm\n::\nds1302\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nds1302\n;\n\n\nstruct\n \nmodm\n::\nds1631\n;\n\n\nstruct\n \nmodm\n::\nft6x06\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nft6x06\n::\ntouch_t\n;\n\n\nstruct\n \nmodm\n::\nft6x06\n;\n\n\nstruct\n \nmodm\n::\nhclax\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nhclax\n;\n\n\nstruct\n \nmodm\n::\nhmc5843\n;\n\n\nstruct\n \nmodm\n::\nhmc5883\n;\n\n\nstruct\n \nmodm\n::\nhmc58x3\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nhmc58x3\n;\n\n\nstruct\n \nmodm\n::\nhmc6343\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nhmc6343\n;\n\n\nstruct\n \nmodm\n::\nitg3200\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nitg3200\n;\n\n\nstruct\n \nmodm\n::\nl3gd20\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nl3gd20\n;\n\n\nstruct\n \nmodm\n::\nlis302dl\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nlis302dl\n;\n\n\nstruct\n \nmodm\n::\nlis3dsh\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nlis3dsh\n;\n\n\nstruct\n \nmodm\n::\nlm75\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nlm75\n;\n\n\nstruct\n \nmodm\n::\nlsm303a\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nlsm303a\n;\n\n\nstruct\n \nmodm\n::\nltc2984\n::\nConfiguration\n::\nRsense\n;\n\n\nstruct\n \nmodm\n::\nltc2984\n::\nConfiguration\n::\nRtd\n;\n\n\nstruct\n \nmodm\n::\nltc2984\n::\nConfiguration\n;\n\n\nstruct\n \nmodm\n::\nltc2984\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nltc2984\n;\n\n\nstruct\n \nmodm\n::\nmcp23x17\n;\n\n\nstruct\n \nmodm\n::\npca8574\n;\n\n\nstruct\n \nmodm\n::\npca9535\n;\n\n\nstruct\n \nmodm\n::\npca9685\n;\n\n\nstruct\n \nmodm\n::\nssd1306\n;\n\n\nstruct\n \nmodm\n::\ntcs3414\n;\n\n\nstruct\n \nmodm\n::\ntcs3472\n;\n\n\nstruct\n \nmodm\n::\ntmp102\n::\nData\n;\n\n\nstruct\n \nmodm\n::\ntmp102\n;\n\n\nstruct\n \nmodm\n::\ntmp175\n;\n\n\nstruct\n \nmodm\n::\nvl53l0\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nvl53l0\n::\nTimeOverhead\n;\n\n\nstruct\n \nmodm\n::\nvl53l0\n;\n\n\nstruct\n \nmodm\n::\nvl6180\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nvl6180\n;\n\n\n\n// Function\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nad7280a\n::\nConversionValue\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nad7280a\n::\nRegisterValue\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nCsaControl_t\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nDriverControl_t\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nFaultStatus1_t\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nGateDriveHS_t\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nGateDriveLS_t\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nOcpControl_t\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nVgsStatus2_t\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nltc2984\n::\nData\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nltc2984\n::\nData\n::\nStatus\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nout\n,\n \nconst\n \nad7928\n::\nData\n \n&\ndata\n);\n\n\nltc2984\n::\nCommandStatus\n \nmodm\n::\noperator\n|\n(\nltc2984\n::\nCommandStatus\n \nr\n,\n \nltc2984\n::\nChannel\n \nc\n);\n\n\nltc2984\n::\nRegister\n \nmodm\n::\noperator\n+\n(\nltc2984\n::\nRegister\n \nr\n,\n \nltc2984\n::\nChannel\n \nc\n);\n\n\n\n// Enum\n\n\nenum\n \nAverage\n;\n\n\nenum\n \nBFPCTRL\n;\n\n\nenum\n \nBrightness\n;\n\n\nenum\n \nCANCTRL\n;\n\n\nenum\n \nCANINTE\n;\n\n\nenum\n \nCANINTF\n;\n\n\nenum\n \nCANSTAT\n;\n\n\nenum\n \nCNF1\n;\n\n\nenum\n \nCNF2\n;\n\n\nenum\n \nCNF3\n;\n\n\nenum\n \nCell\n;\n\n\nenum\n \nChannel\n;\n\n\nenum\n \nConfig\n;\n\n\nenum\n \nCurrent\n;\n\n\nenum\n \nDevice\n;\n\n\nenum\n \nEFLG\n;\n\n\nenum\n \nRXB0CTRL\n;\n\n\nenum\n \nRXB1CTRL\n;\n\n\nenum\n \nRXBnDLC\n;\n\n\nenum\n \nRXBnSIDL\n;\n\n\nenum\n \nRegister\n;\n\n\nenum\n \nRegister\n;\n\n\nenum\n \nRegister\n;\n\n\nenum\n \nRxStatus\n;\n\n\nenum\n \nStatus\n;\n\n\nenum\n \nTXBnCTRL\n;\n\n\nenum\n \nTXBnSIDL\n;\n\n\nenum\n \nTXRTSCTRL\n;\n\n\nenum\n \nTime\n;\n\n\nenum\n \nclass\n \nOrientation\n;\n\n\n\n// Variable\n\n\nconst\n \nuint8_t\n \nmodm\n::\nmax6966\n::\nREAD\n \n=\n \n0x80\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nmax6966\n::\nWRITE\n \n=\n \n0x00\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nst7565\n::\nconfiguration_dogm132\n[\n12\n]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nst7565\n::\nconfiguration_dogs102\n[\n11\n]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nst7565\n::\nconfiguration_dogx128\n[\n12\n]\n \n;\n\n\nconstexpr\n \nuint16_t\n \nfirmware_length\n \n=\n \n3070\n;\n\n\nconstexpr\n \nuint8_t\n \nfirmware_data\n[\nfirmware_length\n]\n \n;\n\n\nstruct\n \nmodm\n::\nTcs3414\n::\nData\n::\n@\n0\n \nmodm\n::\nTcs3414\n<\n \nI2cMaster\n \n>::\nData\n::\n@\n1\n \n;\n\n\nstruct\n \nmodm\n::\nTcs3472\n::\nData\n::\n@\n2\n \nmodm\n::\nTcs3472\n<\n \nI2cMaster\n \n>::\nData\n::\n@\n3\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3414\n<\n \nI2cMaster\n \n>::\nData\n::\nblue\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3414\n<\n \nI2cMaster\n \n>::\nData\n::\nclear\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3414\n<\n \nI2cMaster\n \n>::\nData\n::\ngreen\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3414\n<\n \nI2cMaster\n \n>::\nData\n::\nred\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3472\n<\n \nI2cMaster\n \n>::\nData\n::\nblue\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3472\n<\n \nI2cMaster\n \n>::\nData\n::\nclear\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3472\n<\n \nI2cMaster\n \n>::\nData\n::\ngreen\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3472\n<\n \nI2cMaster\n \n>::\nData\n::\nred\n \n;\n\n\nuint8_t\n \nmodm\n::\nTcs3414\n<\n \nI2cMaster\n \n>::\nData\n::\ndataBytes\n[\n2\n \n*\n4\n]\n \n;\n\n\nuint8_t\n \nmodm\n::\nTcs3472\n<\n \nI2cMaster\n \n>::\nData\n::\ndataBytes\n[\n2\n \n*\n4\n]\n \n;\n\n\n\n// Typedef\n\n\ntypedef\n \nDRESULT\n \nmodm\n::\nfat\n::\nResult\n;\n\n\ntypedef\n \nDSTATUS\n \nmodm\n::\nfat\n::\nStatus\n;\n\n\n\n// Define\n\n\n#define MCP2515_FILTER(id)\n\n\n#define MCP2515_FILTER_EXTENDED(id)\n\n\n#define MCP2515_MASK(id)\n\n\n#define MCP2515_MASK_EXTENDED(id)\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n#define S65_LPC_ACCELERATED\n\n\n#define ST7565_ADC_NORMAL\n\n\n#define ST7565_ADC_REVERSE\n\n\n#define ST7565_BIAS_1_7\n\n\n#define ST7565_BIAS_1_9\n\n\n#define ST7565_BOOSTER_234\n\n\n#define ST7565_BOOSTER_5\n\n\n#define ST7565_BOOSTER_6\n\n\n#define ST7565_BOOSTER_SET\n\n\n#define ST7565_COL_ADDRESS_LSB\n\n\n#define ST7565_COL_ADDRESS_MSB\n\n\n#define ST7565_INDICATOR_MODE_1HZ\n\n\n#define ST7565_INDICATOR_MODE_2HZ\n\n\n#define ST7565_INDICATOR_MODE_OFF\n\n\n#define ST7565_INDICATOR_MODE_ON\n\n\n#define ST7565_INDICATOR_OFF\n\n\n#define ST7565_INDICATOR_ON\n\n\n#define ST7565_NOP\n\n\n#define ST7565_NORMAL\n\n\n#define ST7565_OFF\n\n\n#define ST7565_ON\n\n\n#define ST7565_PAGE_ADDRESS\n\n\n#define ST7565_POWER_CONTROL\n\n\n#define ST7565_POWER_LOW_POWER\n\n\n#define ST7565_POWER_LOW_VOLTAGE\n\n\n#define ST7565_POWER_WIDE_RANGE\n\n\n#define ST7565_RESET_CMD\n\n\n#define ST7565_REVERSE\n\n\n#define ST7565_SCAN_DIR_NORMAL\n\n\n#define ST7565_SCAN_DIR_REVERSE\n\n\n#define ST7565_SHOW_ALL_POINTS\n\n\n#define ST7565_SHOW_NORMAL\n\n\n#define ST7565_VOLTAGE\n\n\n#define ST7565_VOLUME_MODE_1\n\n\n#define ST7565_VOLUME_MODE_2\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7280a\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7928\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adc_sampler\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nadc_sampler\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adc_sampler->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adns9800\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nadns9800\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adns9800->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ads7843\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nads7843\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ads7843->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_amsys5915\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\namsys5915\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_amsys5915->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbme280\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbmp085\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ndrv832x_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1302\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nds1302\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1302->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nds1631\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds18b20\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nds18b20\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds18b20->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ea_dog\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nea_dog\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ea_dog->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_fat\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nfat\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_fat->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ft245\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nft245\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ft245->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ft6x06\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nft6x06\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ft6x06->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hclax\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhclax\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hclax->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hd44780\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhd44780\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hd44780->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc58x\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhmc58x\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc58x->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhmc6343\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_i2c_eeprom\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ni2c.eeprom\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_i2c_eeprom->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_itg3200\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nitg3200\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_itg3200->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nl3gd20\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lawicel\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlawicel\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lawicel->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3.transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis302dl\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis302dl\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis302dl->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3dsh\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3dsh\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3dsh->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lm75\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlm75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lm75->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lsm303a\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlsm303a\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lsm303a->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nltc2984\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max6966\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmax6966\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max6966->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max7219\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmax7219\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max7219->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp23x17\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp2515\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_memory_bus\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmemory_bus\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_memory_bus->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nokia5110\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nnokia5110\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nokia5110->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nnrf24\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_parallel_tft_display\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nparallel_tft_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_parallel_tft_display->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca8574\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca9535\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9685\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca9685\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9685->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s65\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nsiemens_s65\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s65->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s75\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nsiemens_s75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s75->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ssd1306\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nssd1306\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ssd1306->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3414\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntcs3414\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3414->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3472\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntcs3472\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3472->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntmp102\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntmp175\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl53l0\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl6180\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_driver",
            "title": "modm:driver"
        },
        {
            "location": "/reference/module/modm-driver/#modmdriver",
            "text": "",
            "title": "modm:driver"
        },
        {
            "location": "/reference/module/modm-driver/#content",
            "text": "// Class  class   modm :: Ad7280a <   typename   Spi   ,   typename   Cs   ,   typename   Cnvst   ,   int   N   > ;  class   modm :: Ad7928 <   typename   SpiMaster   ,   typename   Cs    > ;  class   modm :: AdcSampler <   class   AdcInterrupt ,   uint8_t   Channels ,   uint32_t   Oversamples = 1   > ;  class   modm :: Adns9800 <   typename   Spi   ,   typename   Cs    > ;  class   modm :: Ads7843 <   typename   Spi   ,   typename   Cs   ,   typename   Int    > ;  class   modm :: Amsys5915 <   typename   I2cMaster    > ;  class   modm :: BdHeap <   size_t   DeviceSize_ ,   bool   externalMemory = false   > ;  class   modm :: BdMirror <   typename   BlockDeviceA   ,   typename   BlockDeviceB    > ;  class   modm :: BdSpiFlash <   typename   Spi   ,   typename   Cs   ,   uint32_t   flashSize   > ;  class   modm :: BitbangMemoryInterface <   typename   PORT   ,   typename   CS   ,   typename   CD   ,   typename   WR    > ;  class   modm :: Bme280 <   typename   I2cMaster    > ;  class   modm :: Bmp085 <   typename   I2cMaster    > ;  class   modm :: CanBitTimingMcp2515 <   int32_t   Clk ,   int32_t   Bitrate   > ;  class   modm :: CanLawicelFormatter ;  class   modm :: DogL128 <   typename   SPI   ,   typename   CS   ,   typename   A0   ,   typename   Reset   ,   bool   TopView = false   > ;  class   modm :: DogM081 <   typename   SPI   ,   typename   CS   ,   typename   RS    > ;  class   modm :: DogM128 <   typename   SPI   ,   typename   CS   ,   typename   A0   ,   typename   Reset   ,   bool   TopView = false   > ;  class   modm :: DogM132 <   typename   SPI   ,   typename   CS   ,   typename   A0   ,   typename   Reset   ,   bool   TopView = false   > ;  class   modm :: DogM162 <   typename   SPI   ,   typename   CS   ,   typename   RS    > ;  class   modm :: DogM163 <   typename   SPI   ,   typename   CS   ,   typename   RS    > ;  class   modm :: DogS102 <   typename   SPI   ,   typename   CS   ,   typename   A0   ,   typename   Reset   ,   bool   TopView = false   > ;  class   modm :: Drv832xSpi <   class   SpiMaster   ,   class   Cs    > ;  class   modm :: Ds1302 <   class   PinSet    > ;  class   modm :: Ds1631 <   typename   I2cMaster    > ;  class   modm :: Ds18b20 <   typename   OneWire    > ;  class   modm :: Ft245 <   typename   PORT   ,   typename   RD   ,   typename   WR   ,   typename   RXF   ,   typename   TXE    > ;  class   modm :: Ft6x06 <   typename   I2cMaster    > ;  class   modm :: HclaX <   typename   I2cMaster    > ;  class   modm :: Hd44780 <   typename   DATA   ,   typename   RW   ,   typename   RS   ,   typename   E    > ;  class   modm :: Hd44780Base <   typename   DATA   ,   typename   RW   ,   typename   RS   ,   typename   E    > ;  class   modm :: Hd44780Dual <   typename   DATA   ,   typename   RW   ,   typename   RS   ,   typename   E1   ,   typename   E2    > ;  class   modm :: Hmc5843 <   typename   I2cMaster    > ;  class   modm :: Hmc5883 <   typename   I2cMaster    > ;  class   modm :: Hmc58x3 <   typename   I2cMaster    > ;  class   modm :: Hmc6343 <   class   I2cMaster    > ;  class   modm :: I2cEeprom <   typename   I2cMaster    > ;  class   modm :: Itg3200 <   typename   I2cMaster    > ;  class   modm :: L3gd20 <   class   Transport    > ;  class   modm :: Lis302dl <   class   Transport    > ;  class   modm :: Lis3TransportI2c <   class   I2cMaster    > ;  class   modm :: Lis3TransportSpi <   class   SpiMaster   ,   class   Cs    > ;  class   modm :: Lis3dsh <   class   Transport    > ;  class   modm :: Lm75 <   class   I2cMaster    > ;  class   modm :: Lsm303a <   class   I2cMaster    > ;  class   modm :: Ltc2984 <   class   SpiMaster   ,   class   Cs    > ;  class   modm :: MAX6966 <   typename   Spi   ,   typename   Cs   ,   uint8_t   DRIVERS = 1   > ;  class   modm :: Max7219 <   typename   SPI ,   typename   CS ,   uint8_t   MODULES = 1   > ;  class   modm :: Max7219matrix <   typename   SPI   ,   typename   CS   ,   uint8_t   COLUMNS = 1 ,   uint8_t   ROWS = 1   > ;  class   modm :: Mcp23TransportI2c <   class   I2cMaster    > ;  class   modm :: Mcp23TransportSpi <   class   SpiMaster   ,   class   Cs    > ;  class   modm :: Mcp23x17 <   class   Transport    > ;  class   modm :: Mcp2515 <   typename   SPI   ,   typename   CS   ,   typename   INT    > ;  class   modm :: MemoryBus <   typename   PORT   ,   typename   CS   ,   typename   RD   ,   typename   WR    > ;  class   modm :: Nokia5110 <   typename   Spi   ,   typename   Ce   ,   typename   Dc   ,   typename   Reset    > ;  class   modm :: Nrf24Config <   typename   Nrf24Phy    > ;  class   modm :: Nrf24Data <   typename   Nrf24Phy   > ;  class   modm :: Nrf24Phy <   typename   Spi   ,   typename   Csn   ,   typename   Ce    > ;  class   modm :: ParallelTft <   typename   INTERFACE    > ;  class   modm :: Pca8574 <   class   I2cMaster    > ;  class   modm :: Pca9535 <   typename   I2cMaster    > ;  class   modm :: Pca9685 <   typename   I2cMaster    > ;  class   modm :: SiemensS65Common <   typename   SPI   ,   typename   CS   ,   typename   RS   ,   typename   Reset    > ;  class   modm :: SiemensS65Landscape <   typename   SPI   ,   typename   CS   ,   typename   RS   ,   typename   Reset    > ;  class   modm :: SiemensS65Portrait <   typename   SPI   ,   typename   CS   ,   typename   RS   ,   typename   Reset    > ;  class   modm :: SiemensS75Common <   typename   MEMORY ,   typename   RESET ,   uint16_t   WIDTH ,   uint16_t   HEIGHT ,   modm :: Orientation   ORIENTATION   > ;  class   modm :: SiemensS75LandscapeLeft <   typename   MEMORY   ,   typename   RESET    > ;  class   modm :: SiemensS75LandscapeRight <   typename   MEMORY   ,   typename   RESET    > ;  class   modm :: SiemensS75Portrait <   typename   MEMORY   ,   typename   RESET    > ;  class   modm :: SiemensS75PortraitUpsideDown <   typename   MEMORY   ,   typename   RESET    > ;  class   modm :: Ssd1306 <   class   I2cMaster   ,   uint8_t   Height = 64   > ;  class   modm :: St7036 <   typename   SPI ,   typename   CS ,   typename   RS ,   unsigned   int   Width ,   unsigned   int   Heigth   > ;  class   modm :: St7565 <   typename   SPI ,   typename   CS ,   typename   A0 ,   typename   Reset ,   unsigned   int   Width ,   unsigned   int   Height ,   bool   TopView   > ;  class   modm :: Tcs3414 :: uint16_t_LOW_HIGH ;  class   modm :: Tcs3414 <   typename   I2cMaster   > ;  class   modm :: Tcs3472 :: uint16_t_LOW_HIGH ;  class   modm :: Tcs3472 <   typename   I2cMaster   > ;  class   modm :: TftMemoryBus16Bit ;  class   modm :: TftMemoryBus8Bit ;  class   modm :: TftMemoryBus8BitGpio <   typename   PORT   ,   typename   CS   ,   typename   RD   ,   typename   WR   ,   typename   CD    > ;  class   modm :: Tmp102 <   class   I2cMaster    > ;  class   modm :: Tmp175 <   typename   I2cMaster    > ;  class   modm :: Vl53l0 <   typename   I2cMaster    > ;  class   modm :: Vl6180 <   typename   I2cMaster    > ;  class   modm :: bme280data :: Data ;  class   modm :: bme280data :: DataDouble ;  class   modm :: bmp085data :: Data ;  class   modm :: bmp085data :: DataBase ;  class   modm :: bmp085data :: DataDouble ;  class   modm :: fat :: Directory ;  class   modm :: fat :: File ;  class   modm :: fat :: FileInfo ;  class   modm :: fat :: FileSystem ;  class   modm :: fat :: PhysicalVolume ;  // Struct  struct   modm :: BdSpiFlash :: JedecId ;  struct   modm :: CanBitTimingMcp2515 :: CanBitTimingConfiguration ;  struct   modm :: Hd44780Base :: Bus <   Data ,   Enable ,   4   > ;  struct   modm :: Hd44780Base :: Bus <   Data ,   Enable ,   8   > ;  struct   modm :: Hd44780Base :: Bus <   typename   Data   ,   typename   Enable   ,   uint8_t   Width   > ;  struct   modm :: Mcp23x17 :: Memory ;  struct   modm :: Nrf24Data :: Frame ;  struct   modm :: Nrf24Data :: Header ;  struct   modm :: Nrf24Data :: Packet :: Payload ;  struct   modm :: Nrf24Data :: Packet ;  struct   modm :: Nrf24Register ;  struct   modm :: ad7280a :: ConversionValue ;  struct   modm :: ad7280a :: RegisterValue ;  struct   modm :: ad7928 :: Data ;  struct   modm :: ad7928 ;  struct   modm :: adns9800 ;  struct   modm :: amsys5915 :: Data ;  struct   modm :: amsys5915 ;  struct   modm :: bme280 ;  struct   modm :: bme280data :: Calibration ;  struct   modm :: bme280data :: DataBase ;  struct   modm :: bmp085 ;  struct   modm :: bmp085data :: Calibration ;  struct   modm :: drv832xSpi ;  struct   modm :: ds1302 :: Config ;  struct   modm :: ds1302 :: Data ;  struct   modm :: ds1302 ;  struct   modm :: ds1631 ;  struct   modm :: ft6x06 :: Data ;  struct   modm :: ft6x06 :: touch_t ;  struct   modm :: ft6x06 ;  struct   modm :: hclax :: Data ;  struct   modm :: hclax ;  struct   modm :: hmc5843 ;  struct   modm :: hmc5883 ;  struct   modm :: hmc58x3 :: Data ;  struct   modm :: hmc58x3 ;  struct   modm :: hmc6343 :: Data ;  struct   modm :: hmc6343 ;  struct   modm :: itg3200 :: Data ;  struct   modm :: itg3200 ;  struct   modm :: l3gd20 :: Data ;  struct   modm :: l3gd20 ;  struct   modm :: lis302dl :: Data ;  struct   modm :: lis302dl ;  struct   modm :: lis3dsh :: Data ;  struct   modm :: lis3dsh ;  struct   modm :: lm75 :: Data ;  struct   modm :: lm75 ;  struct   modm :: lsm303a :: Data ;  struct   modm :: lsm303a ;  struct   modm :: ltc2984 :: Configuration :: Rsense ;  struct   modm :: ltc2984 :: Configuration :: Rtd ;  struct   modm :: ltc2984 :: Configuration ;  struct   modm :: ltc2984 :: Data ;  struct   modm :: ltc2984 ;  struct   modm :: mcp23x17 ;  struct   modm :: pca8574 ;  struct   modm :: pca9535 ;  struct   modm :: pca9685 ;  struct   modm :: ssd1306 ;  struct   modm :: tcs3414 ;  struct   modm :: tcs3472 ;  struct   modm :: tmp102 :: Data ;  struct   modm :: tmp102 ;  struct   modm :: tmp175 ;  struct   modm :: vl53l0 :: Data ;  struct   modm :: vl53l0 :: TimeOverhead ;  struct   modm :: vl53l0 ;  struct   modm :: vl6180 :: Data ;  struct   modm :: vl6180 ;  // Function  IOStream &   modm :: operator << ( IOStream   & os ,   const   ad7280a :: ConversionValue   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   ad7280a :: RegisterValue   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: CsaControl_t   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: DriverControl_t   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: FaultStatus1_t   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: GateDriveHS_t   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: GateDriveLS_t   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: OcpControl_t   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: VgsStatus2_t   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   ltc2984 :: Data   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   ltc2984 :: Data :: Status   & c );  IOStream &   modm :: operator << ( IOStream   & out ,   const   ad7928 :: Data   & data );  ltc2984 :: CommandStatus   modm :: operator | ( ltc2984 :: CommandStatus   r ,   ltc2984 :: Channel   c );  ltc2984 :: Register   modm :: operator + ( ltc2984 :: Register   r ,   ltc2984 :: Channel   c );  // Enum  enum   Average ;  enum   BFPCTRL ;  enum   Brightness ;  enum   CANCTRL ;  enum   CANINTE ;  enum   CANINTF ;  enum   CANSTAT ;  enum   CNF1 ;  enum   CNF2 ;  enum   CNF3 ;  enum   Cell ;  enum   Channel ;  enum   Config ;  enum   Current ;  enum   Device ;  enum   EFLG ;  enum   RXB0CTRL ;  enum   RXB1CTRL ;  enum   RXBnDLC ;  enum   RXBnSIDL ;  enum   Register ;  enum   Register ;  enum   Register ;  enum   RxStatus ;  enum   Status ;  enum   TXBnCTRL ;  enum   TXBnSIDL ;  enum   TXRTSCTRL ;  enum   Time ;  enum   class   Orientation ;  // Variable  const   uint8_t   modm :: max6966 :: READ   =   0x80 ;  const   uint8_t   modm :: max6966 :: WRITE   =   0x00 ;  const   uint8_t   modm :: st7565 :: configuration_dogm132 [ 12 ]   ;  const   uint8_t   modm :: st7565 :: configuration_dogs102 [ 11 ]   ;  const   uint8_t   modm :: st7565 :: configuration_dogx128 [ 12 ]   ;  constexpr   uint16_t   firmware_length   =   3070 ;  constexpr   uint8_t   firmware_data [ firmware_length ]   ;  struct   modm :: Tcs3414 :: Data :: @ 0   modm :: Tcs3414 <   I2cMaster   >:: Data :: @ 1   ;  struct   modm :: Tcs3472 :: Data :: @ 2   modm :: Tcs3472 <   I2cMaster   >:: Data :: @ 3   ;  uint16_t_LOW_HIGH   modm :: Tcs3414 <   I2cMaster   >:: Data :: blue   ;  uint16_t_LOW_HIGH   modm :: Tcs3414 <   I2cMaster   >:: Data :: clear   ;  uint16_t_LOW_HIGH   modm :: Tcs3414 <   I2cMaster   >:: Data :: green   ;  uint16_t_LOW_HIGH   modm :: Tcs3414 <   I2cMaster   >:: Data :: red   ;  uint16_t_LOW_HIGH   modm :: Tcs3472 <   I2cMaster   >:: Data :: blue   ;  uint16_t_LOW_HIGH   modm :: Tcs3472 <   I2cMaster   >:: Data :: clear   ;  uint16_t_LOW_HIGH   modm :: Tcs3472 <   I2cMaster   >:: Data :: green   ;  uint16_t_LOW_HIGH   modm :: Tcs3472 <   I2cMaster   >:: Data :: red   ;  uint8_t   modm :: Tcs3414 <   I2cMaster   >:: Data :: dataBytes [ 2   * 4 ]   ;  uint8_t   modm :: Tcs3472 <   I2cMaster   >:: Data :: dataBytes [ 2   * 4 ]   ;  // Typedef  typedef   DRESULT   modm :: fat :: Result ;  typedef   DSTATUS   modm :: fat :: Status ;  // Define  #define MCP2515_FILTER(id)  #define MCP2515_FILTER_EXTENDED(id)  #define MCP2515_MASK(id)  #define MCP2515_MASK_EXTENDED(id)  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL  #define S65_LPC_ACCELERATED  #define ST7565_ADC_NORMAL  #define ST7565_ADC_REVERSE  #define ST7565_BIAS_1_7  #define ST7565_BIAS_1_9  #define ST7565_BOOSTER_234  #define ST7565_BOOSTER_5  #define ST7565_BOOSTER_6  #define ST7565_BOOSTER_SET  #define ST7565_COL_ADDRESS_LSB  #define ST7565_COL_ADDRESS_MSB  #define ST7565_INDICATOR_MODE_1HZ  #define ST7565_INDICATOR_MODE_2HZ  #define ST7565_INDICATOR_MODE_OFF  #define ST7565_INDICATOR_MODE_ON  #define ST7565_INDICATOR_OFF  #define ST7565_INDICATOR_ON  #define ST7565_NOP  #define ST7565_NORMAL  #define ST7565_OFF  #define ST7565_ON  #define ST7565_PAGE_ADDRESS  #define ST7565_POWER_CONTROL  #define ST7565_POWER_LOW_POWER  #define ST7565_POWER_LOW_VOLTAGE  #define ST7565_POWER_WIDE_RANGE  #define ST7565_RESET_CMD  #define ST7565_REVERSE  #define ST7565_SCAN_DIR_NORMAL  #define ST7565_SCAN_DIR_REVERSE  #define ST7565_SHOW_ALL_POINTS  #define ST7565_SHOW_NORMAL  #define ST7565_VOLTAGE  #define ST7565_VOLUME_MODE_1  #define ST7565_VOLUME_MODE_2",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver/#dependencies",
            "text": "modm:driver     modm_driver   modm:  driver     modm_driver_ad7280a    modm:  driver:  ad7280a       modm_driver_ad7280a->modm_driver       modm_driver_ad7928    modm:  driver:  ad7928       modm_driver_ad7928->modm_driver       modm_driver_adc_sampler    modm:  driver:  adc_sampler       modm_driver_adc_sampler->modm_driver       modm_driver_adns9800    modm:  driver:  adns9800       modm_driver_adns9800->modm_driver       modm_driver_ads7843    modm:  driver:  ads7843       modm_driver_ads7843->modm_driver       modm_driver_amsys5915    modm:  driver:  amsys5915       modm_driver_amsys5915->modm_driver       modm_driver_block_device    modm:  driver:  block.device       modm_driver_block_device->modm_driver       modm_driver_bme280    modm:  driver:  bme280       modm_driver_bme280->modm_driver       modm_driver_bmp085    modm:  driver:  bmp085       modm_driver_bmp085->modm_driver       modm_driver_drv832x_spi    modm:  driver:  drv832x_spi       modm_driver_drv832x_spi->modm_driver       modm_driver_ds1302    modm:  driver:  ds1302       modm_driver_ds1302->modm_driver       modm_driver_ds1631    modm:  driver:  ds1631       modm_driver_ds1631->modm_driver       modm_driver_ds18b20    modm:  driver:  ds18b20       modm_driver_ds18b20->modm_driver       modm_driver_ea_dog    modm:  driver:  ea_dog       modm_driver_ea_dog->modm_driver       modm_driver_fat    modm:  driver:  fat       modm_driver_fat->modm_driver       modm_driver_ft245    modm:  driver:  ft245       modm_driver_ft245->modm_driver       modm_driver_ft6x06    modm:  driver:  ft6x06       modm_driver_ft6x06->modm_driver       modm_driver_hclax    modm:  driver:  hclax       modm_driver_hclax->modm_driver       modm_driver_hd44780    modm:  driver:  hd44780       modm_driver_hd44780->modm_driver       modm_driver_hmc58x    modm:  driver:  hmc58x       modm_driver_hmc58x->modm_driver       modm_driver_hmc6343    modm:  driver:  hmc6343       modm_driver_hmc6343->modm_driver       modm_driver_i2c_eeprom    modm:  driver:  i2c.eeprom       modm_driver_i2c_eeprom->modm_driver       modm_driver_itg3200    modm:  driver:  itg3200       modm_driver_itg3200->modm_driver       modm_driver_l3gd20    modm:  driver:  l3gd20       modm_driver_l3gd20->modm_driver       modm_driver_lawicel    modm:  driver:  lawicel       modm_driver_lawicel->modm_driver       modm_driver_lis3_transport    modm:  driver:  lis3.transport       modm_driver_lis3_transport->modm_driver       modm_driver_lis302dl    modm:  driver:  lis302dl       modm_driver_lis302dl->modm_driver       modm_driver_lis3dsh    modm:  driver:  lis3dsh       modm_driver_lis3dsh->modm_driver       modm_driver_lm75    modm:  driver:  lm75       modm_driver_lm75->modm_driver       modm_driver_lsm303a    modm:  driver:  lsm303a       modm_driver_lsm303a->modm_driver       modm_driver_ltc2984    modm:  driver:  ltc2984       modm_driver_ltc2984->modm_driver       modm_driver_max6966    modm:  driver:  max6966       modm_driver_max6966->modm_driver       modm_driver_max7219    modm:  driver:  max7219       modm_driver_max7219->modm_driver       modm_driver_mcp23x17    modm:  driver:  mcp23x17       modm_driver_mcp23x17->modm_driver       modm_driver_mcp2515    modm:  driver:  mcp2515       modm_driver_mcp2515->modm_driver       modm_driver_memory_bus    modm:  driver:  memory_bus       modm_driver_memory_bus->modm_driver       modm_driver_nokia5110    modm:  driver:  nokia5110       modm_driver_nokia5110->modm_driver       modm_driver_nrf24    modm:  driver:  nrf24       modm_driver_nrf24->modm_driver       modm_driver_parallel_tft_display    modm:  driver:  parallel_tft_display       modm_driver_parallel_tft_display->modm_driver       modm_driver_pca8574    modm:  driver:  pca8574       modm_driver_pca8574->modm_driver       modm_driver_pca9535    modm:  driver:  pca9535       modm_driver_pca9535->modm_driver       modm_driver_pca9685    modm:  driver:  pca9685       modm_driver_pca9685->modm_driver       modm_driver_siemens_s65    modm:  driver:  siemens_s65       modm_driver_siemens_s65->modm_driver       modm_driver_siemens_s75    modm:  driver:  siemens_s75       modm_driver_siemens_s75->modm_driver       modm_driver_ssd1306    modm:  driver:  ssd1306       modm_driver_ssd1306->modm_driver       modm_driver_tcs3414    modm:  driver:  tcs3414       modm_driver_tcs3414->modm_driver       modm_driver_tcs3472    modm:  driver:  tcs3472       modm_driver_tcs3472->modm_driver       modm_driver_tmp102    modm:  driver:  tmp102       modm_driver_tmp102->modm_driver       modm_driver_tmp175    modm:  driver:  tmp175       modm_driver_tmp175->modm_driver       modm_driver_vl53l0    modm:  driver:  vl53l0       modm_driver_vl53l0->modm_driver       modm_driver_vl6180    modm:  driver:  vl6180       modm_driver_vl6180->modm_driver",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-ad7280a/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:ad7280a\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nAd7280a\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCs\n \n,\n \ntypename\n \nCnvst\n \n,\n \nint\n \nN\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nad7280a\n::\nConversionValue\n;\n\n\nstruct\n \nmodm\n::\nad7280a\n::\nRegisterValue\n;\n\n\n\n// Function\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nad7280a\n::\nConversionValue\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nad7280a\n::\nRegisterValue\n \n&\nc\n);\n\n\n\n// Enum\n\n\nenum\n \nAverage\n;\n\n\nenum\n \nCell\n;\n\n\nenum\n \nChannel\n;\n\n\nenum\n \nDevice\n;\n\n\nenum\n \nRegister\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:ad7280a\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7280a\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_ad7280a",
            "title": "modm:driver:ad7280a"
        },
        {
            "location": "/reference/module/modm-driver-ad7280a/#modmdriverad7280a",
            "text": "",
            "title": "modm:driver:ad7280a"
        },
        {
            "location": "/reference/module/modm-driver-ad7280a/#content",
            "text": "// Class  class   modm :: Ad7280a <   typename   Spi   ,   typename   Cs   ,   typename   Cnvst   ,   int   N   > ;  // Struct  struct   modm :: ad7280a :: ConversionValue ;  struct   modm :: ad7280a :: RegisterValue ;  // Function  IOStream &   modm :: operator << ( IOStream   & os ,   const   ad7280a :: ConversionValue   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   ad7280a :: RegisterValue   & c );  // Enum  enum   Average ;  enum   Cell ;  enum   Channel ;  enum   Device ;  enum   Register ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-ad7280a/#dependencies",
            "text": "modm:driver:ad7280a     modm_driver_ad7280a   modm:  driver:  ad7280a     modm_architecture_delay    modm:  architecture:  delay       modm_driver_ad7280a->modm_architecture_delay       modm_architecture_gpio    modm:  architecture:  gpio       modm_driver_ad7280a->modm_architecture_gpio       modm_architecture_spi    modm:  architecture:  spi       modm_driver_ad7280a->modm_architecture_spi       modm_driver    modm:  driver       modm_driver_ad7280a->modm_driver       modm_io    modm:  io       modm_driver_ad7280a->modm_io       modm_math_utils    modm:  math:  utils       modm_driver_ad7280a->modm_math_utils       modm_utils    modm:  utils       modm_driver_ad7280a->modm_utils       modm_test_driver    modm:  test:  driver       modm_test_driver->modm_driver_ad7280a",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-ad7928/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:ad7928\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nAd7928\n<\n \ntypename\n \nSpiMaster\n \n,\n \ntypename\n \nCs\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nad7928\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nad7928\n;\n\n\n\n// Function\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nout\n,\n \nconst\n \nad7928\n::\nData\n \n&\ndata\n);\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:ad7928\n\n\n\n\n\n\n\n\nmodm_driver_ad7928\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7928\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_architecture_spi_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_processing_resumable",
            "title": "modm:driver:ad7928"
        },
        {
            "location": "/reference/module/modm-driver-ad7928/#modmdriverad7928",
            "text": "",
            "title": "modm:driver:ad7928"
        },
        {
            "location": "/reference/module/modm-driver-ad7928/#content",
            "text": "// Class  class   modm :: Ad7928 <   typename   SpiMaster   ,   typename   Cs    > ;  // Struct  struct   modm :: ad7928 :: Data ;  struct   modm :: ad7928 ;  // Function  IOStream &   modm :: operator << ( IOStream   & out ,   const   ad7928 :: Data   & data );",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-ad7928/#dependencies",
            "text": "modm:driver:ad7928     modm_driver_ad7928   modm:  driver:  ad7928     modm_architecture_accessor    modm:  architecture:  accessor       modm_driver_ad7928->modm_architecture_accessor       modm_architecture_delay    modm:  architecture:  delay       modm_driver_ad7928->modm_architecture_delay       modm_architecture_gpio    modm:  architecture:  gpio       modm_driver_ad7928->modm_architecture_gpio       modm_architecture_register    modm:  architecture:  register       modm_driver_ad7928->modm_architecture_register       modm_architecture_spi_device    modm:  architecture:  spi.device       modm_driver_ad7928->modm_architecture_spi_device       modm_driver    modm:  driver       modm_driver_ad7928->modm_driver       modm_io    modm:  io       modm_driver_ad7928->modm_io       modm_processing_resumable    modm:  processing:  resumable       modm_driver_ad7928->modm_processing_resumable",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-adc_sampler/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:adc_sampler\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nAdcSampler\n<\n \nclass\n \nAdcInterrupt\n,\n \nuint8_t\n \nChannels\n,\n \nuint32_t\n \nOversamples\n=\n1\n \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:adc_sampler\n\n\n\n\n\n\n\n\nmodm_driver_adc_sampler\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nadc_sampler\n\n\n\n\n\n\n\n\nmodm_architecture_adc\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nadc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adc_sampler->modm_architecture_adc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adc_sampler->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adc_sampler->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adc_sampler->modm_utils",
            "title": "modm:driver:adc_sampler"
        },
        {
            "location": "/reference/module/modm-driver-adc_sampler/#modmdriveradc_sampler",
            "text": "",
            "title": "modm:driver:adc_sampler"
        },
        {
            "location": "/reference/module/modm-driver-adc_sampler/#content",
            "text": "// Class  class   modm :: AdcSampler <   class   AdcInterrupt ,   uint8_t   Channels ,   uint32_t   Oversamples = 1   > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-adc_sampler/#dependencies",
            "text": "modm:driver:adc_sampler     modm_driver_adc_sampler   modm:  driver:  adc_sampler     modm_architecture_adc    modm:  architecture:  adc       modm_driver_adc_sampler->modm_architecture_adc       modm_driver    modm:  driver       modm_driver_adc_sampler->modm_driver       modm_math_utils    modm:  math:  utils       modm_driver_adc_sampler->modm_math_utils       modm_utils    modm:  utils       modm_driver_adc_sampler->modm_utils",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-adns9800/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:adns9800\n\u00b6\n\n\nOptions\n\u00b6\n\n\nfirmware\n\u00b6\n\n\nSelect the firmware version to initialize the device with.: \na6\n \u2208 \n{ a4, a4b, a5, a6 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nAdns9800\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCs\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nadns9800\n;\n\n\n\n// Variable\n\n\nconstexpr\n \nuint16_t\n \nfirmware_length\n \n=\n \n3070\n;\n\n\nconstexpr\n \nuint8_t\n \nfirmware_data\n[\nfirmware_length\n]\n \n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:adns9800\n\n\n\n\n\n\n\n\nmodm_driver_adns9800\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nadns9800\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adns9800->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adns9800->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adns9800->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adns9800->modm_driver",
            "title": "modm:driver:adns9800"
        },
        {
            "location": "/reference/module/modm-driver-adns9800/#modmdriveradns9800",
            "text": "",
            "title": "modm:driver:adns9800"
        },
        {
            "location": "/reference/module/modm-driver-adns9800/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-driver-adns9800/#firmware",
            "text": "Select the firmware version to initialize the device with.:  a6  \u2208  { a4, a4b, a5, a6 }",
            "title": "firmware"
        },
        {
            "location": "/reference/module/modm-driver-adns9800/#content",
            "text": "// Class  class   modm :: Adns9800 <   typename   Spi   ,   typename   Cs    > ;  // Struct  struct   modm :: adns9800 ;  // Variable  constexpr   uint16_t   firmware_length   =   3070 ;  constexpr   uint8_t   firmware_data [ firmware_length ]   ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-adns9800/#dependencies",
            "text": "modm:driver:adns9800     modm_driver_adns9800   modm:  driver:  adns9800     modm_architecture_delay    modm:  architecture:  delay       modm_driver_adns9800->modm_architecture_delay       modm_architecture_spi    modm:  architecture:  spi       modm_driver_adns9800->modm_architecture_spi       modm_debug    modm:  debug       modm_driver_adns9800->modm_debug       modm_driver    modm:  driver       modm_driver_adns9800->modm_driver",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-ads7843/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:ads7843\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nAds7843\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCs\n \n,\n \ntypename\n \nInt\n  \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:ads7843\n\n\n\n\n\n\n\n\nmodm_driver_ads7843\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nads7843\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ads7843->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ads7843->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ads7843->modm_ui_display",
            "title": "modm:driver:ads7843"
        },
        {
            "location": "/reference/module/modm-driver-ads7843/#modmdriverads7843",
            "text": "",
            "title": "modm:driver:ads7843"
        },
        {
            "location": "/reference/module/modm-driver-ads7843/#content",
            "text": "// Class  class   modm :: Ads7843 <   typename   Spi   ,   typename   Cs   ,   typename   Int    > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-ads7843/#dependencies",
            "text": "modm:driver:ads7843     modm_driver_ads7843   modm:  driver:  ads7843     modm_architecture_delay    modm:  architecture:  delay       modm_driver_ads7843->modm_architecture_delay       modm_driver    modm:  driver       modm_driver_ads7843->modm_driver       modm_ui_display    modm:  ui:  display       modm_driver_ads7843->modm_ui_display",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-amsys5915/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:amsys5915\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nAmsys5915\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\namsys5915\n::\nData\n;\n\n\nstruct\n \nmodm\n::\namsys5915\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:amsys5915\n\n\n\n\n\n\n\n\nmodm_driver_amsys5915\n\n\n\n\nmodm:\n\n\ndriver:\n\n\namsys5915\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_amsys5915->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_amsys5915->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_amsys5915->modm_math_utils",
            "title": "modm:driver:amsys5915"
        },
        {
            "location": "/reference/module/modm-driver-amsys5915/#modmdriveramsys5915",
            "text": "",
            "title": "modm:driver:amsys5915"
        },
        {
            "location": "/reference/module/modm-driver-amsys5915/#content",
            "text": "// Class  class   modm :: Amsys5915 <   typename   I2cMaster    > ;  // Struct  struct   modm :: amsys5915 :: Data ;  struct   modm :: amsys5915 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-amsys5915/#dependencies",
            "text": "modm:driver:amsys5915     modm_driver_amsys5915   modm:  driver:  amsys5915     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_amsys5915->modm_architecture_i2c_device       modm_driver    modm:  driver       modm_driver_amsys5915->modm_driver       modm_math_utils    modm:  math:  utils       modm_driver_amsys5915->modm_math_utils",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-block-device/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:block.device\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nBdHeap\n<\n \nsize_t\n \nDeviceSize_\n,\n \nbool\n \nexternalMemory\n=\nfalse\n \n>\n;\n\n\nclass\n \nmodm\n::\nBdMirror\n<\n \ntypename\n \nBlockDeviceA\n \n,\n \ntypename\n \nBlockDeviceB\n  \n>\n;\n\n\nclass\n \nmodm\n::\nBdSpiFlash\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCs\n \n,\n \nuint32_t\n \nflashSize\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nBdSpiFlash\n::\nJedecId\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:block.device\n\n\n\n\n\n\n\n\nmodm_driver_block_device\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_heap\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device:\n\n\nheap\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_heap->modm_driver_block_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_mirror\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device:\n\n\nmirror\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_mirror->modm_driver_block_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_spi_flash\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device:\n\n\nspi.flash\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_spi_flash->modm_driver_block_device",
            "title": "modm:driver:block.device"
        },
        {
            "location": "/reference/module/modm-driver-block-device/#modmdriverblockdevice",
            "text": "",
            "title": "modm:driver:block.device"
        },
        {
            "location": "/reference/module/modm-driver-block-device/#content",
            "text": "// Class  class   modm :: BdHeap <   size_t   DeviceSize_ ,   bool   externalMemory = false   > ;  class   modm :: BdMirror <   typename   BlockDeviceA   ,   typename   BlockDeviceB    > ;  class   modm :: BdSpiFlash <   typename   Spi   ,   typename   Cs   ,   uint32_t   flashSize   > ;  // Struct  struct   modm :: BdSpiFlash :: JedecId ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-block-device/#dependencies",
            "text": "modm:driver:block.device     modm_driver_block_device   modm:  driver:  block.device     modm_driver    modm:  driver       modm_driver_block_device->modm_driver       modm_driver_block_device_heap    modm:  driver:  block.device:  heap       modm_driver_block_device_heap->modm_driver_block_device       modm_driver_block_device_mirror    modm:  driver:  block.device:  mirror       modm_driver_block_device_mirror->modm_driver_block_device       modm_driver_block_device_spi_flash    modm:  driver:  block.device:  spi.flash       modm_driver_block_device_spi_flash->modm_driver_block_device",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-block-device-heap/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:block.device:heap\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nBdHeap\n<\n \nsize_t\n \nDeviceSize_\n,\n \nbool\n \nexternalMemory\n=\nfalse\n \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:block.device:heap\n\n\n\n\n\n\n\n\nmodm_driver_block_device_heap\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device:\n\n\nheap\n\n\n\n\n\n\n\n\nmodm_architecture_block_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nblock.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_heap->modm_architecture_block_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_heap->modm_driver_block_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_heap->modm_utils",
            "title": "modm:driver:block.device:heap"
        },
        {
            "location": "/reference/module/modm-driver-block-device-heap/#modmdriverblockdeviceheap",
            "text": "",
            "title": "modm:driver:block.device:heap"
        },
        {
            "location": "/reference/module/modm-driver-block-device-heap/#content",
            "text": "// Class  class   modm :: BdHeap <   size_t   DeviceSize_ ,   bool   externalMemory = false   > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-block-device-heap/#dependencies",
            "text": "modm:driver:block.device:heap     modm_driver_block_device_heap   modm:  driver:  block.device:  heap     modm_architecture_block_device    modm:  architecture:  block.device       modm_driver_block_device_heap->modm_architecture_block_device       modm_driver_block_device    modm:  driver:  block.device       modm_driver_block_device_heap->modm_driver_block_device       modm_utils    modm:  utils       modm_driver_block_device_heap->modm_utils",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-block-device-mirror/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:block.device:mirror\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nBdMirror\n<\n \ntypename\n \nBlockDeviceA\n \n,\n \ntypename\n \nBlockDeviceB\n  \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:block.device:mirror\n\n\n\n\n\n\n\n\nmodm_driver_block_device_mirror\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device:\n\n\nmirror\n\n\n\n\n\n\n\n\nmodm_architecture_block_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nblock.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_mirror->modm_architecture_block_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_mirror->modm_driver_block_device",
            "title": "modm:driver:block.device:mirror"
        },
        {
            "location": "/reference/module/modm-driver-block-device-mirror/#modmdriverblockdevicemirror",
            "text": "",
            "title": "modm:driver:block.device:mirror"
        },
        {
            "location": "/reference/module/modm-driver-block-device-mirror/#content",
            "text": "// Class  class   modm :: BdMirror <   typename   BlockDeviceA   ,   typename   BlockDeviceB    > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-block-device-mirror/#dependencies",
            "text": "modm:driver:block.device:mirror     modm_driver_block_device_mirror   modm:  driver:  block.device:  mirror     modm_architecture_block_device    modm:  architecture:  block.device       modm_driver_block_device_mirror->modm_architecture_block_device       modm_driver_block_device    modm:  driver:  block.device       modm_driver_block_device_mirror->modm_driver_block_device",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-block-device-spi-flash/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:block.device:spi.flash\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nBdSpiFlash\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCs\n \n,\n \nuint32_t\n \nflashSize\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nBdSpiFlash\n::\nJedecId\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:block.device:spi.flash\n\n\n\n\n\n\n\n\nmodm_driver_block_device_spi_flash\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device:\n\n\nspi.flash\n\n\n\n\n\n\n\n\nmodm_architecture_block_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nblock.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_spi_flash->modm_architecture_block_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_spi_flash->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_spi_flash->modm_architecture_spi_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_spi_flash->modm_driver_block_device",
            "title": "modm:driver:block.device:spi.flash"
        },
        {
            "location": "/reference/module/modm-driver-block-device-spi-flash/#modmdriverblockdevicespiflash",
            "text": "",
            "title": "modm:driver:block.device:spi.flash"
        },
        {
            "location": "/reference/module/modm-driver-block-device-spi-flash/#content",
            "text": "// Class  class   modm :: BdSpiFlash <   typename   Spi   ,   typename   Cs   ,   uint32_t   flashSize   > ;  // Struct  struct   modm :: BdSpiFlash :: JedecId ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-block-device-spi-flash/#dependencies",
            "text": "modm:driver:block.device:spi.flash     modm_driver_block_device_spi_flash   modm:  driver:  block.device:  spi.flash     modm_architecture_block_device    modm:  architecture:  block.device       modm_driver_block_device_spi_flash->modm_architecture_block_device       modm_architecture_register    modm:  architecture:  register       modm_driver_block_device_spi_flash->modm_architecture_register       modm_architecture_spi_device    modm:  architecture:  spi.device       modm_driver_block_device_spi_flash->modm_architecture_spi_device       modm_driver_block_device    modm:  driver:  block.device       modm_driver_block_device_spi_flash->modm_driver_block_device",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-bme280/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:bme280\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nBme280\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nbme280data\n::\nData\n;\n\n\nclass\n \nmodm\n::\nbme280data\n::\nDataDouble\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nbme280\n;\n\n\nstruct\n \nmodm\n::\nbme280data\n::\nCalibration\n;\n\n\nstruct\n \nmodm\n::\nbme280data\n::\nDataBase\n;\n\n\n\n// Define\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:bme280\n\n\n\n\n\n\n\n\nmodm_driver_bme280\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbme280\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_protothread\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nprotothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_processing_protothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_bme280",
            "title": "modm:driver:bme280"
        },
        {
            "location": "/reference/module/modm-driver-bme280/#modmdriverbme280",
            "text": "",
            "title": "modm:driver:bme280"
        },
        {
            "location": "/reference/module/modm-driver-bme280/#content",
            "text": "// Class  class   modm :: Bme280 <   typename   I2cMaster    > ;  class   modm :: bme280data :: Data ;  class   modm :: bme280data :: DataDouble ;  // Struct  struct   modm :: bme280 ;  struct   modm :: bme280data :: Calibration ;  struct   modm :: bme280data :: DataBase ;  // Define  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-bme280/#dependencies",
            "text": "modm:driver:bme280     modm_driver_bme280   modm:  driver:  bme280     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_bme280->modm_architecture_i2c_device       modm_architecture_register    modm:  architecture:  register       modm_driver_bme280->modm_architecture_register       modm_debug    modm:  debug       modm_driver_bme280->modm_debug       modm_driver    modm:  driver       modm_driver_bme280->modm_driver       modm_math_utils    modm:  math:  utils       modm_driver_bme280->modm_math_utils       modm_processing_protothread    modm:  processing:  protothread       modm_driver_bme280->modm_processing_protothread       modm_processing_timer    modm:  processing:  timer       modm_driver_bme280->modm_processing_timer       modm_test_driver    modm:  test:  driver       modm_test_driver->modm_driver_bme280",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-bmp085/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:bmp085\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nBmp085\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nbmp085data\n::\nData\n;\n\n\nclass\n \nmodm\n::\nbmp085data\n::\nDataBase\n;\n\n\nclass\n \nmodm\n::\nbmp085data\n::\nDataDouble\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nbmp085\n;\n\n\nstruct\n \nmodm\n::\nbmp085data\n::\nCalibration\n;\n\n\n\n// Define\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:bmp085\n\n\n\n\n\n\n\n\nmodm_driver_bmp085\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbmp085\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_protothread\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nprotothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085->modm_processing_protothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_bmp085",
            "title": "modm:driver:bmp085"
        },
        {
            "location": "/reference/module/modm-driver-bmp085/#modmdriverbmp085",
            "text": "",
            "title": "modm:driver:bmp085"
        },
        {
            "location": "/reference/module/modm-driver-bmp085/#content",
            "text": "// Class  class   modm :: Bmp085 <   typename   I2cMaster    > ;  class   modm :: bmp085data :: Data ;  class   modm :: bmp085data :: DataBase ;  class   modm :: bmp085data :: DataDouble ;  // Struct  struct   modm :: bmp085 ;  struct   modm :: bmp085data :: Calibration ;  // Define  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-bmp085/#dependencies",
            "text": "modm:driver:bmp085     modm_driver_bmp085   modm:  driver:  bmp085     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_bmp085->modm_architecture_i2c_device       modm_debug    modm:  debug       modm_driver_bmp085->modm_debug       modm_driver    modm:  driver       modm_driver_bmp085->modm_driver       modm_math_utils    modm:  math:  utils       modm_driver_bmp085->modm_math_utils       modm_processing_protothread    modm:  processing:  protothread       modm_driver_bmp085->modm_processing_protothread       modm_processing_timer    modm:  processing:  timer       modm_driver_bmp085->modm_processing_timer       modm_test_driver    modm:  test:  driver       modm_test_driver->modm_driver_bmp085",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-drv832x_spi/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:drv832x_spi\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nDrv832xSpi\n<\n \nclass\n \nSpiMaster\n \n,\n \nclass\n \nCs\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\ndrv832xSpi\n;\n\n\n\n// Function\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nCsaControl_t\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nDriverControl_t\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nFaultStatus1_t\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nGateDriveHS_t\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nGateDriveLS_t\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nOcpControl_t\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ndrv832xSpi\n::\nVgsStatus2_t\n \n&\nc\n);\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:drv832x_spi\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ndrv832x_spi\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi->modm_architecture_spi_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_drv832x_spi",
            "title": "modm:driver:drv832x_spi"
        },
        {
            "location": "/reference/module/modm-driver-drv832x_spi/#modmdriverdrv832x_spi",
            "text": "",
            "title": "modm:driver:drv832x_spi"
        },
        {
            "location": "/reference/module/modm-driver-drv832x_spi/#content",
            "text": "// Class  class   modm :: Drv832xSpi <   class   SpiMaster   ,   class   Cs    > ;  // Struct  struct   modm :: drv832xSpi ;  // Function  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: CsaControl_t   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: DriverControl_t   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: FaultStatus1_t   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: GateDriveHS_t   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: GateDriveLS_t   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: OcpControl_t   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   drv832xSpi :: VgsStatus2_t   & c );",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-drv832x_spi/#dependencies",
            "text": "modm:driver:drv832x_spi     modm_driver_drv832x_spi   modm:  driver:  drv832x_spi     modm_architecture_gpio    modm:  architecture:  gpio       modm_driver_drv832x_spi->modm_architecture_gpio       modm_architecture_register    modm:  architecture:  register       modm_driver_drv832x_spi->modm_architecture_register       modm_architecture_spi_device    modm:  architecture:  spi.device       modm_driver_drv832x_spi->modm_architecture_spi_device       modm_driver    modm:  driver       modm_driver_drv832x_spi->modm_driver       modm_processing_resumable    modm:  processing:  resumable       modm_driver_drv832x_spi->modm_processing_resumable       modm_test_driver    modm:  test:  driver       modm_test_driver->modm_driver_drv832x_spi",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-ds1302/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:ds1302\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nDs1302\n<\n \nclass\n \nPinSet\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nds1302\n::\nConfig\n;\n\n\nstruct\n \nmodm\n::\nds1302\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nds1302\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:ds1302\n\n\n\n\n\n\n\n\nmodm_driver_ds1302\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nds1302\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1302->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1302->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1302->modm_driver",
            "title": "modm:driver:ds1302"
        },
        {
            "location": "/reference/module/modm-driver-ds1302/#modmdriverds1302",
            "text": "",
            "title": "modm:driver:ds1302"
        },
        {
            "location": "/reference/module/modm-driver-ds1302/#content",
            "text": "// Class  class   modm :: Ds1302 <   class   PinSet    > ;  // Struct  struct   modm :: ds1302 :: Config ;  struct   modm :: ds1302 :: Data ;  struct   modm :: ds1302 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-ds1302/#dependencies",
            "text": "modm:driver:ds1302     modm_driver_ds1302   modm:  driver:  ds1302     modm_architecture_delay    modm:  architecture:  delay       modm_driver_ds1302->modm_architecture_delay       modm_architecture_gpio    modm:  architecture:  gpio       modm_driver_ds1302->modm_architecture_gpio       modm_driver    modm:  driver       modm_driver_ds1302->modm_driver",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-ds1631/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:ds1631\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nDs1631\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nds1631\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:ds1631\n\n\n\n\n\n\n\n\nmodm_driver_ds1631\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nds1631\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lm75\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlm75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631->modm_driver_lm75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_protothread\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nprotothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631->modm_processing_protothread",
            "title": "modm:driver:ds1631"
        },
        {
            "location": "/reference/module/modm-driver-ds1631/#modmdriverds1631",
            "text": "",
            "title": "modm:driver:ds1631"
        },
        {
            "location": "/reference/module/modm-driver-ds1631/#content",
            "text": "// Class  class   modm :: Ds1631 <   typename   I2cMaster    > ;  // Struct  struct   modm :: ds1631 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-ds1631/#dependencies",
            "text": "modm:driver:ds1631     modm_driver_ds1631   modm:  driver:  ds1631     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_ds1631->modm_architecture_i2c_device       modm_architecture_register    modm:  architecture:  register       modm_driver_ds1631->modm_architecture_register       modm_driver    modm:  driver       modm_driver_ds1631->modm_driver       modm_driver_lm75    modm:  driver:  lm75       modm_driver_ds1631->modm_driver_lm75       modm_processing_protothread    modm:  processing:  protothread       modm_driver_ds1631->modm_processing_protothread",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-ds18b20/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:ds18b20\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nDs18b20\n<\n \ntypename\n \nOneWire\n  \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:ds18b20\n\n\n\n\n\n\n\n\nmodm_driver_ds18b20\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nds18b20\n\n\n\n\n\n\n\n\nmodm_architecture_1-wire\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\n1-wire\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds18b20->modm_architecture_1-wire\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds18b20->modm_driver",
            "title": "modm:driver:ds18b20"
        },
        {
            "location": "/reference/module/modm-driver-ds18b20/#modmdriverds18b20",
            "text": "",
            "title": "modm:driver:ds18b20"
        },
        {
            "location": "/reference/module/modm-driver-ds18b20/#content",
            "text": "// Class  class   modm :: Ds18b20 <   typename   OneWire    > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-ds18b20/#dependencies",
            "text": "modm:driver:ds18b20     modm_driver_ds18b20   modm:  driver:  ds18b20     modm_architecture_1-wire    modm:  architecture:  1-wire       modm_driver_ds18b20->modm_architecture_1-wire       modm_driver    modm:  driver       modm_driver_ds18b20->modm_driver",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-ea_dog/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:ea_dog\n\u00b6\n\n\nOptions\n\u00b6\n\n\nST7036_voltage\n\u00b6\n\n\nSelect the supply voltage of the ST7036.: \n3.3V\n \u2208 \n{ 3.3V, 5V }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nDogL128\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nA0\n \n,\n \ntypename\n \nReset\n \n,\n \nbool\n \nTopView\n=\nfalse\n \n>\n;\n\n\nclass\n \nmodm\n::\nDogM081\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRS\n  \n>\n;\n\n\nclass\n \nmodm\n::\nDogM128\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nA0\n \n,\n \ntypename\n \nReset\n \n,\n \nbool\n \nTopView\n=\nfalse\n \n>\n;\n\n\nclass\n \nmodm\n::\nDogM132\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nA0\n \n,\n \ntypename\n \nReset\n \n,\n \nbool\n \nTopView\n=\nfalse\n \n>\n;\n\n\nclass\n \nmodm\n::\nDogM162\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRS\n  \n>\n;\n\n\nclass\n \nmodm\n::\nDogM163\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRS\n  \n>\n;\n\n\nclass\n \nmodm\n::\nDogS102\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nA0\n \n,\n \ntypename\n \nReset\n \n,\n \nbool\n \nTopView\n=\nfalse\n \n>\n;\n\n\nclass\n \nmodm\n::\nSt7036\n<\n \ntypename\n \nSPI\n,\n \ntypename\n \nCS\n,\n \ntypename\n \nRS\n,\n \nunsigned\n \nint\n \nWidth\n,\n \nunsigned\n \nint\n \nHeigth\n \n>\n;\n\n\nclass\n \nmodm\n::\nSt7565\n<\n \ntypename\n \nSPI\n,\n \ntypename\n \nCS\n,\n \ntypename\n \nA0\n,\n \ntypename\n \nReset\n,\n \nunsigned\n \nint\n \nWidth\n,\n \nunsigned\n \nint\n \nHeight\n,\n \nbool\n \nTopView\n \n>\n;\n\n\n\n// Variable\n\n\nconst\n \nuint8_t\n \nmodm\n::\nst7565\n::\nconfiguration_dogm132\n[\n12\n]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nst7565\n::\nconfiguration_dogs102\n[\n11\n]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nst7565\n::\nconfiguration_dogx128\n[\n12\n]\n \n;\n\n\n\n// Define\n\n\n#define ST7565_ADC_NORMAL\n\n\n#define ST7565_ADC_REVERSE\n\n\n#define ST7565_BIAS_1_7\n\n\n#define ST7565_BIAS_1_9\n\n\n#define ST7565_BOOSTER_234\n\n\n#define ST7565_BOOSTER_5\n\n\n#define ST7565_BOOSTER_6\n\n\n#define ST7565_BOOSTER_SET\n\n\n#define ST7565_COL_ADDRESS_LSB\n\n\n#define ST7565_COL_ADDRESS_MSB\n\n\n#define ST7565_INDICATOR_MODE_1HZ\n\n\n#define ST7565_INDICATOR_MODE_2HZ\n\n\n#define ST7565_INDICATOR_MODE_OFF\n\n\n#define ST7565_INDICATOR_MODE_ON\n\n\n#define ST7565_INDICATOR_OFF\n\n\n#define ST7565_INDICATOR_ON\n\n\n#define ST7565_NOP\n\n\n#define ST7565_NORMAL\n\n\n#define ST7565_OFF\n\n\n#define ST7565_ON\n\n\n#define ST7565_PAGE_ADDRESS\n\n\n#define ST7565_POWER_CONTROL\n\n\n#define ST7565_POWER_LOW_POWER\n\n\n#define ST7565_POWER_LOW_VOLTAGE\n\n\n#define ST7565_POWER_WIDE_RANGE\n\n\n#define ST7565_RESET_CMD\n\n\n#define ST7565_REVERSE\n\n\n#define ST7565_SCAN_DIR_NORMAL\n\n\n#define ST7565_SCAN_DIR_REVERSE\n\n\n#define ST7565_SHOW_ALL_POINTS\n\n\n#define ST7565_SHOW_NORMAL\n\n\n#define ST7565_VOLTAGE\n\n\n#define ST7565_VOLUME_MODE_1\n\n\n#define ST7565_VOLUME_MODE_2\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:ea_dog\n\n\n\n\n\n\n\n\nmodm_driver_ea_dog\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nea_dog\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ea_dog->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ea_dog->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ea_dog->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ea_dog->modm_ui_display",
            "title": "modm:driver:ea_dog"
        },
        {
            "location": "/reference/module/modm-driver-ea_dog/#modmdriverea_dog",
            "text": "",
            "title": "modm:driver:ea_dog"
        },
        {
            "location": "/reference/module/modm-driver-ea_dog/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-driver-ea_dog/#st7036_voltage",
            "text": "Select the supply voltage of the ST7036.:  3.3V  \u2208  { 3.3V, 5V }",
            "title": "ST7036_voltage"
        },
        {
            "location": "/reference/module/modm-driver-ea_dog/#content",
            "text": "// Class  class   modm :: DogL128 <   typename   SPI   ,   typename   CS   ,   typename   A0   ,   typename   Reset   ,   bool   TopView = false   > ;  class   modm :: DogM081 <   typename   SPI   ,   typename   CS   ,   typename   RS    > ;  class   modm :: DogM128 <   typename   SPI   ,   typename   CS   ,   typename   A0   ,   typename   Reset   ,   bool   TopView = false   > ;  class   modm :: DogM132 <   typename   SPI   ,   typename   CS   ,   typename   A0   ,   typename   Reset   ,   bool   TopView = false   > ;  class   modm :: DogM162 <   typename   SPI   ,   typename   CS   ,   typename   RS    > ;  class   modm :: DogM163 <   typename   SPI   ,   typename   CS   ,   typename   RS    > ;  class   modm :: DogS102 <   typename   SPI   ,   typename   CS   ,   typename   A0   ,   typename   Reset   ,   bool   TopView = false   > ;  class   modm :: St7036 <   typename   SPI ,   typename   CS ,   typename   RS ,   unsigned   int   Width ,   unsigned   int   Heigth   > ;  class   modm :: St7565 <   typename   SPI ,   typename   CS ,   typename   A0 ,   typename   Reset ,   unsigned   int   Width ,   unsigned   int   Height ,   bool   TopView   > ;  // Variable  const   uint8_t   modm :: st7565 :: configuration_dogm132 [ 12 ]   ;  const   uint8_t   modm :: st7565 :: configuration_dogs102 [ 11 ]   ;  const   uint8_t   modm :: st7565 :: configuration_dogx128 [ 12 ]   ;  // Define  #define ST7565_ADC_NORMAL  #define ST7565_ADC_REVERSE  #define ST7565_BIAS_1_7  #define ST7565_BIAS_1_9  #define ST7565_BOOSTER_234  #define ST7565_BOOSTER_5  #define ST7565_BOOSTER_6  #define ST7565_BOOSTER_SET  #define ST7565_COL_ADDRESS_LSB  #define ST7565_COL_ADDRESS_MSB  #define ST7565_INDICATOR_MODE_1HZ  #define ST7565_INDICATOR_MODE_2HZ  #define ST7565_INDICATOR_MODE_OFF  #define ST7565_INDICATOR_MODE_ON  #define ST7565_INDICATOR_OFF  #define ST7565_INDICATOR_ON  #define ST7565_NOP  #define ST7565_NORMAL  #define ST7565_OFF  #define ST7565_ON  #define ST7565_PAGE_ADDRESS  #define ST7565_POWER_CONTROL  #define ST7565_POWER_LOW_POWER  #define ST7565_POWER_LOW_VOLTAGE  #define ST7565_POWER_WIDE_RANGE  #define ST7565_RESET_CMD  #define ST7565_REVERSE  #define ST7565_SCAN_DIR_NORMAL  #define ST7565_SCAN_DIR_REVERSE  #define ST7565_SHOW_ALL_POINTS  #define ST7565_SHOW_NORMAL  #define ST7565_VOLTAGE  #define ST7565_VOLUME_MODE_1  #define ST7565_VOLUME_MODE_2",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-ea_dog/#dependencies",
            "text": "modm:driver:ea_dog     modm_driver_ea_dog   modm:  driver:  ea_dog     modm_architecture_accessor    modm:  architecture:  accessor       modm_driver_ea_dog->modm_architecture_accessor       modm_architecture_delay    modm:  architecture:  delay       modm_driver_ea_dog->modm_architecture_delay       modm_driver    modm:  driver       modm_driver_ea_dog->modm_driver       modm_ui_display    modm:  ui:  display       modm_driver_ea_dog->modm_ui_display",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-fat/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:fat\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nfat\n::\nDirectory\n;\n\n\nclass\n \nmodm\n::\nfat\n::\nFile\n;\n\n\nclass\n \nmodm\n::\nfat\n::\nFileInfo\n;\n\n\nclass\n \nmodm\n::\nfat\n::\nFileSystem\n;\n\n\nclass\n \nmodm\n::\nfat\n::\nPhysicalVolume\n;\n\n\n\n// Typedef\n\n\ntypedef\n \nDRESULT\n \nmodm\n::\nfat\n::\nResult\n;\n\n\ntypedef\n \nDSTATUS\n \nmodm\n::\nfat\n::\nStatus\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:fat\n\n\n\n\n\n\n\n\nmodm_driver_fat\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nfat\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_fat->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_fatfs\n\n\n\n\n\n\nmodm:\n\n\nfatfs\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_fat->modm_fatfs",
            "title": "modm:driver:fat"
        },
        {
            "location": "/reference/module/modm-driver-fat/#modmdriverfat",
            "text": "",
            "title": "modm:driver:fat"
        },
        {
            "location": "/reference/module/modm-driver-fat/#content",
            "text": "// Class  class   modm :: fat :: Directory ;  class   modm :: fat :: File ;  class   modm :: fat :: FileInfo ;  class   modm :: fat :: FileSystem ;  class   modm :: fat :: PhysicalVolume ;  // Typedef  typedef   DRESULT   modm :: fat :: Result ;  typedef   DSTATUS   modm :: fat :: Status ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-fat/#dependencies",
            "text": "modm:driver:fat     modm_driver_fat   modm:  driver:  fat     modm_driver    modm:  driver       modm_driver_fat->modm_driver       modm_fatfs    modm:  fatfs       modm_driver_fat->modm_fatfs",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-ft245/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:ft245\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nFt245\n<\n \ntypename\n \nPORT\n \n,\n \ntypename\n \nRD\n \n,\n \ntypename\n \nWR\n \n,\n \ntypename\n \nRXF\n \n,\n \ntypename\n \nTXE\n  \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:ft245\n\n\n\n\n\n\n\n\nmodm_driver_ft245\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nft245\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ft245->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ft245->modm_driver",
            "title": "modm:driver:ft245"
        },
        {
            "location": "/reference/module/modm-driver-ft245/#modmdriverft245",
            "text": "",
            "title": "modm:driver:ft245"
        },
        {
            "location": "/reference/module/modm-driver-ft245/#content",
            "text": "// Class  class   modm :: Ft245 <   typename   PORT   ,   typename   RD   ,   typename   WR   ,   typename   RXF   ,   typename   TXE    > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-ft245/#dependencies",
            "text": "modm:driver:ft245     modm_driver_ft245   modm:  driver:  ft245     modm_architecture_gpio    modm:  architecture:  gpio       modm_driver_ft245->modm_architecture_gpio       modm_driver    modm:  driver       modm_driver_ft245->modm_driver",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-ft6x06/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:ft6x06\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nFt6x06\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nft6x06\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nft6x06\n::\ntouch_t\n;\n\n\nstruct\n \nmodm\n::\nft6x06\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:ft6x06\n\n\n\n\n\n\n\n\nmodm_driver_ft6x06\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nft6x06\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ft6x06->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ft6x06->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni\n\n\n\n\n\n\nmodm:\n\n\nboard:\n\n\ndisco-f469ni\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_driver_ft6x06",
            "title": "modm:driver:ft6x06"
        },
        {
            "location": "/reference/module/modm-driver-ft6x06/#modmdriverft6x06",
            "text": "",
            "title": "modm:driver:ft6x06"
        },
        {
            "location": "/reference/module/modm-driver-ft6x06/#content",
            "text": "// Class  class   modm :: Ft6x06 <   typename   I2cMaster    > ;  // Struct  struct   modm :: ft6x06 :: Data ;  struct   modm :: ft6x06 :: touch_t ;  struct   modm :: ft6x06 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-ft6x06/#dependencies",
            "text": "modm:driver:ft6x06     modm_driver_ft6x06   modm:  driver:  ft6x06     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_ft6x06->modm_architecture_i2c_device       modm_driver    modm:  driver       modm_driver_ft6x06->modm_driver       modm_board_disco-f469ni    modm:  board:  disco-f469ni       modm_board_disco-f469ni->modm_driver_ft6x06",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-hclax/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:hclax\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nHclaX\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nhclax\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nhclax\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:hclax\n\n\n\n\n\n\n\n\nmodm_driver_hclax\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhclax\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hclax->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hclax->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hclax->modm_math_utils",
            "title": "modm:driver:hclax"
        },
        {
            "location": "/reference/module/modm-driver-hclax/#modmdriverhclax",
            "text": "",
            "title": "modm:driver:hclax"
        },
        {
            "location": "/reference/module/modm-driver-hclax/#content",
            "text": "// Class  class   modm :: HclaX <   typename   I2cMaster    > ;  // Struct  struct   modm :: hclax :: Data ;  struct   modm :: hclax ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-hclax/#dependencies",
            "text": "modm:driver:hclax     modm_driver_hclax   modm:  driver:  hclax     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_hclax->modm_architecture_i2c_device       modm_driver    modm:  driver       modm_driver_hclax->modm_driver       modm_math_utils    modm:  math:  utils       modm_driver_hclax->modm_math_utils",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-hd44780/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:hd44780\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nHd44780\n<\n \ntypename\n \nDATA\n \n,\n \ntypename\n \nRW\n \n,\n \ntypename\n \nRS\n \n,\n \ntypename\n \nE\n  \n>\n;\n\n\nclass\n \nmodm\n::\nHd44780Base\n<\n \ntypename\n \nDATA\n \n,\n \ntypename\n \nRW\n \n,\n \ntypename\n \nRS\n \n,\n \ntypename\n \nE\n  \n>\n;\n\n\nclass\n \nmodm\n::\nHd44780Dual\n<\n \ntypename\n \nDATA\n \n,\n \ntypename\n \nRW\n \n,\n \ntypename\n \nRS\n \n,\n \ntypename\n \nE1\n \n,\n \ntypename\n \nE2\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nHd44780Base\n::\nBus\n<\n \nData\n,\n \nEnable\n,\n \n4\n \n>\n;\n\n\nstruct\n \nmodm\n::\nHd44780Base\n::\nBus\n<\n \nData\n,\n \nEnable\n,\n \n8\n \n>\n;\n\n\nstruct\n \nmodm\n::\nHd44780Base\n::\nBus\n<\n \ntypename\n \nData\n \n,\n \ntypename\n \nEnable\n \n,\n \nuint8_t\n \nWidth\n \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:hd44780\n\n\n\n\n\n\n\n\nmodm_driver_hd44780\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhd44780\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hd44780->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hd44780->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hd44780->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hd44780->modm_ui_display",
            "title": "modm:driver:hd44780"
        },
        {
            "location": "/reference/module/modm-driver-hd44780/#modmdriverhd44780",
            "text": "",
            "title": "modm:driver:hd44780"
        },
        {
            "location": "/reference/module/modm-driver-hd44780/#content",
            "text": "// Class  class   modm :: Hd44780 <   typename   DATA   ,   typename   RW   ,   typename   RS   ,   typename   E    > ;  class   modm :: Hd44780Base <   typename   DATA   ,   typename   RW   ,   typename   RS   ,   typename   E    > ;  class   modm :: Hd44780Dual <   typename   DATA   ,   typename   RW   ,   typename   RS   ,   typename   E1   ,   typename   E2    > ;  // Struct  struct   modm :: Hd44780Base :: Bus <   Data ,   Enable ,   4   > ;  struct   modm :: Hd44780Base :: Bus <   Data ,   Enable ,   8   > ;  struct   modm :: Hd44780Base :: Bus <   typename   Data   ,   typename   Enable   ,   uint8_t   Width   > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-hd44780/#dependencies",
            "text": "modm:driver:hd44780     modm_driver_hd44780   modm:  driver:  hd44780     modm_architecture_delay    modm:  architecture:  delay       modm_driver_hd44780->modm_architecture_delay       modm_architecture_gpio    modm:  architecture:  gpio       modm_driver_hd44780->modm_architecture_gpio       modm_driver    modm:  driver       modm_driver_hd44780->modm_driver       modm_ui_display    modm:  ui:  display       modm_driver_hd44780->modm_ui_display",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-hmc58x/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:hmc58x\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nHmc5843\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nHmc5883\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nHmc58x3\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nhmc5843\n;\n\n\nstruct\n \nmodm\n::\nhmc5883\n;\n\n\nstruct\n \nmodm\n::\nhmc58x3\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nhmc58x3\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:hmc58x\n\n\n\n\n\n\n\n\nmodm_driver_hmc58x\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhmc58x\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc58x->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc58x->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc58x->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc58x->modm_math_utils",
            "title": "modm:driver:hmc58x"
        },
        {
            "location": "/reference/module/modm-driver-hmc58x/#modmdriverhmc58x",
            "text": "",
            "title": "modm:driver:hmc58x"
        },
        {
            "location": "/reference/module/modm-driver-hmc58x/#content",
            "text": "// Class  class   modm :: Hmc5843 <   typename   I2cMaster    > ;  class   modm :: Hmc5883 <   typename   I2cMaster    > ;  class   modm :: Hmc58x3 <   typename   I2cMaster    > ;  // Struct  struct   modm :: hmc5843 ;  struct   modm :: hmc5883 ;  struct   modm :: hmc58x3 :: Data ;  struct   modm :: hmc58x3 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-hmc58x/#dependencies",
            "text": "modm:driver:hmc58x     modm_driver_hmc58x   modm:  driver:  hmc58x     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_hmc58x->modm_architecture_i2c_device       modm_architecture_register    modm:  architecture:  register       modm_driver_hmc58x->modm_architecture_register       modm_driver    modm:  driver       modm_driver_hmc58x->modm_driver       modm_math_utils    modm:  math:  utils       modm_driver_hmc58x->modm_math_utils",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-hmc6343/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:hmc6343\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nHmc6343\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nhmc6343\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nhmc6343\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:hmc6343\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhmc6343\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_protothread\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nprotothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343->modm_processing_protothread",
            "title": "modm:driver:hmc6343"
        },
        {
            "location": "/reference/module/modm-driver-hmc6343/#modmdriverhmc6343",
            "text": "",
            "title": "modm:driver:hmc6343"
        },
        {
            "location": "/reference/module/modm-driver-hmc6343/#content",
            "text": "// Class  class   modm :: Hmc6343 <   class   I2cMaster    > ;  // Struct  struct   modm :: hmc6343 :: Data ;  struct   modm :: hmc6343 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-hmc6343/#dependencies",
            "text": "modm:driver:hmc6343     modm_driver_hmc6343   modm:  driver:  hmc6343     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_hmc6343->modm_architecture_i2c_device       modm_architecture_register    modm:  architecture:  register       modm_driver_hmc6343->modm_architecture_register       modm_driver    modm:  driver       modm_driver_hmc6343->modm_driver       modm_math_utils    modm:  math:  utils       modm_driver_hmc6343->modm_math_utils       modm_processing_protothread    modm:  processing:  protothread       modm_driver_hmc6343->modm_processing_protothread",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-i2c-eeprom/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:i2c.eeprom\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nI2cEeprom\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:i2c.eeprom\n\n\n\n\n\n\n\n\nmodm_driver_i2c_eeprom\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ni2c.eeprom\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_i2c_eeprom->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_i2c_eeprom->modm_driver",
            "title": "modm:driver:i2c.eeprom"
        },
        {
            "location": "/reference/module/modm-driver-i2c-eeprom/#modmdriveri2ceeprom",
            "text": "",
            "title": "modm:driver:i2c.eeprom"
        },
        {
            "location": "/reference/module/modm-driver-i2c-eeprom/#content",
            "text": "// Class  class   modm :: I2cEeprom <   typename   I2cMaster    > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-i2c-eeprom/#dependencies",
            "text": "modm:driver:i2c.eeprom     modm_driver_i2c_eeprom   modm:  driver:  i2c.eeprom     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_i2c_eeprom->modm_architecture_i2c_device       modm_driver    modm:  driver       modm_driver_i2c_eeprom->modm_driver",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-itg3200/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:itg3200\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nItg3200\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nitg3200\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nitg3200\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:itg3200\n\n\n\n\n\n\n\n\nmodm_driver_itg3200\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nitg3200\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_itg3200->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_itg3200->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_itg3200->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_itg3200->modm_utils",
            "title": "modm:driver:itg3200"
        },
        {
            "location": "/reference/module/modm-driver-itg3200/#modmdriveritg3200",
            "text": "",
            "title": "modm:driver:itg3200"
        },
        {
            "location": "/reference/module/modm-driver-itg3200/#content",
            "text": "// Class  class   modm :: Itg3200 <   typename   I2cMaster    > ;  // Struct  struct   modm :: itg3200 :: Data ;  struct   modm :: itg3200 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-itg3200/#dependencies",
            "text": "modm:driver:itg3200     modm_driver_itg3200   modm:  driver:  itg3200     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_itg3200->modm_architecture_i2c_device       modm_architecture_register    modm:  architecture:  register       modm_driver_itg3200->modm_architecture_register       modm_driver    modm:  driver       modm_driver_itg3200->modm_driver       modm_utils    modm:  utils       modm_driver_itg3200->modm_utils",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-l3gd20/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:l3gd20\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nL3gd20\n<\n \nclass\n \nTransport\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nl3gd20\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nl3gd20\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:l3gd20\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nl3gd20\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3.transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20->modm_driver_lis3_transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20->modm_processing_resumable",
            "title": "modm:driver:l3gd20"
        },
        {
            "location": "/reference/module/modm-driver-l3gd20/#modmdriverl3gd20",
            "text": "",
            "title": "modm:driver:l3gd20"
        },
        {
            "location": "/reference/module/modm-driver-l3gd20/#content",
            "text": "// Class  class   modm :: L3gd20 <   class   Transport    > ;  // Struct  struct   modm :: l3gd20 :: Data ;  struct   modm :: l3gd20 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-l3gd20/#dependencies",
            "text": "modm:driver:l3gd20     modm_driver_l3gd20   modm:  driver:  l3gd20     modm_architecture_register    modm:  architecture:  register       modm_driver_l3gd20->modm_architecture_register       modm_driver    modm:  driver       modm_driver_l3gd20->modm_driver       modm_driver_lis3_transport    modm:  driver:  lis3.transport       modm_driver_l3gd20->modm_driver_lis3_transport       modm_math_utils    modm:  math:  utils       modm_driver_l3gd20->modm_math_utils       modm_processing_resumable    modm:  processing:  resumable       modm_driver_l3gd20->modm_processing_resumable",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-lawicel/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:lawicel\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nCanLawicelFormatter\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:lawicel\n\n\n\n\n\n\n\n\nmodm_driver_lawicel\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlawicel\n\n\n\n\n\n\n\n\nmodm_architecture_can\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lawicel->modm_architecture_can\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lawicel->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_lawicel",
            "title": "modm:driver:lawicel"
        },
        {
            "location": "/reference/module/modm-driver-lawicel/#modmdriverlawicel",
            "text": "",
            "title": "modm:driver:lawicel"
        },
        {
            "location": "/reference/module/modm-driver-lawicel/#content",
            "text": "// Class  class   modm :: CanLawicelFormatter ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-lawicel/#dependencies",
            "text": "modm:driver:lawicel     modm_driver_lawicel   modm:  driver:  lawicel     modm_architecture_can    modm:  architecture:  can       modm_driver_lawicel->modm_architecture_can       modm_driver    modm:  driver       modm_driver_lawicel->modm_driver       modm_test_driver    modm:  test:  driver       modm_test_driver->modm_driver_lawicel",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-lis3-transport/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:lis3.transport\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nLis3TransportI2c\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nLis3TransportSpi\n<\n \nclass\n \nSpiMaster\n \n,\n \nclass\n \nCs\n  \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:lis3.transport\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3.transport\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport->modm_architecture_spi_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nl3gd20\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20->modm_driver_lis3_transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis302dl\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis302dl\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis302dl->modm_driver_lis3_transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3dsh\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3dsh\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3dsh->modm_driver_lis3_transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lsm303a\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlsm303a\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lsm303a->modm_driver_lis3_transport",
            "title": "modm:driver:lis3.transport"
        },
        {
            "location": "/reference/module/modm-driver-lis3-transport/#modmdriverlis3transport",
            "text": "",
            "title": "modm:driver:lis3.transport"
        },
        {
            "location": "/reference/module/modm-driver-lis3-transport/#content",
            "text": "// Class  class   modm :: Lis3TransportI2c <   class   I2cMaster    > ;  class   modm :: Lis3TransportSpi <   class   SpiMaster   ,   class   Cs    > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-lis3-transport/#dependencies",
            "text": "modm:driver:lis3.transport     modm_driver_lis3_transport   modm:  driver:  lis3.transport     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_lis3_transport->modm_architecture_i2c_device       modm_architecture_spi_device    modm:  architecture:  spi.device       modm_driver_lis3_transport->modm_architecture_spi_device       modm_driver    modm:  driver       modm_driver_lis3_transport->modm_driver       modm_processing_resumable    modm:  processing:  resumable       modm_driver_lis3_transport->modm_processing_resumable       modm_driver_l3gd20    modm:  driver:  l3gd20       modm_driver_l3gd20->modm_driver_lis3_transport       modm_driver_lis302dl    modm:  driver:  lis302dl       modm_driver_lis302dl->modm_driver_lis3_transport       modm_driver_lis3dsh    modm:  driver:  lis3dsh       modm_driver_lis3dsh->modm_driver_lis3_transport       modm_driver_lsm303a    modm:  driver:  lsm303a       modm_driver_lsm303a->modm_driver_lis3_transport",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-lis302dl/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:lis302dl\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nLis302dl\n<\n \nclass\n \nTransport\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nlis302dl\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nlis302dl\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:lis302dl\n\n\n\n\n\n\n\n\nmodm_driver_lis302dl\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis302dl\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis302dl->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis302dl->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3.transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis302dl->modm_driver_lis3_transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis302dl->modm_processing_resumable",
            "title": "modm:driver:lis302dl"
        },
        {
            "location": "/reference/module/modm-driver-lis302dl/#modmdriverlis302dl",
            "text": "",
            "title": "modm:driver:lis302dl"
        },
        {
            "location": "/reference/module/modm-driver-lis302dl/#content",
            "text": "// Class  class   modm :: Lis302dl <   class   Transport    > ;  // Struct  struct   modm :: lis302dl :: Data ;  struct   modm :: lis302dl ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-lis302dl/#dependencies",
            "text": "modm:driver:lis302dl     modm_driver_lis302dl   modm:  driver:  lis302dl     modm_architecture_register    modm:  architecture:  register       modm_driver_lis302dl->modm_architecture_register       modm_driver    modm:  driver       modm_driver_lis302dl->modm_driver       modm_driver_lis3_transport    modm:  driver:  lis3.transport       modm_driver_lis302dl->modm_driver_lis3_transport       modm_processing_resumable    modm:  processing:  resumable       modm_driver_lis302dl->modm_processing_resumable",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-lis3dsh/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:lis3dsh\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nLis3dsh\n<\n \nclass\n \nTransport\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nlis3dsh\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nlis3dsh\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:lis3dsh\n\n\n\n\n\n\n\n\nmodm_driver_lis3dsh\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3dsh\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3dsh->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3dsh->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3.transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3dsh->modm_driver_lis3_transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3dsh->modm_math_utils",
            "title": "modm:driver:lis3dsh"
        },
        {
            "location": "/reference/module/modm-driver-lis3dsh/#modmdriverlis3dsh",
            "text": "",
            "title": "modm:driver:lis3dsh"
        },
        {
            "location": "/reference/module/modm-driver-lis3dsh/#content",
            "text": "// Class  class   modm :: Lis3dsh <   class   Transport    > ;  // Struct  struct   modm :: lis3dsh :: Data ;  struct   modm :: lis3dsh ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-lis3dsh/#dependencies",
            "text": "modm:driver:lis3dsh     modm_driver_lis3dsh   modm:  driver:  lis3dsh     modm_architecture_register    modm:  architecture:  register       modm_driver_lis3dsh->modm_architecture_register       modm_driver    modm:  driver       modm_driver_lis3dsh->modm_driver       modm_driver_lis3_transport    modm:  driver:  lis3.transport       modm_driver_lis3dsh->modm_driver_lis3_transport       modm_math_utils    modm:  math:  utils       modm_driver_lis3dsh->modm_math_utils",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-lm75/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:lm75\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nLm75\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nTmp102\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nTmp175\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nlm75\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nlm75\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:lm75\n\n\n\n\n\n\n\n\nmodm_driver_lm75\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlm75\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lm75->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lm75->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lm75->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nds1631\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631->modm_driver_lm75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntmp102\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102->modm_driver_lm75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntmp175\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175->modm_driver_lm75",
            "title": "modm:driver:lm75"
        },
        {
            "location": "/reference/module/modm-driver-lm75/#modmdriverlm75",
            "text": "",
            "title": "modm:driver:lm75"
        },
        {
            "location": "/reference/module/modm-driver-lm75/#content",
            "text": "// Class  class   modm :: Lm75 <   class   I2cMaster    > ;  class   modm :: Tmp102 <   class   I2cMaster    > ;  class   modm :: Tmp175 <   typename   I2cMaster    > ;  // Struct  struct   modm :: lm75 :: Data ;  struct   modm :: lm75 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-lm75/#dependencies",
            "text": "modm:driver:lm75     modm_driver_lm75   modm:  driver:  lm75     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_lm75->modm_architecture_i2c_device       modm_architecture_register    modm:  architecture:  register       modm_driver_lm75->modm_architecture_register       modm_driver    modm:  driver       modm_driver_lm75->modm_driver       modm_driver_ds1631    modm:  driver:  ds1631       modm_driver_ds1631->modm_driver_lm75       modm_driver_tmp102    modm:  driver:  tmp102       modm_driver_tmp102->modm_driver_lm75       modm_driver_tmp175    modm:  driver:  tmp175       modm_driver_tmp175->modm_driver_lm75",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-lsm303a/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:lsm303a\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nLsm303a\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nlsm303a\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nlsm303a\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:lsm303a\n\n\n\n\n\n\n\n\nmodm_driver_lsm303a\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlsm303a\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lsm303a->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lsm303a->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3.transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lsm303a->modm_driver_lis3_transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lsm303a->modm_math_utils",
            "title": "modm:driver:lsm303a"
        },
        {
            "location": "/reference/module/modm-driver-lsm303a/#modmdriverlsm303a",
            "text": "",
            "title": "modm:driver:lsm303a"
        },
        {
            "location": "/reference/module/modm-driver-lsm303a/#content",
            "text": "// Class  class   modm :: Lsm303a <   class   I2cMaster    > ;  // Struct  struct   modm :: lsm303a :: Data ;  struct   modm :: lsm303a ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-lsm303a/#dependencies",
            "text": "modm:driver:lsm303a     modm_driver_lsm303a   modm:  driver:  lsm303a     modm_architecture_register    modm:  architecture:  register       modm_driver_lsm303a->modm_architecture_register       modm_driver    modm:  driver       modm_driver_lsm303a->modm_driver       modm_driver_lis3_transport    modm:  driver:  lis3.transport       modm_driver_lsm303a->modm_driver_lis3_transport       modm_math_utils    modm:  math:  utils       modm_driver_lsm303a->modm_math_utils",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-ltc2984/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:ltc2984\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nLtc2984\n<\n \nclass\n \nSpiMaster\n \n,\n \nclass\n \nCs\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nltc2984\n::\nConfiguration\n::\nRsense\n;\n\n\nstruct\n \nmodm\n::\nltc2984\n::\nConfiguration\n::\nRtd\n;\n\n\nstruct\n \nmodm\n::\nltc2984\n::\nConfiguration\n;\n\n\nstruct\n \nmodm\n::\nltc2984\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nltc2984\n;\n\n\n\n// Function\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nltc2984\n::\nData\n \n&\nc\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nltc2984\n::\nData\n::\nStatus\n \n&\nc\n);\n\n\nltc2984\n::\nCommandStatus\n \nmodm\n::\noperator\n|\n(\nltc2984\n::\nCommandStatus\n \nr\n,\n \nltc2984\n::\nChannel\n \nc\n);\n\n\nltc2984\n::\nRegister\n \nmodm\n::\noperator\n+\n(\nltc2984\n::\nRegister\n \nr\n,\n \nltc2984\n::\nChannel\n \nc\n);\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:ltc2984\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nltc2984\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984->modm_architecture_spi_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_ltc2984",
            "title": "modm:driver:ltc2984"
        },
        {
            "location": "/reference/module/modm-driver-ltc2984/#modmdriverltc2984",
            "text": "",
            "title": "modm:driver:ltc2984"
        },
        {
            "location": "/reference/module/modm-driver-ltc2984/#content",
            "text": "// Class  class   modm :: Ltc2984 <   class   SpiMaster   ,   class   Cs    > ;  // Struct  struct   modm :: ltc2984 :: Configuration :: Rsense ;  struct   modm :: ltc2984 :: Configuration :: Rtd ;  struct   modm :: ltc2984 :: Configuration ;  struct   modm :: ltc2984 :: Data ;  struct   modm :: ltc2984 ;  // Function  IOStream &   modm :: operator << ( IOStream   & os ,   const   ltc2984 :: Data   & c );  IOStream &   modm :: operator << ( IOStream   & os ,   const   ltc2984 :: Data :: Status   & c );  ltc2984 :: CommandStatus   modm :: operator | ( ltc2984 :: CommandStatus   r ,   ltc2984 :: Channel   c );  ltc2984 :: Register   modm :: operator + ( ltc2984 :: Register   r ,   ltc2984 :: Channel   c );",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-ltc2984/#dependencies",
            "text": "modm:driver:ltc2984     modm_driver_ltc2984   modm:  driver:  ltc2984     modm_architecture_gpio    modm:  architecture:  gpio       modm_driver_ltc2984->modm_architecture_gpio       modm_architecture_register    modm:  architecture:  register       modm_driver_ltc2984->modm_architecture_register       modm_architecture_spi_device    modm:  architecture:  spi.device       modm_driver_ltc2984->modm_architecture_spi_device       modm_driver    modm:  driver       modm_driver_ltc2984->modm_driver       modm_processing_resumable    modm:  processing:  resumable       modm_driver_ltc2984->modm_processing_resumable       modm_test_driver    modm:  test:  driver       modm_test_driver->modm_driver_ltc2984",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-max6966/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:max6966\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nMAX6966\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCs\n \n,\n \nuint8_t\n \nDRIVERS\n=\n1\n \n>\n;\n\n\n\n// Enum\n\n\nenum\n \nBrightness\n;\n\n\nenum\n \nConfig\n;\n\n\nenum\n \nCurrent\n;\n\n\nenum\n \nRegister\n;\n\n\nenum\n \nTime\n;\n\n\n\n// Variable\n\n\nconst\n \nuint8_t\n \nmodm\n::\nmax6966\n::\nREAD\n \n=\n \n0x80\n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nmax6966\n::\nWRITE\n \n=\n \n0x00\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:max6966\n\n\n\n\n\n\n\n\nmodm_driver_max6966\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmax6966\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max6966->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max6966->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max6966->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max6966->modm_driver",
            "title": "modm:driver:max6966"
        },
        {
            "location": "/reference/module/modm-driver-max6966/#modmdrivermax6966",
            "text": "",
            "title": "modm:driver:max6966"
        },
        {
            "location": "/reference/module/modm-driver-max6966/#content",
            "text": "// Class  class   modm :: MAX6966 <   typename   Spi   ,   typename   Cs   ,   uint8_t   DRIVERS = 1   > ;  // Enum  enum   Brightness ;  enum   Config ;  enum   Current ;  enum   Register ;  enum   Time ;  // Variable  const   uint8_t   modm :: max6966 :: READ   =   0x80 ;  const   uint8_t   modm :: max6966 :: WRITE   =   0x00 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-max6966/#dependencies",
            "text": "modm:driver:max6966     modm_driver_max6966   modm:  driver:  max6966     modm_architecture_delay    modm:  architecture:  delay       modm_driver_max6966->modm_architecture_delay       modm_architecture_gpio    modm:  architecture:  gpio       modm_driver_max6966->modm_architecture_gpio       modm_architecture_spi    modm:  architecture:  spi       modm_driver_max6966->modm_architecture_spi       modm_driver    modm:  driver       modm_driver_max6966->modm_driver",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-max7219/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:max7219\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nMax7219\n<\n \ntypename\n \nSPI\n,\n \ntypename\n \nCS\n,\n \nuint8_t\n \nMODULES\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nMax7219matrix\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \nuint8_t\n \nCOLUMNS\n=\n1\n,\n \nuint8_t\n \nROWS\n=\n1\n \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:max7219\n\n\n\n\n\n\n\n\nmodm_driver_max7219\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmax7219\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max7219->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max7219->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max7219->modm_ui_display",
            "title": "modm:driver:max7219"
        },
        {
            "location": "/reference/module/modm-driver-max7219/#modmdrivermax7219",
            "text": "",
            "title": "modm:driver:max7219"
        },
        {
            "location": "/reference/module/modm-driver-max7219/#content",
            "text": "// Class  class   modm :: Max7219 <   typename   SPI ,   typename   CS ,   uint8_t   MODULES = 1   > ;  class   modm :: Max7219matrix <   typename   SPI   ,   typename   CS   ,   uint8_t   COLUMNS = 1 ,   uint8_t   ROWS = 1   > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-max7219/#dependencies",
            "text": "modm:driver:max7219     modm_driver_max7219   modm:  driver:  max7219     modm_architecture_spi    modm:  architecture:  spi       modm_driver_max7219->modm_architecture_spi       modm_driver    modm:  driver       modm_driver_max7219->modm_driver       modm_ui_display    modm:  ui:  display       modm_driver_max7219->modm_ui_display",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-mcp23x17/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:mcp23x17\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nMcp23TransportI2c\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\nclass\n \nmodm\n::\nMcp23TransportSpi\n<\n \nclass\n \nSpiMaster\n \n,\n \nclass\n \nCs\n  \n>\n;\n\n\nclass\n \nmodm\n::\nMcp23x17\n<\n \nclass\n \nTransport\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nMcp23x17\n::\nMemory\n;\n\n\nstruct\n \nmodm\n::\nmcp23x17\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:mcp23x17\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp23x17\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio.expander\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17->modm_architecture_gpio_expander\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17->modm_architecture_spi_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17->modm_processing_resumable",
            "title": "modm:driver:mcp23x17"
        },
        {
            "location": "/reference/module/modm-driver-mcp23x17/#modmdrivermcp23x17",
            "text": "",
            "title": "modm:driver:mcp23x17"
        },
        {
            "location": "/reference/module/modm-driver-mcp23x17/#content",
            "text": "// Class  class   modm :: Mcp23TransportI2c <   class   I2cMaster    > ;  class   modm :: Mcp23TransportSpi <   class   SpiMaster   ,   class   Cs    > ;  class   modm :: Mcp23x17 <   class   Transport    > ;  // Struct  struct   modm :: Mcp23x17 :: Memory ;  struct   modm :: mcp23x17 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-mcp23x17/#dependencies",
            "text": "modm:driver:mcp23x17     modm_driver_mcp23x17   modm:  driver:  mcp23x17     modm_architecture_gpio_expander    modm:  architecture:  gpio.expander       modm_driver_mcp23x17->modm_architecture_gpio_expander       modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_mcp23x17->modm_architecture_i2c_device       modm_architecture_register    modm:  architecture:  register       modm_driver_mcp23x17->modm_architecture_register       modm_architecture_spi_device    modm:  architecture:  spi.device       modm_driver_mcp23x17->modm_architecture_spi_device       modm_driver    modm:  driver       modm_driver_mcp23x17->modm_driver       modm_processing_resumable    modm:  processing:  resumable       modm_driver_mcp23x17->modm_processing_resumable",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-mcp2515/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:mcp2515\n\u00b6\n\n\nOptions\n\u00b6\n\n\nMCP2515_clock\n\u00b6\n\n\nUsed clock for the MCP2515. The device configuration is selected according to the clock speed.: \n16MHz\n \u2208 \n{ 16MHz, 20MHz }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nCanBitTimingMcp2515\n<\n \nint32_t\n \nClk\n,\n \nint32_t\n \nBitrate\n \n>\n;\n\n\nclass\n \nmodm\n::\nMcp2515\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nINT\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nCanBitTimingMcp2515\n::\nCanBitTimingConfiguration\n;\n\n\n\n// Enum\n\n\nenum\n \nBFPCTRL\n;\n\n\nenum\n \nCANCTRL\n;\n\n\nenum\n \nCANINTE\n;\n\n\nenum\n \nCANINTF\n;\n\n\nenum\n \nCANSTAT\n;\n\n\nenum\n \nCNF1\n;\n\n\nenum\n \nCNF2\n;\n\n\nenum\n \nCNF3\n;\n\n\nenum\n \nEFLG\n;\n\n\nenum\n \nRXB0CTRL\n;\n\n\nenum\n \nRXB1CTRL\n;\n\n\nenum\n \nRXBnDLC\n;\n\n\nenum\n \nRXBnSIDL\n;\n\n\nenum\n \nRegister\n;\n\n\nenum\n \nRxStatus\n;\n\n\nenum\n \nStatus\n;\n\n\nenum\n \nTXBnCTRL\n;\n\n\nenum\n \nTXBnSIDL\n;\n\n\nenum\n \nTXRTSCTRL\n;\n\n\n\n// Define\n\n\n#define MCP2515_FILTER(id)\n\n\n#define MCP2515_FILTER_EXTENDED(id)\n\n\n#define MCP2515_MASK(id)\n\n\n#define MCP2515_MASK_EXTENDED(id)\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:mcp2515\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp2515\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_assert\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nassert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_architecture_assert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_can\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_architecture_can\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_mcp2515",
            "title": "modm:driver:mcp2515"
        },
        {
            "location": "/reference/module/modm-driver-mcp2515/#modmdrivermcp2515",
            "text": "",
            "title": "modm:driver:mcp2515"
        },
        {
            "location": "/reference/module/modm-driver-mcp2515/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-driver-mcp2515/#mcp2515_clock",
            "text": "Used clock for the MCP2515. The device configuration is selected according to the clock speed.:  16MHz  \u2208  { 16MHz, 20MHz }",
            "title": "MCP2515_clock"
        },
        {
            "location": "/reference/module/modm-driver-mcp2515/#content",
            "text": "// Class  class   modm :: CanBitTimingMcp2515 <   int32_t   Clk ,   int32_t   Bitrate   > ;  class   modm :: Mcp2515 <   typename   SPI   ,   typename   CS   ,   typename   INT    > ;  // Struct  struct   modm :: CanBitTimingMcp2515 :: CanBitTimingConfiguration ;  // Enum  enum   BFPCTRL ;  enum   CANCTRL ;  enum   CANINTE ;  enum   CANINTF ;  enum   CANSTAT ;  enum   CNF1 ;  enum   CNF2 ;  enum   CNF3 ;  enum   EFLG ;  enum   RXB0CTRL ;  enum   RXB1CTRL ;  enum   RXBnDLC ;  enum   RXBnSIDL ;  enum   Register ;  enum   RxStatus ;  enum   Status ;  enum   TXBnCTRL ;  enum   TXBnSIDL ;  enum   TXRTSCTRL ;  // Define  #define MCP2515_FILTER(id)  #define MCP2515_FILTER_EXTENDED(id)  #define MCP2515_MASK(id)  #define MCP2515_MASK_EXTENDED(id)",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-mcp2515/#dependencies",
            "text": "modm:driver:mcp2515     modm_driver_mcp2515   modm:  driver:  mcp2515     modm_architecture_accessor    modm:  architecture:  accessor       modm_driver_mcp2515->modm_architecture_accessor       modm_architecture_assert    modm:  architecture:  assert       modm_driver_mcp2515->modm_architecture_assert       modm_architecture_can    modm:  architecture:  can       modm_driver_mcp2515->modm_architecture_can       modm_architecture_clock    modm:  architecture:  clock       modm_driver_mcp2515->modm_architecture_clock       modm_architecture_delay    modm:  architecture:  delay       modm_driver_mcp2515->modm_architecture_delay       modm_debug    modm:  debug       modm_driver_mcp2515->modm_debug       modm_driver    modm:  driver       modm_driver_mcp2515->modm_driver       modm_test_driver    modm:  test:  driver       modm_test_driver->modm_driver_mcp2515",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-memory_bus/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:memory_bus\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nBitbangMemoryInterface\n<\n \ntypename\n \nPORT\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nCD\n \n,\n \ntypename\n \nWR\n  \n>\n;\n\n\nclass\n \nmodm\n::\nMemoryBus\n<\n \ntypename\n \nPORT\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRD\n \n,\n \ntypename\n \nWR\n  \n>\n;\n\n\nclass\n \nmodm\n::\nTftMemoryBus16Bit\n;\n\n\nclass\n \nmodm\n::\nTftMemoryBus8Bit\n;\n\n\nclass\n \nmodm\n::\nTftMemoryBus8BitGpio\n<\n \ntypename\n \nPORT\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRD\n \n,\n \ntypename\n \nWR\n \n,\n \ntypename\n \nCD\n  \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:memory_bus\n\n\n\n\n\n\n\n\nmodm_driver_memory_bus\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmemory_bus\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_memory_bus->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_memory_bus->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_memory_bus->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s75\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nsiemens_s75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s75->modm_driver_memory_bus",
            "title": "modm:driver:memory_bus"
        },
        {
            "location": "/reference/module/modm-driver-memory_bus/#modmdrivermemory_bus",
            "text": "",
            "title": "modm:driver:memory_bus"
        },
        {
            "location": "/reference/module/modm-driver-memory_bus/#content",
            "text": "// Class  class   modm :: BitbangMemoryInterface <   typename   PORT   ,   typename   CS   ,   typename   CD   ,   typename   WR    > ;  class   modm :: MemoryBus <   typename   PORT   ,   typename   CS   ,   typename   RD   ,   typename   WR    > ;  class   modm :: TftMemoryBus16Bit ;  class   modm :: TftMemoryBus8Bit ;  class   modm :: TftMemoryBus8BitGpio <   typename   PORT   ,   typename   CS   ,   typename   RD   ,   typename   WR   ,   typename   CD    > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-memory_bus/#dependencies",
            "text": "modm:driver:memory_bus     modm_driver_memory_bus   modm:  driver:  memory_bus     modm_architecture_delay    modm:  architecture:  delay       modm_driver_memory_bus->modm_architecture_delay       modm_architecture_gpio    modm:  architecture:  gpio       modm_driver_memory_bus->modm_architecture_gpio       modm_driver    modm:  driver       modm_driver_memory_bus->modm_driver       modm_driver_siemens_s75    modm:  driver:  siemens_s75       modm_driver_siemens_s75->modm_driver_memory_bus",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-nokia5110/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:nokia5110\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nNokia5110\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCe\n \n,\n \ntypename\n \nDc\n \n,\n \ntypename\n \nReset\n  \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:nokia5110\n\n\n\n\n\n\n\n\nmodm_driver_nokia5110\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nnokia5110\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nokia5110->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nokia5110->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nokia5110->modm_ui_display",
            "title": "modm:driver:nokia5110"
        },
        {
            "location": "/reference/module/modm-driver-nokia5110/#modmdrivernokia5110",
            "text": "",
            "title": "modm:driver:nokia5110"
        },
        {
            "location": "/reference/module/modm-driver-nokia5110/#content",
            "text": "// Class  class   modm :: Nokia5110 <   typename   Spi   ,   typename   Ce   ,   typename   Dc   ,   typename   Reset    > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-nokia5110/#dependencies",
            "text": "modm:driver:nokia5110     modm_driver_nokia5110   modm:  driver:  nokia5110     modm_architecture_spi    modm:  architecture:  spi       modm_driver_nokia5110->modm_architecture_spi       modm_driver    modm:  driver       modm_driver_nokia5110->modm_driver       modm_ui_display    modm:  ui:  display       modm_driver_nokia5110->modm_ui_display",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-nrf24/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:nrf24\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nNrf24Config\n<\n \ntypename\n \nNrf24Phy\n  \n>\n;\n\n\nclass\n \nmodm\n::\nNrf24Data\n<\n \ntypename\n \nNrf24Phy\n \n>\n;\n\n\nclass\n \nmodm\n::\nNrf24Phy\n<\n \ntypename\n \nSpi\n \n,\n \ntypename\n \nCsn\n \n,\n \ntypename\n \nCe\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nNrf24Data\n::\nFrame\n;\n\n\nstruct\n \nmodm\n::\nNrf24Data\n::\nHeader\n;\n\n\nstruct\n \nmodm\n::\nNrf24Data\n::\nPacket\n::\nPayload\n;\n\n\nstruct\n \nmodm\n::\nNrf24Data\n::\nPacket\n;\n\n\nstruct\n \nmodm\n::\nNrf24Register\n;\n\n\n\n// Define\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n#define MODM_LOG_LEVEL\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:nrf24\n\n\n\n\n\n\n\n\nmodm_driver_nrf24\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nnrf24\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_utils",
            "title": "modm:driver:nrf24"
        },
        {
            "location": "/reference/module/modm-driver-nrf24/#modmdrivernrf24",
            "text": "",
            "title": "modm:driver:nrf24"
        },
        {
            "location": "/reference/module/modm-driver-nrf24/#content",
            "text": "// Class  class   modm :: Nrf24Config <   typename   Nrf24Phy    > ;  class   modm :: Nrf24Data <   typename   Nrf24Phy   > ;  class   modm :: Nrf24Phy <   typename   Spi   ,   typename   Csn   ,   typename   Ce    > ;  // Struct  struct   modm :: Nrf24Data :: Frame ;  struct   modm :: Nrf24Data :: Header ;  struct   modm :: Nrf24Data :: Packet :: Payload ;  struct   modm :: Nrf24Data :: Packet ;  struct   modm :: Nrf24Register ;  // Define  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL  #define MODM_LOG_LEVEL",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-nrf24/#dependencies",
            "text": "modm:driver:nrf24     modm_driver_nrf24   modm:  driver:  nrf24     modm_architecture_delay    modm:  architecture:  delay       modm_driver_nrf24->modm_architecture_delay       modm_architecture_register    modm:  architecture:  register       modm_driver_nrf24->modm_architecture_register       modm_architecture_spi    modm:  architecture:  spi       modm_driver_nrf24->modm_architecture_spi       modm_debug    modm:  debug       modm_driver_nrf24->modm_debug       modm_driver    modm:  driver       modm_driver_nrf24->modm_driver       modm_processing_timer    modm:  processing:  timer       modm_driver_nrf24->modm_processing_timer       modm_utils    modm:  utils       modm_driver_nrf24->modm_utils",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-parallel_tft_display/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:parallel_tft_display\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nParallelTft\n<\n \ntypename\n \nINTERFACE\n  \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:parallel_tft_display\n\n\n\n\n\n\n\n\nmodm_driver_parallel_tft_display\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nparallel_tft_display\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_parallel_tft_display->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_parallel_tft_display->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_parallel_tft_display->modm_ui_display",
            "title": "modm:driver:parallel_tft_display"
        },
        {
            "location": "/reference/module/modm-driver-parallel_tft_display/#modmdriverparallel_tft_display",
            "text": "",
            "title": "modm:driver:parallel_tft_display"
        },
        {
            "location": "/reference/module/modm-driver-parallel_tft_display/#content",
            "text": "// Class  class   modm :: ParallelTft <   typename   INTERFACE    > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-parallel_tft_display/#dependencies",
            "text": "modm:driver:parallel_tft_display     modm_driver_parallel_tft_display   modm:  driver:  parallel_tft_display     modm_architecture_delay    modm:  architecture:  delay       modm_driver_parallel_tft_display->modm_architecture_delay       modm_driver    modm:  driver       modm_driver_parallel_tft_display->modm_driver       modm_ui_display    modm:  ui:  display       modm_driver_parallel_tft_display->modm_ui_display",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-pca8574/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:pca8574\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nPca8574\n<\n \nclass\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\npca8574\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:pca8574\n\n\n\n\n\n\n\n\nmodm_driver_pca8574\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca8574\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio.expander\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574->modm_architecture_gpio_expander\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574->modm_processing_resumable",
            "title": "modm:driver:pca8574"
        },
        {
            "location": "/reference/module/modm-driver-pca8574/#modmdriverpca8574",
            "text": "",
            "title": "modm:driver:pca8574"
        },
        {
            "location": "/reference/module/modm-driver-pca8574/#content",
            "text": "// Class  class   modm :: Pca8574 <   class   I2cMaster    > ;  // Struct  struct   modm :: pca8574 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-pca8574/#dependencies",
            "text": "modm:driver:pca8574     modm_driver_pca8574   modm:  driver:  pca8574     modm_architecture_gpio_expander    modm:  architecture:  gpio.expander       modm_driver_pca8574->modm_architecture_gpio_expander       modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_pca8574->modm_architecture_i2c_device       modm_architecture_register    modm:  architecture:  register       modm_driver_pca8574->modm_architecture_register       modm_driver    modm:  driver       modm_driver_pca8574->modm_driver       modm_processing_resumable    modm:  processing:  resumable       modm_driver_pca8574->modm_processing_resumable",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-pca9535/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:pca9535\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nPca9535\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\npca9535\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:pca9535\n\n\n\n\n\n\n\n\nmodm_driver_pca9535\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca9535\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio.expander\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535->modm_architecture_gpio_expander\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535->modm_processing_resumable",
            "title": "modm:driver:pca9535"
        },
        {
            "location": "/reference/module/modm-driver-pca9535/#modmdriverpca9535",
            "text": "",
            "title": "modm:driver:pca9535"
        },
        {
            "location": "/reference/module/modm-driver-pca9535/#content",
            "text": "// Class  class   modm :: Pca9535 <   typename   I2cMaster    > ;  // Struct  struct   modm :: pca9535 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-pca9535/#dependencies",
            "text": "modm:driver:pca9535     modm_driver_pca9535   modm:  driver:  pca9535     modm_architecture_gpio_expander    modm:  architecture:  gpio.expander       modm_driver_pca9535->modm_architecture_gpio_expander       modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_pca9535->modm_architecture_i2c_device       modm_architecture_register    modm:  architecture:  register       modm_driver_pca9535->modm_architecture_register       modm_driver    modm:  driver       modm_driver_pca9535->modm_driver       modm_math_utils    modm:  math:  utils       modm_driver_pca9535->modm_math_utils       modm_processing_resumable    modm:  processing:  resumable       modm_driver_pca9535->modm_processing_resumable",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-pca9685/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:pca9685\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nPca9685\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\npca9685\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:pca9685\n\n\n\n\n\n\n\n\nmodm_driver_pca9685\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca9685\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9685->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9685->modm_driver",
            "title": "modm:driver:pca9685"
        },
        {
            "location": "/reference/module/modm-driver-pca9685/#modmdriverpca9685",
            "text": "",
            "title": "modm:driver:pca9685"
        },
        {
            "location": "/reference/module/modm-driver-pca9685/#content",
            "text": "// Class  class   modm :: Pca9685 <   typename   I2cMaster    > ;  // Struct  struct   modm :: pca9685 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-pca9685/#dependencies",
            "text": "modm:driver:pca9685     modm_driver_pca9685   modm:  driver:  pca9685     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_pca9685->modm_architecture_i2c_device       modm_driver    modm:  driver       modm_driver_pca9685->modm_driver",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-siemens_s65/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:siemens_s65\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nSiemensS65Common\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRS\n \n,\n \ntypename\n \nReset\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS65Landscape\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRS\n \n,\n \ntypename\n \nReset\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS65Portrait\n<\n \ntypename\n \nSPI\n \n,\n \ntypename\n \nCS\n \n,\n \ntypename\n \nRS\n \n,\n \ntypename\n \nReset\n  \n>\n;\n\n\n\n// Define\n\n\n#define S65_LPC_ACCELERATED\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:siemens_s65\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s65\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nsiemens_s65\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s65->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s65->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s65->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s65->modm_ui_display",
            "title": "modm:driver:siemens_s65"
        },
        {
            "location": "/reference/module/modm-driver-siemens_s65/#modmdriversiemens_s65",
            "text": "",
            "title": "modm:driver:siemens_s65"
        },
        {
            "location": "/reference/module/modm-driver-siemens_s65/#content",
            "text": "// Class  class   modm :: SiemensS65Common <   typename   SPI   ,   typename   CS   ,   typename   RS   ,   typename   Reset    > ;  class   modm :: SiemensS65Landscape <   typename   SPI   ,   typename   CS   ,   typename   RS   ,   typename   Reset    > ;  class   modm :: SiemensS65Portrait <   typename   SPI   ,   typename   CS   ,   typename   RS   ,   typename   Reset    > ;  // Define  #define S65_LPC_ACCELERATED",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-siemens_s65/#dependencies",
            "text": "modm:driver:siemens_s65     modm_driver_siemens_s65   modm:  driver:  siemens_s65     modm_architecture_delay    modm:  architecture:  delay       modm_driver_siemens_s65->modm_architecture_delay       modm_architecture_spi    modm:  architecture:  spi       modm_driver_siemens_s65->modm_architecture_spi       modm_driver    modm:  driver       modm_driver_siemens_s65->modm_driver       modm_ui_display    modm:  ui:  display       modm_driver_siemens_s65->modm_ui_display",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-siemens_s75/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:siemens_s75\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nSiemensS75Common\n<\n \ntypename\n \nMEMORY\n,\n \ntypename\n \nRESET\n,\n \nuint16_t\n \nWIDTH\n,\n \nuint16_t\n \nHEIGHT\n,\n \nmodm\n::\nOrientation\n \nORIENTATION\n \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS75LandscapeLeft\n<\n \ntypename\n \nMEMORY\n \n,\n \ntypename\n \nRESET\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS75LandscapeRight\n<\n \ntypename\n \nMEMORY\n \n,\n \ntypename\n \nRESET\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS75Portrait\n<\n \ntypename\n \nMEMORY\n \n,\n \ntypename\n \nRESET\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSiemensS75PortraitUpsideDown\n<\n \ntypename\n \nMEMORY\n \n,\n \ntypename\n \nRESET\n  \n>\n;\n\n\n\n// Enum\n\n\nenum\n \nclass\n \nOrientation\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:siemens_s75\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s75\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nsiemens_s75\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s75->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s75->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_memory_bus\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmemory_bus\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s75->modm_driver_memory_bus\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s75->modm_ui_display",
            "title": "modm:driver:siemens_s75"
        },
        {
            "location": "/reference/module/modm-driver-siemens_s75/#modmdriversiemens_s75",
            "text": "",
            "title": "modm:driver:siemens_s75"
        },
        {
            "location": "/reference/module/modm-driver-siemens_s75/#content",
            "text": "// Class  class   modm :: SiemensS75Common <   typename   MEMORY ,   typename   RESET ,   uint16_t   WIDTH ,   uint16_t   HEIGHT ,   modm :: Orientation   ORIENTATION   > ;  class   modm :: SiemensS75LandscapeLeft <   typename   MEMORY   ,   typename   RESET    > ;  class   modm :: SiemensS75LandscapeRight <   typename   MEMORY   ,   typename   RESET    > ;  class   modm :: SiemensS75Portrait <   typename   MEMORY   ,   typename   RESET    > ;  class   modm :: SiemensS75PortraitUpsideDown <   typename   MEMORY   ,   typename   RESET    > ;  // Enum  enum   class   Orientation ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-siemens_s75/#dependencies",
            "text": "modm:driver:siemens_s75     modm_driver_siemens_s75   modm:  driver:  siemens_s75     modm_architecture_delay    modm:  architecture:  delay       modm_driver_siemens_s75->modm_architecture_delay       modm_driver    modm:  driver       modm_driver_siemens_s75->modm_driver       modm_driver_memory_bus    modm:  driver:  memory_bus       modm_driver_siemens_s75->modm_driver_memory_bus       modm_ui_display    modm:  ui:  display       modm_driver_siemens_s75->modm_ui_display",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-ssd1306/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:ssd1306\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nSsd1306\n<\n \nclass\n \nI2cMaster\n \n,\n \nuint8_t\n \nHeight\n=\n64\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nssd1306\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:ssd1306\n\n\n\n\n\n\n\n\nmodm_driver_ssd1306\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nssd1306\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ssd1306->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ssd1306->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ssd1306->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ssd1306->modm_ui_display",
            "title": "modm:driver:ssd1306"
        },
        {
            "location": "/reference/module/modm-driver-ssd1306/#modmdriverssd1306",
            "text": "",
            "title": "modm:driver:ssd1306"
        },
        {
            "location": "/reference/module/modm-driver-ssd1306/#content",
            "text": "// Class  class   modm :: Ssd1306 <   class   I2cMaster   ,   uint8_t   Height = 64   > ;  // Struct  struct   modm :: ssd1306 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-ssd1306/#dependencies",
            "text": "modm:driver:ssd1306     modm_driver_ssd1306   modm:  driver:  ssd1306     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_ssd1306->modm_architecture_i2c_device       modm_driver    modm:  driver       modm_driver_ssd1306->modm_driver       modm_processing_timer    modm:  processing:  timer       modm_driver_ssd1306->modm_processing_timer       modm_ui_display    modm:  ui:  display       modm_driver_ssd1306->modm_ui_display",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-tcs3414/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:tcs3414\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nTcs3414\n::\nuint16_t_LOW_HIGH\n;\n\n\nclass\n \nmodm\n::\nTcs3414\n<\n \ntypename\n \nI2cMaster\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\ntcs3414\n;\n\n\n\n// Variable\n\n\nstruct\n \nmodm\n::\nTcs3414\n::\nData\n::\n@\n0\n \nmodm\n::\nTcs3414\n<\n \nI2cMaster\n \n>::\nData\n::\n@\n1\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3414\n<\n \nI2cMaster\n \n>::\nData\n::\nblue\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3414\n<\n \nI2cMaster\n \n>::\nData\n::\nclear\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3414\n<\n \nI2cMaster\n \n>::\nData\n::\ngreen\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3414\n<\n \nI2cMaster\n \n>::\nData\n::\nred\n \n;\n\n\nuint8_t\n \nmodm\n::\nTcs3414\n<\n \nI2cMaster\n \n>::\nData\n::\ndataBytes\n[\n2\n \n*\n4\n]\n \n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:tcs3414\n\n\n\n\n\n\n\n\nmodm_driver_tcs3414\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntcs3414\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3414->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3414->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ncolor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3414->modm_ui_color",
            "title": "modm:driver:tcs3414"
        },
        {
            "location": "/reference/module/modm-driver-tcs3414/#modmdrivertcs3414",
            "text": "",
            "title": "modm:driver:tcs3414"
        },
        {
            "location": "/reference/module/modm-driver-tcs3414/#content",
            "text": "// Class  class   modm :: Tcs3414 :: uint16_t_LOW_HIGH ;  class   modm :: Tcs3414 <   typename   I2cMaster   > ;  // Struct  struct   modm :: tcs3414 ;  // Variable  struct   modm :: Tcs3414 :: Data :: @ 0   modm :: Tcs3414 <   I2cMaster   >:: Data :: @ 1   ;  uint16_t_LOW_HIGH   modm :: Tcs3414 <   I2cMaster   >:: Data :: blue   ;  uint16_t_LOW_HIGH   modm :: Tcs3414 <   I2cMaster   >:: Data :: clear   ;  uint16_t_LOW_HIGH   modm :: Tcs3414 <   I2cMaster   >:: Data :: green   ;  uint16_t_LOW_HIGH   modm :: Tcs3414 <   I2cMaster   >:: Data :: red   ;  uint8_t   modm :: Tcs3414 <   I2cMaster   >:: Data :: dataBytes [ 2   * 4 ]   ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-tcs3414/#dependencies",
            "text": "modm:driver:tcs3414     modm_driver_tcs3414   modm:  driver:  tcs3414     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_tcs3414->modm_architecture_i2c_device       modm_driver    modm:  driver       modm_driver_tcs3414->modm_driver       modm_ui_color    modm:  ui:  color       modm_driver_tcs3414->modm_ui_color",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-tcs3472/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:tcs3472\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nTcs3472\n::\nuint16_t_LOW_HIGH\n;\n\n\nclass\n \nmodm\n::\nTcs3472\n<\n \ntypename\n \nI2cMaster\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\ntcs3472\n;\n\n\n\n// Variable\n\n\nstruct\n \nmodm\n::\nTcs3472\n::\nData\n::\n@\n2\n \nmodm\n::\nTcs3472\n<\n \nI2cMaster\n \n>::\nData\n::\n@\n3\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3472\n<\n \nI2cMaster\n \n>::\nData\n::\nblue\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3472\n<\n \nI2cMaster\n \n>::\nData\n::\nclear\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3472\n<\n \nI2cMaster\n \n>::\nData\n::\ngreen\n \n;\n\n\nuint16_t_LOW_HIGH\n \nmodm\n::\nTcs3472\n<\n \nI2cMaster\n \n>::\nData\n::\nred\n \n;\n\n\nuint8_t\n \nmodm\n::\nTcs3472\n<\n \nI2cMaster\n \n>::\nData\n::\ndataBytes\n[\n2\n \n*\n4\n]\n \n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:tcs3472\n\n\n\n\n\n\n\n\nmodm_driver_tcs3472\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntcs3472\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3472->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3472->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ncolor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3472->modm_ui_color",
            "title": "modm:driver:tcs3472"
        },
        {
            "location": "/reference/module/modm-driver-tcs3472/#modmdrivertcs3472",
            "text": "",
            "title": "modm:driver:tcs3472"
        },
        {
            "location": "/reference/module/modm-driver-tcs3472/#content",
            "text": "// Class  class   modm :: Tcs3472 :: uint16_t_LOW_HIGH ;  class   modm :: Tcs3472 <   typename   I2cMaster   > ;  // Struct  struct   modm :: tcs3472 ;  // Variable  struct   modm :: Tcs3472 :: Data :: @ 2   modm :: Tcs3472 <   I2cMaster   >:: Data :: @ 3   ;  uint16_t_LOW_HIGH   modm :: Tcs3472 <   I2cMaster   >:: Data :: blue   ;  uint16_t_LOW_HIGH   modm :: Tcs3472 <   I2cMaster   >:: Data :: clear   ;  uint16_t_LOW_HIGH   modm :: Tcs3472 <   I2cMaster   >:: Data :: green   ;  uint16_t_LOW_HIGH   modm :: Tcs3472 <   I2cMaster   >:: Data :: red   ;  uint8_t   modm :: Tcs3472 <   I2cMaster   >:: Data :: dataBytes [ 2   * 4 ]   ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-tcs3472/#dependencies",
            "text": "modm:driver:tcs3472     modm_driver_tcs3472   modm:  driver:  tcs3472     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_tcs3472->modm_architecture_i2c_device       modm_driver    modm:  driver       modm_driver_tcs3472->modm_driver       modm_ui_color    modm:  ui:  color       modm_driver_tcs3472->modm_ui_color",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-tmp102/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:tmp102\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\ntmp102\n::\nData\n;\n\n\nstruct\n \nmodm\n::\ntmp102\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:tmp102\n\n\n\n\n\n\n\n\nmodm_driver_tmp102\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntmp102\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lm75\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlm75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102->modm_driver_lm75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_protothread\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nprotothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102->modm_processing_protothread",
            "title": "modm:driver:tmp102"
        },
        {
            "location": "/reference/module/modm-driver-tmp102/#modmdrivertmp102",
            "text": "",
            "title": "modm:driver:tmp102"
        },
        {
            "location": "/reference/module/modm-driver-tmp102/#content",
            "text": "// Struct  struct   modm :: tmp102 :: Data ;  struct   modm :: tmp102 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-tmp102/#dependencies",
            "text": "modm:driver:tmp102     modm_driver_tmp102   modm:  driver:  tmp102     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_tmp102->modm_architecture_i2c_device       modm_architecture_register    modm:  architecture:  register       modm_driver_tmp102->modm_architecture_register       modm_driver    modm:  driver       modm_driver_tmp102->modm_driver       modm_driver_lm75    modm:  driver:  lm75       modm_driver_tmp102->modm_driver_lm75       modm_math_utils    modm:  math:  utils       modm_driver_tmp102->modm_math_utils       modm_processing_protothread    modm:  processing:  protothread       modm_driver_tmp102->modm_processing_protothread",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-tmp175/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:tmp175\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\ntmp175\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:tmp175\n\n\n\n\n\n\n\n\nmodm_driver_tmp175\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntmp175\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lm75\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlm75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175->modm_driver_lm75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_protothread\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nprotothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175->modm_processing_protothread",
            "title": "modm:driver:tmp175"
        },
        {
            "location": "/reference/module/modm-driver-tmp175/#modmdrivertmp175",
            "text": "",
            "title": "modm:driver:tmp175"
        },
        {
            "location": "/reference/module/modm-driver-tmp175/#content",
            "text": "// Struct  struct   modm :: tmp175 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-tmp175/#dependencies",
            "text": "modm:driver:tmp175     modm_driver_tmp175   modm:  driver:  tmp175     modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_tmp175->modm_architecture_i2c_device       modm_architecture_register    modm:  architecture:  register       modm_driver_tmp175->modm_architecture_register       modm_driver    modm:  driver       modm_driver_tmp175->modm_driver       modm_driver_lm75    modm:  driver:  lm75       modm_driver_tmp175->modm_driver_lm75       modm_processing_protothread    modm:  processing:  protothread       modm_driver_tmp175->modm_processing_protothread",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-vl53l0/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:vl53l0\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nVl53l0\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nvl53l0\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nvl53l0\n::\nTimeOverhead\n;\n\n\nstruct\n \nmodm\n::\nvl53l0\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:vl53l0\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl53l0\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_utils",
            "title": "modm:driver:vl53l0"
        },
        {
            "location": "/reference/module/modm-driver-vl53l0/#modmdrivervl53l0",
            "text": "",
            "title": "modm:driver:vl53l0"
        },
        {
            "location": "/reference/module/modm-driver-vl53l0/#content",
            "text": "// Class  class   modm :: Vl53l0 <   typename   I2cMaster    > ;  // Struct  struct   modm :: vl53l0 :: Data ;  struct   modm :: vl53l0 :: TimeOverhead ;  struct   modm :: vl53l0 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-vl53l0/#dependencies",
            "text": "modm:driver:vl53l0     modm_driver_vl53l0   modm:  driver:  vl53l0     modm_architecture_accessor    modm:  architecture:  accessor       modm_driver_vl53l0->modm_architecture_accessor       modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_vl53l0->modm_architecture_i2c_device       modm_architecture_register    modm:  architecture:  register       modm_driver_vl53l0->modm_architecture_register       modm_debug    modm:  debug       modm_driver_vl53l0->modm_debug       modm_driver    modm:  driver       modm_driver_vl53l0->modm_driver       modm_processing_timer    modm:  processing:  timer       modm_driver_vl53l0->modm_processing_timer       modm_utils    modm:  utils       modm_driver_vl53l0->modm_utils",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-driver-vl6180/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:driver:vl6180\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nVl6180\n<\n \ntypename\n \nI2cMaster\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nvl6180\n::\nData\n;\n\n\nstruct\n \nmodm\n::\nvl6180\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:driver:vl6180\n\n\n\n\n\n\n\n\nmodm_driver_vl6180\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl6180\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_architecture_i2c_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_unaligned\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nunaligned\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_architecture_unaligned\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver\n\n\n\n\n\n\nmodm:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_driver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_protothread\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nprotothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_processing_protothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_processing_timer",
            "title": "modm:driver:vl6180"
        },
        {
            "location": "/reference/module/modm-driver-vl6180/#modmdrivervl6180",
            "text": "",
            "title": "modm:driver:vl6180"
        },
        {
            "location": "/reference/module/modm-driver-vl6180/#content",
            "text": "// Class  class   modm :: Vl6180 <   typename   I2cMaster    > ;  // Struct  struct   modm :: vl6180 :: Data ;  struct   modm :: vl6180 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-driver-vl6180/#dependencies",
            "text": "modm:driver:vl6180     modm_driver_vl6180   modm:  driver:  vl6180     modm_architecture_accessor    modm:  architecture:  accessor       modm_driver_vl6180->modm_architecture_accessor       modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_driver_vl6180->modm_architecture_i2c_device       modm_architecture_register    modm:  architecture:  register       modm_driver_vl6180->modm_architecture_register       modm_architecture_unaligned    modm:  architecture:  unaligned       modm_driver_vl6180->modm_architecture_unaligned       modm_debug    modm:  debug       modm_driver_vl6180->modm_debug       modm_driver    modm:  driver       modm_driver_vl6180->modm_driver       modm_math_utils    modm:  math:  utils       modm_driver_vl6180->modm_math_utils       modm_processing_protothread    modm:  processing:  protothread       modm_driver_vl6180->modm_processing_protothread       modm_processing_timer    modm:  processing:  timer       modm_driver_vl6180->modm_processing_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-fatfs/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:fatfs\n\u00b6\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:fatfs\n\n\n\n\n\n\n\n\nmodm_fatfs\n\n\n\n\nmodm:\n\n\nfatfs\n\n\n\n\n\n\n\n\nmodm_driver_fat\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nfat\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_fat->modm_fatfs",
            "title": "modm:fatfs"
        },
        {
            "location": "/reference/module/modm-fatfs/#modmfatfs",
            "text": "",
            "title": "modm:fatfs"
        },
        {
            "location": "/reference/module/modm-fatfs/#dependencies",
            "text": "modm:fatfs     modm_fatfs   modm:  fatfs     modm_driver_fat    modm:  driver:  fat       modm_driver_fat->modm_fatfs",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-freertos/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:freertos\n\u00b6\n\n\nOptions\n\u00b6\n\n\nfrequency\n\u00b6\n\n\nContext switch frequency in Hz: \n1000\n \u2208 \n{ 1000, 10000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000 }\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:freertos\n\n\n\n\n\n\n\n\nmodm_freertos\n\n\n\n\nmodm:\n\n\nfreertos\n\n\n\n\n\n\n\n\nmodm_processing_rtos\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nrtos\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_rtos->modm_freertos",
            "title": "modm:freertos"
        },
        {
            "location": "/reference/module/modm-freertos/#modmfreertos",
            "text": "",
            "title": "modm:freertos"
        },
        {
            "location": "/reference/module/modm-freertos/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-freertos/#frequency",
            "text": "Context switch frequency in Hz:  1000  \u2208  { 1000, 10000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000 }",
            "title": "frequency"
        },
        {
            "location": "/reference/module/modm-freertos/#dependencies",
            "text": "modm:freertos     modm_freertos   modm:  freertos     modm_processing_rtos    modm:  processing:  rtos       modm_processing_rtos->modm_freertos",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-io/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:io\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nIODevice\n;\n\n\nclass\n \nmodm\n::\nIODeviceWrapper\n<\n \nclass\n \nDevice\n \n,\n \nIOBuffer\n \nbehavior\n \n>\n;\n\n\nclass\n \nmodm\n::\nIOStream\n;\n\n\n\n// Function\n\n\nIOStream\n&\n \nmodm\n::\nascii\n(\nIOStream\n \n&\nios\n);\n\n\nIOStream\n&\n \nmodm\n::\nbin\n(\nIOStream\n \n&\nios\n);\n\n\nIOStream\n&\n \nmodm\n::\nblack\n(\nIOStream\n \n&\nios\n);\n\n\nIOStream\n&\n \nmodm\n::\nblue\n(\nIOStream\n \n&\nios\n);\n\n\nIOStream\n&\n \nmodm\n::\ncyan\n(\nIOStream\n \n&\nios\n);\n\n\nIOStream\n&\n \nmodm\n::\nendl\n(\nIOStream\n \n&\nios\n);\n\n\nIOStream\n&\n \nmodm\n::\nflush\n(\nIOStream\n \n&\nios\n);\n\n\nIOStream\n&\n \nmodm\n::\ngreen\n(\nIOStream\n \n&\nios\n);\n\n\nIOStream\n&\n \nmodm\n::\nhex\n(\nIOStream\n \n&\nios\n);\n\n\nIOStream\n&\n \nmodm\n::\nmagenta\n(\nIOStream\n \n&\nios\n);\n\n\nIOStream\n&\n \nmodm\n::\nred\n(\nIOStream\n \n&\nios\n);\n\n\nIOStream\n&\n \nmodm\n::\nwhite\n(\nIOStream\n \n&\nios\n);\n\n\nIOStream\n&\n \nmodm\n::\nyellow\n(\nIOStream\n \n&\nios\n);\n\n\n\n// Enum\n\n\nenum\n \nclass\n \nIOBuffer\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:io\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_accessor->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_can\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_can->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container\n\n\n\n\n\n\nmodm:\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7280a\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7928\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\ngeometry\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_matrix\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nmatrix\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_matrix->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_io\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_io->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ncolor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_unittest\n\n\n\n\n\n\nmodm:\n\n\nunittest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_unittest->modm_io",
            "title": "modm:io"
        },
        {
            "location": "/reference/module/modm-io/#modmio",
            "text": "",
            "title": "modm:io"
        },
        {
            "location": "/reference/module/modm-io/#content",
            "text": "// Class  class   modm :: IODevice ;  class   modm :: IODeviceWrapper <   class   Device   ,   IOBuffer   behavior   > ;  class   modm :: IOStream ;  // Function  IOStream &   modm :: ascii ( IOStream   & ios );  IOStream &   modm :: bin ( IOStream   & ios );  IOStream &   modm :: black ( IOStream   & ios );  IOStream &   modm :: blue ( IOStream   & ios );  IOStream &   modm :: cyan ( IOStream   & ios );  IOStream &   modm :: endl ( IOStream   & ios );  IOStream &   modm :: flush ( IOStream   & ios );  IOStream &   modm :: green ( IOStream   & ios );  IOStream &   modm :: hex ( IOStream   & ios );  IOStream &   modm :: magenta ( IOStream   & ios );  IOStream &   modm :: red ( IOStream   & ios );  IOStream &   modm :: white ( IOStream   & ios );  IOStream &   modm :: yellow ( IOStream   & ios );  // Enum  enum   class   IOBuffer ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-io/#dependencies",
            "text": "modm:io     modm_io   modm:  io     modm_architecture_accessor    modm:  architecture:  accessor       modm_io->modm_architecture_accessor       modm_math_utils    modm:  math:  utils       modm_io->modm_math_utils       modm_utils    modm:  utils       modm_io->modm_utils       modm_architecture_accessor->modm_io       modm_architecture_can    modm:  architecture:  can       modm_architecture_can->modm_io       modm_architecture_i2c    modm:  architecture:  i2c       modm_architecture_i2c->modm_io       modm_architecture_register    modm:  architecture:  register       modm_architecture_register->modm_io       modm_communication_xpcc    modm:  communication:  xpcc       modm_communication_xpcc->modm_io       modm_container    modm:  container       modm_container->modm_io       modm_debug    modm:  debug       modm_debug->modm_io       modm_driver_ad7280a    modm:  driver:  ad7280a       modm_driver_ad7280a->modm_io       modm_driver_ad7928    modm:  driver:  ad7928       modm_driver_ad7928->modm_io       modm_math_geometry    modm:  math:  geometry       modm_math_geometry->modm_io       modm_math_matrix    modm:  math:  matrix       modm_math_matrix->modm_io       modm_processing_timer    modm:  processing:  timer       modm_processing_timer->modm_io       modm_test_io    modm:  test:  io       modm_test_io->modm_io       modm_ui_color    modm:  ui:  color       modm_ui_color->modm_io       modm_ui_display    modm:  ui:  display       modm_ui_display->modm_io       modm_unittest    modm:  unittest       modm_unittest->modm_io",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-math/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:math\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nAngle\n;\n\n\nclass\n \nmodm\n::\nCircle2D\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nLUDecomposition\n::\nLUSubDecomposition\n<\n \nT\n,\n \nOFFSET\n,\n \nWIDTH\n,\n \nOFFSET\n \n>\n;\n\n\nclass\n \nmodm\n::\nLUDecomposition\n::\nLUSubDecomposition\n<\n \ntypename\n \nT\n \n,\n \nuint8_t\n \nOFFSET\n,\n \nuint8_t\n \nHEIGHT\n,\n \nuint8_t\n \nWIDTH\n \n>\n;\n\n\nclass\n \nmodm\n::\nLUDecomposition\n::\nRowOperation\n<\n \nT\n,\n \n0\n \n>\n;\n\n\nclass\n \nmodm\n::\nLUDecomposition\n::\nRowOperation\n<\n \ntypename\n \nT\n \n,\n \nuint8_t\n \nHEIGHT\n \n>\n;\n\n\nclass\n \nmodm\n::\nLUDecomposition\n;\n\n\nclass\n \nmodm\n::\nLine2D\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nLineSegment2D\n<\n \ntypename\n \nT\n=\nint16_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nLocation2D\n<\n \ntypename\n \nT\n=\nint16_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nMatrix\n<\n \ntypename\n \nT\n,\n \nuint8_t\n \nROWS\n,\n \nuint8_t\n \nCOLUMNS\n \n>\n;\n\n\nclass\n \nmodm\n::\nPid\n<\n \ntypename\n \nT\n \n,\n \nunsigned\n \nint\n \nScaleFactor\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nPointSet2D\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nPolygon2D\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nQuaternion\n<\n \nclass\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nRay2D\n<\n \ntypename\n \nT\n=\nint16_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nSCurveController\n<\n \ntypename\n \nT\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSCurveGenerator\n<\n \ntypename\n \nT\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSaturated\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nTolerance\n;\n\n\nclass\n \nmodm\n::\nVector\n<\n \nT\n,\n \n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nVector\n<\n \nT\n,\n \n2\n \n>\n;\n\n\nclass\n \nmodm\n::\nVector\n<\n \nT\n,\n \n3\n \n>\n;\n\n\nclass\n \nmodm\n::\nVector\n<\n \nT\n,\n \n4\n \n>\n;\n\n\nclass\n \nmodm\n::\nVector\n<\n \ntypename\n \nT\n,\n \nuint8_t\n \nN\n \n>\n;\n\n\nclass\n \nmodm\n::\nfilter\n::\nDebounce\n<\n \ntypename\n \nT\n \n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nfilter\n::\nFir\n<\n \ntypename\n \nT\n \n,\n \nint\n \nN\n,\n \nint\n \nBLOCK_SIZE\n,\n \nsigned\n \nint\n \nScaleFactor\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nfilter\n::\nMedian\n<\n \ntypename\n \nT\n \n,\n \nint\n \nN\n \n>\n;\n\n\nclass\n \nmodm\n::\nfilter\n::\nMovingAverage\n<\n \ntypename\n \nT\n \n,\n \nstd\n::\nsize_t\n \nN\n \n>\n;\n\n\nclass\n \nmodm\n::\nfilter\n::\nRamp\n<\n \ntypename\n \nT\n  \n>\n;\n\n\nclass\n \nmodm\n::\ninterpolation\n::\nLagrange\n<\n \ntypename\n \nT\n,\n \ntemplate\n<\n \ntypename\n \n>\n \nclass\n \nAccessor\n=::\nmodm\n::\naccessor\n::\nRam\n \n>\n;\n\n\nclass\n \nmodm\n::\ninterpolation\n::\nLinear\n<\n \ntypename\n \nT\n,\n \ntemplate\n<\n \ntypename\n \n>\n \nclass\n \nAccessor\n=::\nmodm\n::\naccessor\n::\nRam\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \ndouble\n \n>\n;\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \nfloat\n \n>\n;\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \nint16_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \nint32_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \nint8_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \ntypename\n \nT\n  \n>\n;\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \nuint8_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nPid\n::\nParameter\n;\n\n\nstruct\n \nmodm\n::\nSCurveController\n::\nParameter\n;\n\n\n\n// Function\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\n,\n \nconst\n \nMatrix\n<\n \nT\n,\n \nWIDTH\n,\n \nHEIGHT\n \n>\n \n&\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nLocation2D\n<\n \nT\n \n>\n \n&\nl\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nVector\n<\n \nU\n,\n \n2\n \n>\n \n&\nc\n);\n\n\nQuaternion\n<\nT\n>\n \nmodm\n::\noperator\n*\n(\nconst\n \nT\n \n&\nlhs\n,\n \nconst\n \nQuaternion\n<\n \nT\n \n>\n \n&\nrhs\n);\n\n\nSaturated\n<\n \nU\n \n>\n \nmodm\n::\nabs\n(\nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\nx\n);\n\n\nSaturated\n<\n \nU\n \n>\n \nmodm\n::\noperator\n+\n(\nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\na\n,\n \nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\nb\n);\n\n\nSaturated\n<\n \nU\n \n>\n \nmodm\n::\noperator\n-\n(\nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\na\n,\n \nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\nb\n);\n\n\nSaturated\n<\n \nU\n \n>\n \nmodm\n::\noperator\n-\n(\nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\nx\n);\n\n\nT\n \nmodm\n::\ndeterminant\n(\nconst\n \nmodm\n::\nMatrix\n<\n \nT\n,\n \n1\n,\n \n1\n \n>\n \n&\nm\n);\n\n\nT\n \nmodm\n::\ndeterminant\n(\nconst\n \nmodm\n::\nMatrix\n<\n \nT\n,\n \n2\n,\n \n2\n \n>\n \n&\nm\n);\n\n\nT\n \nmodm\n::\ndeterminant\n(\nconst\n \nmodm\n::\nMatrix\n<\n \nT\n,\n \nN\n,\n \nN\n \n>\n \n&\nm\n);\n\n\nVector\n<\nU\n,\n \n2\n>\n \nmodm\n::\noperator\n*\n(\nfloat\n \nscale\n,\n \nconst\n \nVector\n<\n \nU\n,\n \n2\n \n>\n \n&\nvector\n);\n\n\nVector\n<\nU\n,\n \n2\n>\n \nmodm\n::\noperator\n/\n(\nfloat\n \nscale\n,\n \nconst\n \nVector\n<\n \nU\n,\n \n2\n \n>\n \n&\nvector\n);\n\n\nbool\n \nmodm\n::\nisPositive\n(\nconst\n \nfloat\n \n&\na\n);\n\n\nbool\n \nmodm\n::\noperator\n!=\n(\nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\na\n,\n \nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\nb\n);\n\n\nbool\n \nmodm\n::\noperator\n==\n(\nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\na\n,\n \nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\nb\n);\n\n\nconst\n \nT\n&\n \nmodm\n::\nmax\n(\nconst\n \nT\n \n&\na\n,\n \nconst\n \nT\n \n&\nb\n);\n\n\nconst\n \nT\n&\n \nmodm\n::\nmax\n(\nconst\n \nT\n \n&\na\n,\n \nconst\n \nT\n \n&\nb\n,\n \nCompare\n \ncompare\n);\n\n\nconst\n \nT\n&\n \nmodm\n::\nmin\n(\nconst\n \nT\n \n&\na\n,\n \nconst\n \nT\n \n&\nb\n);\n\n\nconst\n \nT\n&\n \nmodm\n::\nmin\n(\nconst\n \nT\n \n&\na\n,\n \nconst\n \nT\n \n&\nb\n,\n \nCompare\n \ncompare\n);\n\n\nconstexpr\n \nT\n \nmodm\n::\nmax\n(\nconst\n \nT\n \na\n,\n \nconst\n \nT\n \nb\n,\n \nconst\n \nT\n \nc\n);\n\n\nconstexpr\n \nbool\n \nmodm\n::\nisBigEndian\n();\n\n\nconstexpr\n \nbool\n \nmodm\n::\nisLittleEndian\n();\n\n\nconstexpr\n \nint8_t\n \nmodm\n::\nleftmostBit\n(\nuint32_t\n \nvalue\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\npow\n(\nuint32_t\n \nbase\n,\n \nuint8_t\n \nexponent\n);\n\n\nint16_t\n \nmodm\n::\nfromBigEndian\n(\nint16_t\n \nvalue\n);\n\n\nint16_t\n \nmodm\n::\nfromLittleEndian\n(\nint16_t\n \nvalue\n);\n\n\nint16_t\n \nmodm\n::\ntoBigEndian\n(\nint16_t\n \nvalue\n);\n\n\nint16_t\n \nmodm\n::\ntoLittleEndian\n(\nint16_t\n \nvalue\n);\n\n\nint32_t\n \nmodm\n::\nfromBigEndian\n(\nint32_t\n \nvalue\n);\n\n\nint32_t\n \nmodm\n::\nfromLittleEndian\n(\nint32_t\n \nvalue\n);\n\n\nint32_t\n \nmodm\n::\nmath\n::\nmac\n(\nint32_t\n \nresult\n,\n \nint16_t\n \na\n,\n \nint16_t\n \nb\n);\n\n\nint32_t\n \nmodm\n::\nmath\n::\nmul\n(\nint16_t\n \na\n,\n \nint16_t\n \nb\n);\n\n\nint32_t\n \nmodm\n::\ntoBigEndian\n(\nint32_t\n \nvalue\n);\n\n\nint32_t\n \nmodm\n::\ntoLittleEndian\n(\nint32_t\n \nvalue\n);\n\n\nstatic\n \nVector\n<\nT\n,\n \n1\n>\n \nmodm\n::\noperator\n*\n(\nconst\n \nU\n \n&\nlhs\n,\n \nconst\n \nVector\n<\n \nT\n,\n \n1\n \n>\n \n&\nrhs\n);\n\n\nstatic\n \nVector\n<\nT\n,\n \n3\n>\n \nmodm\n::\noperator\n*\n(\nconst\n \nU\n \n&\nlhs\n,\n \nconst\n \nVector\n<\n \nT\n,\n \n3\n \n>\n \n&\nrhs\n);\n\n\nstatic\n \nVector\n<\nT\n,\n4\n>\n \nmodm\n::\noperator\n*\n(\nconst\n \nU\n \n&\nlhs\n,\n \nconst\n \nVector\n<\n \nT\n,\n \n4\n \n>\n \n&\nrhs\n);\n\n\nstatic\n \nVector\n<\nU\n,\n \n3\n>\n \nmodm\n::\noperator\n*\n(\nconst\n \nMatrix\n<\n \nT\n,\n \n3\n,\n \n3\n \n>\n \n&\nlhs\n,\n \nconst\n \nVector\n<\n \nU\n,\n \n3\n \n>\n \n&\nrhs\n);\n\n\nstatic\n \nVector\n<\nU\n,\n4\n>\n \nmodm\n::\noperator\n*\n(\nconst\n \nMatrix\n<\n \nT\n,\n \n4\n,\n \n4\n \n>\n \n&\nlhs\n,\n \nconst\n \nVector\n<\n \nU\n,\n \n4\n \n>\n \n&\nrhs\n);\n\n\nstatic\n \nconstexpr\n \nfloat\n \nmodm\n::\ntoDegree\n(\nfloat\n \nangle\n);\n\n\nstatic\n \nconstexpr\n \nfloat\n \nmodm\n::\ntoRadian\n(\nfloat\n \nangle\n);\n\n\nstd\n::\nsize_t\n \nmodm\n::\nbitCount\n(\nuint16_t\n \nn\n);\n\n\nstd\n::\nsize_t\n \nmodm\n::\nbitCount\n(\nuint32_t\n \nn\n);\n\n\nstd\n::\nsize_t\n \nmodm\n::\nbitCount\n(\nuint8_t\n \nn\n);\n\n\nuint16_t\n \nmodm\n::\nbitReverse\n(\nuint16_t\n \nn\n);\n\n\nuint16_t\n \nmodm\n::\nfromBigEndian\n(\nuint16_t\n \nvalue\n);\n\n\nuint16_t\n \nmodm\n::\nfromLittleEndian\n(\nuint16_t\n \nvalue\n);\n\n\nuint16_t\n \nmodm\n::\nmath\n::\nsqrt\n(\nuint32_t\n \na\n);\n\n\nuint16_t\n \nmodm\n::\nswap\n(\nuint16_t\n \nn\n);\n\n\nuint16_t\n \nmodm\n::\ntoBigEndian\n(\nuint16_t\n \nvalue\n);\n\n\nuint16_t\n \nmodm\n::\ntoLittleEndian\n(\nuint16_t\n \nvalue\n);\n\n\nuint16_t\n \nmodm__sqrt32\n(\nuint32_t\n \na\n);\n\n\nuint32_t\n \nmodm\n::\nbitReverse\n(\nuint32_t\n \nn\n);\n\n\nuint32_t\n \nmodm\n::\nfromBigEndian\n(\nuint32_t\n \nvalue\n);\n\n\nuint32_t\n \nmodm\n::\nfromLittleEndian\n(\nuint32_t\n \nvalue\n);\n\n\nuint32_t\n \nmodm\n::\nmath\n::\nmul\n(\nuint16_t\n \na\n,\n \nuint16_t\n \nb\n);\n\n\nuint32_t\n \nmodm\n::\nswap\n(\nuint32_t\n \nn\n);\n\n\nuint32_t\n \nmodm\n::\ntoBigEndian\n(\nuint32_t\n \nvalue\n);\n\n\nuint32_t\n \nmodm\n::\ntoLittleEndian\n(\nuint32_t\n \nvalue\n);\n\n\nuint8_t\n \nmodm\n::\nbitReverse\n(\nuint8_t\n \nn\n);\n\n\nuint8_t\n \nmodm\n::\nswap\n(\nuint8_t\n \nn\n);\n\n\nvoid\n \nmodm\n::\nswap\n(\nint16_t\n \n&\na\n,\n \nint16_t\n \n&\nb\n);\n\n\nvoid\n \nmodm\n::\nswap\n(\nuint8_t\n \n&\na\n,\n \nuint8_t\n \n&\nb\n);\n\n\n\n// Typedef\n\n\ntypedef\n \nMatrix\n<\nfloat\n,\n \n1\n,\n \n1\n>\n \nmodm\n::\nMatrix1f\n;\n\n\ntypedef\n \nMatrix\n<\nfloat\n,\n \n2\n,\n \n2\n>\n \nmodm\n::\nMatrix2f\n;\n\n\ntypedef\n \nMatrix\n<\nfloat\n,\n \n3\n,\n \n3\n>\n \nmodm\n::\nMatrix3f\n;\n\n\ntypedef\n \nMatrix\n<\nfloat\n,\n \n4\n,\n \n4\n>\n \nmodm\n::\nMatrix4f\n;\n\n\ntypedef\n \nVector\n<\nfloat\n,\n \n1\n>\n \nmodm\n::\nVector1f\n;\n\n\ntypedef\n \nVector\n<\nfloat\n,\n \n2\n>\n \nmodm\n::\nVector2f\n;\n\n\ntypedef\n \nVector\n<\nfloat\n,\n \n3\n>\n \nmodm\n::\nVector3f\n;\n\n\ntypedef\n \nVector\n<\nfloat\n,\n \n4\n>\n \nmodm\n::\nVector4f\n;\n\n\ntypedef\n \nVector\n<\nint16_t\n,\n \n1\n>\n \nmodm\n::\nVector1i\n;\n\n\ntypedef\n \nVector\n<\nint16_t\n,\n \n2\n>\n \nmodm\n::\nVector2i\n;\n\n\ntypedef\n \nVector\n<\nint16_t\n,\n \n3\n>\n \nmodm\n::\nVector3i\n;\n\n\ntypedef\n \nVector\n<\nint16_t\n,\n \n4\n>\n \nmodm\n::\nVector4i\n;\n\n\ntypedef\n \nVector\n<\nuint16_t\n,\n \n2\n>\n \nmodm\n::\nVector2u\n;\n\n\ntypedef\n \nVector\n<\nuint16_t\n,\n \n3\n>\n \nmodm\n::\nVector3u\n;\n\n\ntypedef\n \nVector\n<\nuint16_t\n,\n \n4\n>\n \nmodm\n::\nVector4u\n;\n\n\n\n// Define\n\n\n#define IMPLEMENT_VECTOR_ACCESSOR2(a, b)\n\n\n#define IMPLEMENT_VECTOR_ACCESSOR3(a, b, c)\n\n\n#define IMPLEMENT_VECTOR_ACCESSOR4(a, b, c, d)\n\n\n#define M_1_PI\n\n\n#define M_2_PI\n\n\n#define M_PI\n\n\n#define M_PI_2\n\n\n#define M_PI_4\n\n\n#define M_SQRT2\n\n\n#define M_TWOPI\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:math\n\n\n\n\n\n\n\n\nmodm_math\n\n\n\n\nmodm:\n\n\nmath\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture->modm_math\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_filter\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nfilter\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_filter->modm_math\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\ngeometry\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry->modm_math\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_interpolation\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\ninterpolation\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_interpolation->modm_math\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_matrix\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nmatrix\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_matrix->modm_math\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_saturated\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nsaturated\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_saturated->modm_math\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils->modm_math",
            "title": "modm:math"
        },
        {
            "location": "/reference/module/modm-math/#modmmath",
            "text": "",
            "title": "modm:math"
        },
        {
            "location": "/reference/module/modm-math/#content",
            "text": "// Class  class   modm :: Angle ;  class   modm :: Circle2D <   typename   T   > ;  class   modm :: LUDecomposition :: LUSubDecomposition <   T ,   OFFSET ,   WIDTH ,   OFFSET   > ;  class   modm :: LUDecomposition :: LUSubDecomposition <   typename   T   ,   uint8_t   OFFSET ,   uint8_t   HEIGHT ,   uint8_t   WIDTH   > ;  class   modm :: LUDecomposition :: RowOperation <   T ,   0   > ;  class   modm :: LUDecomposition :: RowOperation <   typename   T   ,   uint8_t   HEIGHT   > ;  class   modm :: LUDecomposition ;  class   modm :: Line2D <   typename   T   > ;  class   modm :: LineSegment2D <   typename   T = int16_t   > ;  class   modm :: Location2D <   typename   T = int16_t   > ;  class   modm :: Matrix <   typename   T ,   uint8_t   ROWS ,   uint8_t   COLUMNS   > ;  class   modm :: Pid <   typename   T   ,   unsigned   int   ScaleFactor = 1   > ;  class   modm :: PointSet2D <   typename   T   > ;  class   modm :: Polygon2D <   typename   T   > ;  class   modm :: Quaternion <   class   T   > ;  class   modm :: Ray2D <   typename   T = int16_t   > ;  class   modm :: SCurveController <   typename   T    > ;  class   modm :: SCurveGenerator <   typename   T    > ;  class   modm :: Saturated <   typename   T   > ;  class   modm :: Tolerance ;  class   modm :: Vector <   T ,   1   > ;  class   modm :: Vector <   T ,   2   > ;  class   modm :: Vector <   T ,   3   > ;  class   modm :: Vector <   T ,   4   > ;  class   modm :: Vector <   typename   T ,   uint8_t   N   > ;  class   modm :: filter :: Debounce <   typename   T   = uint8_t   > ;  class   modm :: filter :: Fir <   typename   T   ,   int   N ,   int   BLOCK_SIZE ,   signed   int   ScaleFactor = 1   > ;  class   modm :: filter :: Median <   typename   T   ,   int   N   > ;  class   modm :: filter :: MovingAverage <   typename   T   ,   std :: size_t   N   > ;  class   modm :: filter :: Ramp <   typename   T    > ;  class   modm :: interpolation :: Lagrange <   typename   T ,   template <   typename   >   class   Accessor =:: modm :: accessor :: Ram   > ;  class   modm :: interpolation :: Linear <   typename   T ,   template <   typename   >   class   Accessor =:: modm :: accessor :: Ram   > ;  // Struct  struct   modm :: GeometricTraits <   double   > ;  struct   modm :: GeometricTraits <   float   > ;  struct   modm :: GeometricTraits <   int16_t   > ;  struct   modm :: GeometricTraits <   int32_t   > ;  struct   modm :: GeometricTraits <   int8_t   > ;  struct   modm :: GeometricTraits <   typename   T    > ;  struct   modm :: GeometricTraits <   uint8_t   > ;  struct   modm :: Pid :: Parameter ;  struct   modm :: SCurveController :: Parameter ;  // Function  IOStream &   modm :: operator << ( IOStream   & ,   const   Matrix <   T ,   WIDTH ,   HEIGHT   >   & );  IOStream &   modm :: operator << ( IOStream   & os ,   const   Location2D <   T   >   & l );  IOStream &   modm :: operator << ( IOStream   & os ,   const   Vector <   U ,   2   >   & c );  Quaternion < T >   modm :: operator * ( const   T   & lhs ,   const   Quaternion <   T   >   & rhs );  Saturated <   U   >   modm :: abs ( const   Saturated <   U   >   & x );  Saturated <   U   >   modm :: operator + ( const   Saturated <   U   >   & a ,   const   Saturated <   U   >   & b );  Saturated <   U   >   modm :: operator - ( const   Saturated <   U   >   & a ,   const   Saturated <   U   >   & b );  Saturated <   U   >   modm :: operator - ( const   Saturated <   U   >   & x );  T   modm :: determinant ( const   modm :: Matrix <   T ,   1 ,   1   >   & m );  T   modm :: determinant ( const   modm :: Matrix <   T ,   2 ,   2   >   & m );  T   modm :: determinant ( const   modm :: Matrix <   T ,   N ,   N   >   & m );  Vector < U ,   2 >   modm :: operator * ( float   scale ,   const   Vector <   U ,   2   >   & vector );  Vector < U ,   2 >   modm :: operator / ( float   scale ,   const   Vector <   U ,   2   >   & vector );  bool   modm :: isPositive ( const   float   & a );  bool   modm :: operator != ( const   Saturated <   U   >   & a ,   const   Saturated <   U   >   & b );  bool   modm :: operator == ( const   Saturated <   U   >   & a ,   const   Saturated <   U   >   & b );  const   T &   modm :: max ( const   T   & a ,   const   T   & b );  const   T &   modm :: max ( const   T   & a ,   const   T   & b ,   Compare   compare );  const   T &   modm :: min ( const   T   & a ,   const   T   & b );  const   T &   modm :: min ( const   T   & a ,   const   T   & b ,   Compare   compare );  constexpr   T   modm :: max ( const   T   a ,   const   T   b ,   const   T   c );  constexpr   bool   modm :: isBigEndian ();  constexpr   bool   modm :: isLittleEndian ();  constexpr   int8_t   modm :: leftmostBit ( uint32_t   value );  constexpr   uint32_t   modm :: pow ( uint32_t   base ,   uint8_t   exponent );  int16_t   modm :: fromBigEndian ( int16_t   value );  int16_t   modm :: fromLittleEndian ( int16_t   value );  int16_t   modm :: toBigEndian ( int16_t   value );  int16_t   modm :: toLittleEndian ( int16_t   value );  int32_t   modm :: fromBigEndian ( int32_t   value );  int32_t   modm :: fromLittleEndian ( int32_t   value );  int32_t   modm :: math :: mac ( int32_t   result ,   int16_t   a ,   int16_t   b );  int32_t   modm :: math :: mul ( int16_t   a ,   int16_t   b );  int32_t   modm :: toBigEndian ( int32_t   value );  int32_t   modm :: toLittleEndian ( int32_t   value );  static   Vector < T ,   1 >   modm :: operator * ( const   U   & lhs ,   const   Vector <   T ,   1   >   & rhs );  static   Vector < T ,   3 >   modm :: operator * ( const   U   & lhs ,   const   Vector <   T ,   3   >   & rhs );  static   Vector < T , 4 >   modm :: operator * ( const   U   & lhs ,   const   Vector <   T ,   4   >   & rhs );  static   Vector < U ,   3 >   modm :: operator * ( const   Matrix <   T ,   3 ,   3   >   & lhs ,   const   Vector <   U ,   3   >   & rhs );  static   Vector < U , 4 >   modm :: operator * ( const   Matrix <   T ,   4 ,   4   >   & lhs ,   const   Vector <   U ,   4   >   & rhs );  static   constexpr   float   modm :: toDegree ( float   angle );  static   constexpr   float   modm :: toRadian ( float   angle );  std :: size_t   modm :: bitCount ( uint16_t   n );  std :: size_t   modm :: bitCount ( uint32_t   n );  std :: size_t   modm :: bitCount ( uint8_t   n );  uint16_t   modm :: bitReverse ( uint16_t   n );  uint16_t   modm :: fromBigEndian ( uint16_t   value );  uint16_t   modm :: fromLittleEndian ( uint16_t   value );  uint16_t   modm :: math :: sqrt ( uint32_t   a );  uint16_t   modm :: swap ( uint16_t   n );  uint16_t   modm :: toBigEndian ( uint16_t   value );  uint16_t   modm :: toLittleEndian ( uint16_t   value );  uint16_t   modm__sqrt32 ( uint32_t   a );  uint32_t   modm :: bitReverse ( uint32_t   n );  uint32_t   modm :: fromBigEndian ( uint32_t   value );  uint32_t   modm :: fromLittleEndian ( uint32_t   value );  uint32_t   modm :: math :: mul ( uint16_t   a ,   uint16_t   b );  uint32_t   modm :: swap ( uint32_t   n );  uint32_t   modm :: toBigEndian ( uint32_t   value );  uint32_t   modm :: toLittleEndian ( uint32_t   value );  uint8_t   modm :: bitReverse ( uint8_t   n );  uint8_t   modm :: swap ( uint8_t   n );  void   modm :: swap ( int16_t   & a ,   int16_t   & b );  void   modm :: swap ( uint8_t   & a ,   uint8_t   & b );  // Typedef  typedef   Matrix < float ,   1 ,   1 >   modm :: Matrix1f ;  typedef   Matrix < float ,   2 ,   2 >   modm :: Matrix2f ;  typedef   Matrix < float ,   3 ,   3 >   modm :: Matrix3f ;  typedef   Matrix < float ,   4 ,   4 >   modm :: Matrix4f ;  typedef   Vector < float ,   1 >   modm :: Vector1f ;  typedef   Vector < float ,   2 >   modm :: Vector2f ;  typedef   Vector < float ,   3 >   modm :: Vector3f ;  typedef   Vector < float ,   4 >   modm :: Vector4f ;  typedef   Vector < int16_t ,   1 >   modm :: Vector1i ;  typedef   Vector < int16_t ,   2 >   modm :: Vector2i ;  typedef   Vector < int16_t ,   3 >   modm :: Vector3i ;  typedef   Vector < int16_t ,   4 >   modm :: Vector4i ;  typedef   Vector < uint16_t ,   2 >   modm :: Vector2u ;  typedef   Vector < uint16_t ,   3 >   modm :: Vector3u ;  typedef   Vector < uint16_t ,   4 >   modm :: Vector4u ;  // Define  #define IMPLEMENT_VECTOR_ACCESSOR2(a, b)  #define IMPLEMENT_VECTOR_ACCESSOR3(a, b, c)  #define IMPLEMENT_VECTOR_ACCESSOR4(a, b, c, d)  #define M_1_PI  #define M_2_PI  #define M_PI  #define M_PI_2  #define M_PI_4  #define M_SQRT2  #define M_TWOPI",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-math/#dependencies",
            "text": "modm:math     modm_math   modm:  math     modm_architecture    modm:  architecture       modm_architecture->modm_math       modm_math_filter    modm:  math:  filter       modm_math_filter->modm_math       modm_math_geometry    modm:  math:  geometry       modm_math_geometry->modm_math       modm_math_interpolation    modm:  math:  interpolation       modm_math_interpolation->modm_math       modm_math_matrix    modm:  math:  matrix       modm_math_matrix->modm_math       modm_math_saturated    modm:  math:  saturated       modm_math_saturated->modm_math       modm_math_utils    modm:  math:  utils       modm_math_utils->modm_math",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-math-filter/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:math:filter\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nPid\n<\n \ntypename\n \nT\n \n,\n \nunsigned\n \nint\n \nScaleFactor\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nSCurveController\n<\n \ntypename\n \nT\n  \n>\n;\n\n\nclass\n \nmodm\n::\nSCurveGenerator\n<\n \ntypename\n \nT\n  \n>\n;\n\n\nclass\n \nmodm\n::\nfilter\n::\nDebounce\n<\n \ntypename\n \nT\n \n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nfilter\n::\nFir\n<\n \ntypename\n \nT\n \n,\n \nint\n \nN\n,\n \nint\n \nBLOCK_SIZE\n,\n \nsigned\n \nint\n \nScaleFactor\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nfilter\n::\nMedian\n<\n \ntypename\n \nT\n \n,\n \nint\n \nN\n \n>\n;\n\n\nclass\n \nmodm\n::\nfilter\n::\nMovingAverage\n<\n \ntypename\n \nT\n \n,\n \nstd\n::\nsize_t\n \nN\n \n>\n;\n\n\nclass\n \nmodm\n::\nfilter\n::\nRamp\n<\n \ntypename\n \nT\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nPid\n::\nParameter\n;\n\n\nstruct\n \nmodm\n::\nSCurveController\n::\nParameter\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:math:filter\n\n\n\n\n\n\n\n\nmodm_math_filter\n\n\n\n\nmodm:\n\n\nmath:\n\n\nfilter\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_filter->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math\n\n\n\n\n\n\nmodm:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_filter->modm_math\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_filter->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_filter->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_math_filter\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_math_filter",
            "title": "modm:math:filter"
        },
        {
            "location": "/reference/module/modm-math-filter/#modmmathfilter",
            "text": "",
            "title": "modm:math:filter"
        },
        {
            "location": "/reference/module/modm-math-filter/#content",
            "text": "// Class  class   modm :: Pid <   typename   T   ,   unsigned   int   ScaleFactor = 1   > ;  class   modm :: SCurveController <   typename   T    > ;  class   modm :: SCurveGenerator <   typename   T    > ;  class   modm :: filter :: Debounce <   typename   T   = uint8_t   > ;  class   modm :: filter :: Fir <   typename   T   ,   int   N ,   int   BLOCK_SIZE ,   signed   int   ScaleFactor = 1   > ;  class   modm :: filter :: Median <   typename   T   ,   int   N   > ;  class   modm :: filter :: MovingAverage <   typename   T   ,   std :: size_t   N   > ;  class   modm :: filter :: Ramp <   typename   T    > ;  // Struct  struct   modm :: Pid :: Parameter ;  struct   modm :: SCurveController :: Parameter ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-math-filter/#dependencies",
            "text": "modm:math:filter     modm_math_filter   modm:  math:  filter     modm_architecture    modm:  architecture       modm_math_filter->modm_architecture       modm_math    modm:  math       modm_math_filter->modm_math       modm_math_utils    modm:  math:  utils       modm_math_filter->modm_math_utils       modm_utils    modm:  utils       modm_math_filter->modm_utils       modm_test_math    modm:  test:  math       modm_test_math->modm_math_filter       modm_test_processing    modm:  test:  processing       modm_test_processing->modm_math_filter",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-math-geometry/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:math:geometry\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nAngle\n;\n\n\nclass\n \nmodm\n::\nCircle2D\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nLine2D\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nLineSegment2D\n<\n \ntypename\n \nT\n=\nint16_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nLocation2D\n<\n \ntypename\n \nT\n=\nint16_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nMatrix\n<\n \ntypename\n \nT\n,\n \nuint8_t\n \nROWS\n,\n \nuint8_t\n \nCOLUMNS\n \n>\n;\n\n\nclass\n \nmodm\n::\nPointSet2D\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nPolygon2D\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nQuaternion\n<\n \nclass\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nRay2D\n<\n \ntypename\n \nT\n=\nint16_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nVector\n<\n \nT\n,\n \n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nVector\n<\n \nT\n,\n \n2\n \n>\n;\n\n\nclass\n \nmodm\n::\nVector\n<\n \nT\n,\n \n3\n \n>\n;\n\n\nclass\n \nmodm\n::\nVector\n<\n \nT\n,\n \n4\n \n>\n;\n\n\nclass\n \nmodm\n::\nVector\n<\n \ntypename\n \nT\n,\n \nuint8_t\n \nN\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \ndouble\n \n>\n;\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \nfloat\n \n>\n;\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \nint16_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \nint32_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \nint8_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \ntypename\n \nT\n  \n>\n;\n\n\nstruct\n \nmodm\n::\nGeometricTraits\n<\n \nuint8_t\n \n>\n;\n\n\n\n// Function\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nLocation2D\n<\n \nT\n \n>\n \n&\nl\n);\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nVector\n<\n \nU\n,\n \n2\n \n>\n \n&\nc\n);\n\n\nQuaternion\n<\nT\n>\n \nmodm\n::\noperator\n*\n(\nconst\n \nT\n \n&\nlhs\n,\n \nconst\n \nQuaternion\n<\n \nT\n \n>\n \n&\nrhs\n);\n\n\nVector\n<\nU\n,\n \n2\n>\n \nmodm\n::\noperator\n*\n(\nfloat\n \nscale\n,\n \nconst\n \nVector\n<\n \nU\n,\n \n2\n \n>\n \n&\nvector\n);\n\n\nVector\n<\nU\n,\n \n2\n>\n \nmodm\n::\noperator\n/\n(\nfloat\n \nscale\n,\n \nconst\n \nVector\n<\n \nU\n,\n \n2\n \n>\n \n&\nvector\n);\n\n\nstatic\n \nVector\n<\nT\n,\n \n1\n>\n \nmodm\n::\noperator\n*\n(\nconst\n \nU\n \n&\nlhs\n,\n \nconst\n \nVector\n<\n \nT\n,\n \n1\n \n>\n \n&\nrhs\n);\n\n\nstatic\n \nVector\n<\nT\n,\n \n3\n>\n \nmodm\n::\noperator\n*\n(\nconst\n \nU\n \n&\nlhs\n,\n \nconst\n \nVector\n<\n \nT\n,\n \n3\n \n>\n \n&\nrhs\n);\n\n\nstatic\n \nVector\n<\nT\n,\n4\n>\n \nmodm\n::\noperator\n*\n(\nconst\n \nU\n \n&\nlhs\n,\n \nconst\n \nVector\n<\n \nT\n,\n \n4\n \n>\n \n&\nrhs\n);\n\n\nstatic\n \nVector\n<\nU\n,\n \n3\n>\n \nmodm\n::\noperator\n*\n(\nconst\n \nMatrix\n<\n \nT\n,\n \n3\n,\n \n3\n \n>\n \n&\nlhs\n,\n \nconst\n \nVector\n<\n \nU\n,\n \n3\n \n>\n \n&\nrhs\n);\n\n\nstatic\n \nVector\n<\nU\n,\n4\n>\n \nmodm\n::\noperator\n*\n(\nconst\n \nMatrix\n<\n \nT\n,\n \n4\n,\n \n4\n \n>\n \n&\nlhs\n,\n \nconst\n \nVector\n<\n \nU\n,\n \n4\n \n>\n \n&\nrhs\n);\n\n\nstatic\n \nconstexpr\n \nfloat\n \nmodm\n::\ntoDegree\n(\nfloat\n \nangle\n);\n\n\nstatic\n \nconstexpr\n \nfloat\n \nmodm\n::\ntoRadian\n(\nfloat\n \nangle\n);\n\n\n\n// Typedef\n\n\ntypedef\n \nVector\n<\nfloat\n,\n \n1\n>\n \nmodm\n::\nVector1f\n;\n\n\ntypedef\n \nVector\n<\nfloat\n,\n \n2\n>\n \nmodm\n::\nVector2f\n;\n\n\ntypedef\n \nVector\n<\nfloat\n,\n \n3\n>\n \nmodm\n::\nVector3f\n;\n\n\ntypedef\n \nVector\n<\nfloat\n,\n \n4\n>\n \nmodm\n::\nVector4f\n;\n\n\ntypedef\n \nVector\n<\nint16_t\n,\n \n1\n>\n \nmodm\n::\nVector1i\n;\n\n\ntypedef\n \nVector\n<\nint16_t\n,\n \n2\n>\n \nmodm\n::\nVector2i\n;\n\n\ntypedef\n \nVector\n<\nint16_t\n,\n \n3\n>\n \nmodm\n::\nVector3i\n;\n\n\ntypedef\n \nVector\n<\nint16_t\n,\n \n4\n>\n \nmodm\n::\nVector4i\n;\n\n\ntypedef\n \nVector\n<\nuint16_t\n,\n \n2\n>\n \nmodm\n::\nVector2u\n;\n\n\ntypedef\n \nVector\n<\nuint16_t\n,\n \n3\n>\n \nmodm\n::\nVector3u\n;\n\n\ntypedef\n \nVector\n<\nuint16_t\n,\n \n4\n>\n \nmodm\n::\nVector4u\n;\n\n\n\n// Define\n\n\n#define IMPLEMENT_VECTOR_ACCESSOR2(a, b)\n\n\n#define IMPLEMENT_VECTOR_ACCESSOR3(a, b, c)\n\n\n#define IMPLEMENT_VECTOR_ACCESSOR4(a, b, c, d)\n\n\n#define M_1_PI\n\n\n#define M_2_PI\n\n\n#define M_PI\n\n\n#define M_PI_2\n\n\n#define M_PI_4\n\n\n#define M_SQRT2\n\n\n#define M_TWOPI\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:math:geometry\n\n\n\n\n\n\n\n\nmodm_math_geometry\n\n\n\n\nmodm:\n\n\nmath:\n\n\ngeometry\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container\n\n\n\n\n\n\nmodm:\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math\n\n\n\n\n\n\nmodm:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry->modm_math\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_matrix\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nmatrix\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry->modm_math_matrix\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_matrix->modm_math_geometry\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_math_geometry\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display->modm_math_geometry",
            "title": "modm:math:geometry"
        },
        {
            "location": "/reference/module/modm-math-geometry/#modmmathgeometry",
            "text": "",
            "title": "modm:math:geometry"
        },
        {
            "location": "/reference/module/modm-math-geometry/#content",
            "text": "// Class  class   modm :: Angle ;  class   modm :: Circle2D <   typename   T   > ;  class   modm :: Line2D <   typename   T   > ;  class   modm :: LineSegment2D <   typename   T = int16_t   > ;  class   modm :: Location2D <   typename   T = int16_t   > ;  class   modm :: Matrix <   typename   T ,   uint8_t   ROWS ,   uint8_t   COLUMNS   > ;  class   modm :: PointSet2D <   typename   T   > ;  class   modm :: Polygon2D <   typename   T   > ;  class   modm :: Quaternion <   class   T   > ;  class   modm :: Ray2D <   typename   T = int16_t   > ;  class   modm :: Vector <   T ,   1   > ;  class   modm :: Vector <   T ,   2   > ;  class   modm :: Vector <   T ,   3   > ;  class   modm :: Vector <   T ,   4   > ;  class   modm :: Vector <   typename   T ,   uint8_t   N   > ;  // Struct  struct   modm :: GeometricTraits <   double   > ;  struct   modm :: GeometricTraits <   float   > ;  struct   modm :: GeometricTraits <   int16_t   > ;  struct   modm :: GeometricTraits <   int32_t   > ;  struct   modm :: GeometricTraits <   int8_t   > ;  struct   modm :: GeometricTraits <   typename   T    > ;  struct   modm :: GeometricTraits <   uint8_t   > ;  // Function  IOStream &   modm :: operator << ( IOStream   & os ,   const   Location2D <   T   >   & l );  IOStream &   modm :: operator << ( IOStream   & os ,   const   Vector <   U ,   2   >   & c );  Quaternion < T >   modm :: operator * ( const   T   & lhs ,   const   Quaternion <   T   >   & rhs );  Vector < U ,   2 >   modm :: operator * ( float   scale ,   const   Vector <   U ,   2   >   & vector );  Vector < U ,   2 >   modm :: operator / ( float   scale ,   const   Vector <   U ,   2   >   & vector );  static   Vector < T ,   1 >   modm :: operator * ( const   U   & lhs ,   const   Vector <   T ,   1   >   & rhs );  static   Vector < T ,   3 >   modm :: operator * ( const   U   & lhs ,   const   Vector <   T ,   3   >   & rhs );  static   Vector < T , 4 >   modm :: operator * ( const   U   & lhs ,   const   Vector <   T ,   4   >   & rhs );  static   Vector < U ,   3 >   modm :: operator * ( const   Matrix <   T ,   3 ,   3   >   & lhs ,   const   Vector <   U ,   3   >   & rhs );  static   Vector < U , 4 >   modm :: operator * ( const   Matrix <   T ,   4 ,   4   >   & lhs ,   const   Vector <   U ,   4   >   & rhs );  static   constexpr   float   modm :: toDegree ( float   angle );  static   constexpr   float   modm :: toRadian ( float   angle );  // Typedef  typedef   Vector < float ,   1 >   modm :: Vector1f ;  typedef   Vector < float ,   2 >   modm :: Vector2f ;  typedef   Vector < float ,   3 >   modm :: Vector3f ;  typedef   Vector < float ,   4 >   modm :: Vector4f ;  typedef   Vector < int16_t ,   1 >   modm :: Vector1i ;  typedef   Vector < int16_t ,   2 >   modm :: Vector2i ;  typedef   Vector < int16_t ,   3 >   modm :: Vector3i ;  typedef   Vector < int16_t ,   4 >   modm :: Vector4i ;  typedef   Vector < uint16_t ,   2 >   modm :: Vector2u ;  typedef   Vector < uint16_t ,   3 >   modm :: Vector3u ;  typedef   Vector < uint16_t ,   4 >   modm :: Vector4u ;  // Define  #define IMPLEMENT_VECTOR_ACCESSOR2(a, b)  #define IMPLEMENT_VECTOR_ACCESSOR3(a, b, c)  #define IMPLEMENT_VECTOR_ACCESSOR4(a, b, c, d)  #define M_1_PI  #define M_2_PI  #define M_PI  #define M_PI_2  #define M_PI_4  #define M_SQRT2  #define M_TWOPI",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-math-geometry/#dependencies",
            "text": "modm:math:geometry     modm_math_geometry   modm:  math:  geometry     modm_architecture    modm:  architecture       modm_math_geometry->modm_architecture       modm_container    modm:  container       modm_math_geometry->modm_container       modm_io    modm:  io       modm_math_geometry->modm_io       modm_math    modm:  math       modm_math_geometry->modm_math       modm_math_matrix    modm:  math:  matrix       modm_math_geometry->modm_math_matrix       modm_math_utils    modm:  math:  utils       modm_math_geometry->modm_math_utils       modm_math_matrix->modm_math_geometry       modm_test_math    modm:  test:  math       modm_test_math->modm_math_geometry       modm_ui_display    modm:  ui:  display       modm_ui_display->modm_math_geometry",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-math-interpolation/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:math:interpolation\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\ninterpolation\n::\nLagrange\n<\n \ntypename\n \nT\n,\n \ntemplate\n<\n \ntypename\n \n>\n \nclass\n \nAccessor\n=::\nmodm\n::\naccessor\n::\nRam\n \n>\n;\n\n\nclass\n \nmodm\n::\ninterpolation\n::\nLinear\n<\n \ntypename\n \nT\n,\n \ntemplate\n<\n \ntypename\n \n>\n \nclass\n \nAccessor\n=::\nmodm\n::\naccessor\n::\nRam\n \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:math:interpolation\n\n\n\n\n\n\n\n\nmodm_math_interpolation\n\n\n\n\nmodm:\n\n\nmath:\n\n\ninterpolation\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_interpolation->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container\n\n\n\n\n\n\nmodm:\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_interpolation->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math\n\n\n\n\n\n\nmodm:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_interpolation->modm_math\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_interpolation->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_math_interpolation",
            "title": "modm:math:interpolation"
        },
        {
            "location": "/reference/module/modm-math-interpolation/#modmmathinterpolation",
            "text": "",
            "title": "modm:math:interpolation"
        },
        {
            "location": "/reference/module/modm-math-interpolation/#content",
            "text": "// Class  class   modm :: interpolation :: Lagrange <   typename   T ,   template <   typename   >   class   Accessor =:: modm :: accessor :: Ram   > ;  class   modm :: interpolation :: Linear <   typename   T ,   template <   typename   >   class   Accessor =:: modm :: accessor :: Ram   > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-math-interpolation/#dependencies",
            "text": "modm:math:interpolation     modm_math_interpolation   modm:  math:  interpolation     modm_architecture_accessor    modm:  architecture:  accessor       modm_math_interpolation->modm_architecture_accessor       modm_container    modm:  container       modm_math_interpolation->modm_container       modm_math    modm:  math       modm_math_interpolation->modm_math       modm_utils    modm:  utils       modm_math_interpolation->modm_utils       modm_test_math    modm:  test:  math       modm_test_math->modm_math_interpolation",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-math-matrix/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:math:matrix\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nLUDecomposition\n::\nLUSubDecomposition\n<\n \nT\n,\n \nOFFSET\n,\n \nWIDTH\n,\n \nOFFSET\n \n>\n;\n\n\nclass\n \nmodm\n::\nLUDecomposition\n::\nLUSubDecomposition\n<\n \ntypename\n \nT\n \n,\n \nuint8_t\n \nOFFSET\n,\n \nuint8_t\n \nHEIGHT\n,\n \nuint8_t\n \nWIDTH\n \n>\n;\n\n\nclass\n \nmodm\n::\nLUDecomposition\n::\nRowOperation\n<\n \nT\n,\n \n0\n \n>\n;\n\n\nclass\n \nmodm\n::\nLUDecomposition\n::\nRowOperation\n<\n \ntypename\n \nT\n \n,\n \nuint8_t\n \nHEIGHT\n \n>\n;\n\n\nclass\n \nmodm\n::\nLUDecomposition\n;\n\n\n\n// Function\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\n,\n \nconst\n \nMatrix\n<\n \nT\n,\n \nWIDTH\n,\n \nHEIGHT\n \n>\n \n&\n);\n\n\nT\n \nmodm\n::\ndeterminant\n(\nconst\n \nmodm\n::\nMatrix\n<\n \nT\n,\n \n1\n,\n \n1\n \n>\n \n&\nm\n);\n\n\nT\n \nmodm\n::\ndeterminant\n(\nconst\n \nmodm\n::\nMatrix\n<\n \nT\n,\n \n2\n,\n \n2\n \n>\n \n&\nm\n);\n\n\nT\n \nmodm\n::\ndeterminant\n(\nconst\n \nmodm\n::\nMatrix\n<\n \nT\n,\n \nN\n,\n \nN\n \n>\n \n&\nm\n);\n\n\n\n// Typedef\n\n\ntypedef\n \nMatrix\n<\nfloat\n,\n \n1\n,\n \n1\n>\n \nmodm\n::\nMatrix1f\n;\n\n\ntypedef\n \nMatrix\n<\nfloat\n,\n \n2\n,\n \n2\n>\n \nmodm\n::\nMatrix2f\n;\n\n\ntypedef\n \nMatrix\n<\nfloat\n,\n \n3\n,\n \n3\n>\n \nmodm\n::\nMatrix3f\n;\n\n\ntypedef\n \nMatrix\n<\nfloat\n,\n \n4\n,\n \n4\n>\n \nmodm\n::\nMatrix4f\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:math:matrix\n\n\n\n\n\n\n\n\nmodm_math_matrix\n\n\n\n\nmodm:\n\n\nmath:\n\n\nmatrix\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_matrix->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math\n\n\n\n\n\n\nmodm:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_matrix->modm_math\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\ngeometry\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_matrix->modm_math_geometry\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_matrix->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry->modm_math_matrix\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_math_matrix",
            "title": "modm:math:matrix"
        },
        {
            "location": "/reference/module/modm-math-matrix/#modmmathmatrix",
            "text": "",
            "title": "modm:math:matrix"
        },
        {
            "location": "/reference/module/modm-math-matrix/#content",
            "text": "// Class  class   modm :: LUDecomposition :: LUSubDecomposition <   T ,   OFFSET ,   WIDTH ,   OFFSET   > ;  class   modm :: LUDecomposition :: LUSubDecomposition <   typename   T   ,   uint8_t   OFFSET ,   uint8_t   HEIGHT ,   uint8_t   WIDTH   > ;  class   modm :: LUDecomposition :: RowOperation <   T ,   0   > ;  class   modm :: LUDecomposition :: RowOperation <   typename   T   ,   uint8_t   HEIGHT   > ;  class   modm :: LUDecomposition ;  // Function  IOStream &   modm :: operator << ( IOStream   & ,   const   Matrix <   T ,   WIDTH ,   HEIGHT   >   & );  T   modm :: determinant ( const   modm :: Matrix <   T ,   1 ,   1   >   & m );  T   modm :: determinant ( const   modm :: Matrix <   T ,   2 ,   2   >   & m );  T   modm :: determinant ( const   modm :: Matrix <   T ,   N ,   N   >   & m );  // Typedef  typedef   Matrix < float ,   1 ,   1 >   modm :: Matrix1f ;  typedef   Matrix < float ,   2 ,   2 >   modm :: Matrix2f ;  typedef   Matrix < float ,   3 ,   3 >   modm :: Matrix3f ;  typedef   Matrix < float ,   4 ,   4 >   modm :: Matrix4f ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-math-matrix/#dependencies",
            "text": "modm:math:matrix     modm_math_matrix   modm:  math:  matrix     modm_io    modm:  io       modm_math_matrix->modm_io       modm_math    modm:  math       modm_math_matrix->modm_math       modm_math_geometry    modm:  math:  geometry       modm_math_matrix->modm_math_geometry       modm_utils    modm:  utils       modm_math_matrix->modm_utils       modm_math_geometry->modm_math_matrix       modm_test_math    modm:  test:  math       modm_test_math->modm_math_matrix",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-math-saturated/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:math:saturated\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nSaturated\n<\n \ntypename\n \nT\n \n>\n;\n\n\n\n// Function\n\n\nSaturated\n<\n \nU\n \n>\n \nmodm\n::\nabs\n(\nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\nx\n);\n\n\nSaturated\n<\n \nU\n \n>\n \nmodm\n::\noperator\n+\n(\nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\na\n,\n \nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\nb\n);\n\n\nSaturated\n<\n \nU\n \n>\n \nmodm\n::\noperator\n-\n(\nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\na\n,\n \nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\nb\n);\n\n\nSaturated\n<\n \nU\n \n>\n \nmodm\n::\noperator\n-\n(\nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\nx\n);\n\n\nbool\n \nmodm\n::\noperator\n!=\n(\nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\na\n,\n \nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\nb\n);\n\n\nbool\n \nmodm\n::\noperator\n==\n(\nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\na\n,\n \nconst\n \nSaturated\n<\n \nU\n \n>\n \n&\nb\n);\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:math:saturated\n\n\n\n\n\n\n\n\nmodm_math_saturated\n\n\n\n\nmodm:\n\n\nmath:\n\n\nsaturated\n\n\n\n\n\n\n\n\nmodm_math\n\n\n\n\n\n\nmodm:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_saturated->modm_math\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_saturated->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_math_saturated",
            "title": "modm:math:saturated"
        },
        {
            "location": "/reference/module/modm-math-saturated/#modmmathsaturated",
            "text": "",
            "title": "modm:math:saturated"
        },
        {
            "location": "/reference/module/modm-math-saturated/#content",
            "text": "// Class  class   modm :: Saturated <   typename   T   > ;  // Function  Saturated <   U   >   modm :: abs ( const   Saturated <   U   >   & x );  Saturated <   U   >   modm :: operator + ( const   Saturated <   U   >   & a ,   const   Saturated <   U   >   & b );  Saturated <   U   >   modm :: operator - ( const   Saturated <   U   >   & a ,   const   Saturated <   U   >   & b );  Saturated <   U   >   modm :: operator - ( const   Saturated <   U   >   & x );  bool   modm :: operator != ( const   Saturated <   U   >   & a ,   const   Saturated <   U   >   & b );  bool   modm :: operator == ( const   Saturated <   U   >   & a ,   const   Saturated <   U   >   & b );",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-math-saturated/#dependencies",
            "text": "modm:math:saturated     modm_math_saturated   modm:  math:  saturated     modm_math    modm:  math       modm_math_saturated->modm_math       modm_utils    modm:  utils       modm_math_saturated->modm_utils       modm_test_math    modm:  test:  math       modm_test_math->modm_math_saturated",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-math-utils/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:math:utils\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Function\n\n\nbool\n \nmodm\n::\nisPositive\n(\nconst\n \nfloat\n \n&\na\n);\n\n\nconst\n \nT\n&\n \nmodm\n::\nmax\n(\nconst\n \nT\n \n&\na\n,\n \nconst\n \nT\n \n&\nb\n);\n\n\nconst\n \nT\n&\n \nmodm\n::\nmax\n(\nconst\n \nT\n \n&\na\n,\n \nconst\n \nT\n \n&\nb\n,\n \nCompare\n \ncompare\n);\n\n\nconst\n \nT\n&\n \nmodm\n::\nmin\n(\nconst\n \nT\n \n&\na\n,\n \nconst\n \nT\n \n&\nb\n);\n\n\nconst\n \nT\n&\n \nmodm\n::\nmin\n(\nconst\n \nT\n \n&\na\n,\n \nconst\n \nT\n \n&\nb\n,\n \nCompare\n \ncompare\n);\n\n\nconstexpr\n \nT\n \nmodm\n::\nmax\n(\nconst\n \nT\n \na\n,\n \nconst\n \nT\n \nb\n,\n \nconst\n \nT\n \nc\n);\n\n\nconstexpr\n \nbool\n \nmodm\n::\nisBigEndian\n();\n\n\nconstexpr\n \nbool\n \nmodm\n::\nisLittleEndian\n();\n\n\nconstexpr\n \nint8_t\n \nmodm\n::\nleftmostBit\n(\nuint32_t\n \nvalue\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\npow\n(\nuint32_t\n \nbase\n,\n \nuint8_t\n \nexponent\n);\n\n\nint16_t\n \nmodm\n::\nfromBigEndian\n(\nint16_t\n \nvalue\n);\n\n\nint16_t\n \nmodm\n::\nfromLittleEndian\n(\nint16_t\n \nvalue\n);\n\n\nint16_t\n \nmodm\n::\ntoBigEndian\n(\nint16_t\n \nvalue\n);\n\n\nint16_t\n \nmodm\n::\ntoLittleEndian\n(\nint16_t\n \nvalue\n);\n\n\nint32_t\n \nmodm\n::\nfromBigEndian\n(\nint32_t\n \nvalue\n);\n\n\nint32_t\n \nmodm\n::\nfromLittleEndian\n(\nint32_t\n \nvalue\n);\n\n\nint32_t\n \nmodm\n::\nmath\n::\nmac\n(\nint32_t\n \nresult\n,\n \nint16_t\n \na\n,\n \nint16_t\n \nb\n);\n\n\nint32_t\n \nmodm\n::\nmath\n::\nmul\n(\nint16_t\n \na\n,\n \nint16_t\n \nb\n);\n\n\nint32_t\n \nmodm\n::\ntoBigEndian\n(\nint32_t\n \nvalue\n);\n\n\nint32_t\n \nmodm\n::\ntoLittleEndian\n(\nint32_t\n \nvalue\n);\n\n\nstd\n::\nsize_t\n \nmodm\n::\nbitCount\n(\nuint16_t\n \nn\n);\n\n\nstd\n::\nsize_t\n \nmodm\n::\nbitCount\n(\nuint32_t\n \nn\n);\n\n\nstd\n::\nsize_t\n \nmodm\n::\nbitCount\n(\nuint8_t\n \nn\n);\n\n\nuint16_t\n \nmodm\n::\nbitReverse\n(\nuint16_t\n \nn\n);\n\n\nuint16_t\n \nmodm\n::\nfromBigEndian\n(\nuint16_t\n \nvalue\n);\n\n\nuint16_t\n \nmodm\n::\nfromLittleEndian\n(\nuint16_t\n \nvalue\n);\n\n\nuint16_t\n \nmodm\n::\nmath\n::\nsqrt\n(\nuint32_t\n \na\n);\n\n\nuint16_t\n \nmodm\n::\nswap\n(\nuint16_t\n \nn\n);\n\n\nuint16_t\n \nmodm\n::\ntoBigEndian\n(\nuint16_t\n \nvalue\n);\n\n\nuint16_t\n \nmodm\n::\ntoLittleEndian\n(\nuint16_t\n \nvalue\n);\n\n\nuint16_t\n \nmodm__sqrt32\n(\nuint32_t\n \na\n);\n\n\nuint32_t\n \nmodm\n::\nbitReverse\n(\nuint32_t\n \nn\n);\n\n\nuint32_t\n \nmodm\n::\nfromBigEndian\n(\nuint32_t\n \nvalue\n);\n\n\nuint32_t\n \nmodm\n::\nfromLittleEndian\n(\nuint32_t\n \nvalue\n);\n\n\nuint32_t\n \nmodm\n::\nmath\n::\nmul\n(\nuint16_t\n \na\n,\n \nuint16_t\n \nb\n);\n\n\nuint32_t\n \nmodm\n::\nswap\n(\nuint32_t\n \nn\n);\n\n\nuint32_t\n \nmodm\n::\ntoBigEndian\n(\nuint32_t\n \nvalue\n);\n\n\nuint32_t\n \nmodm\n::\ntoLittleEndian\n(\nuint32_t\n \nvalue\n);\n\n\nuint8_t\n \nmodm\n::\nbitReverse\n(\nuint8_t\n \nn\n);\n\n\nuint8_t\n \nmodm\n::\nswap\n(\nuint8_t\n \nn\n);\n\n\nvoid\n \nmodm\n::\nswap\n(\nint16_t\n \n&\na\n,\n \nint16_t\n \n&\nb\n);\n\n\nvoid\n \nmodm\n::\nswap\n(\nuint8_t\n \n&\na\n,\n \nuint8_t\n \n&\nb\n);\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:math:utils\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math\n\n\n\n\n\n\nmodm:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils->modm_math\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio.expander\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7280a\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adc_sampler\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nadc_sampler\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adc_sampler->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_amsys5915\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\namsys5915\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_amsys5915->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbme280\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbmp085\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hclax\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhclax\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hclax->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc58x\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhmc58x\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc58x->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhmc6343\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nl3gd20\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3dsh\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3dsh\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3dsh->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lsm303a\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlsm303a\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lsm303a->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca9535\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntmp102\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl6180\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_filter\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nfilter\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_filter->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\ngeometry\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ncolor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display->modm_math_utils",
            "title": "modm:math:utils"
        },
        {
            "location": "/reference/module/modm-math-utils/#modmmathutils",
            "text": "",
            "title": "modm:math:utils"
        },
        {
            "location": "/reference/module/modm-math-utils/#content",
            "text": "// Function  bool   modm :: isPositive ( const   float   & a );  const   T &   modm :: max ( const   T   & a ,   const   T   & b );  const   T &   modm :: max ( const   T   & a ,   const   T   & b ,   Compare   compare );  const   T &   modm :: min ( const   T   & a ,   const   T   & b );  const   T &   modm :: min ( const   T   & a ,   const   T   & b ,   Compare   compare );  constexpr   T   modm :: max ( const   T   a ,   const   T   b ,   const   T   c );  constexpr   bool   modm :: isBigEndian ();  constexpr   bool   modm :: isLittleEndian ();  constexpr   int8_t   modm :: leftmostBit ( uint32_t   value );  constexpr   uint32_t   modm :: pow ( uint32_t   base ,   uint8_t   exponent );  int16_t   modm :: fromBigEndian ( int16_t   value );  int16_t   modm :: fromLittleEndian ( int16_t   value );  int16_t   modm :: toBigEndian ( int16_t   value );  int16_t   modm :: toLittleEndian ( int16_t   value );  int32_t   modm :: fromBigEndian ( int32_t   value );  int32_t   modm :: fromLittleEndian ( int32_t   value );  int32_t   modm :: math :: mac ( int32_t   result ,   int16_t   a ,   int16_t   b );  int32_t   modm :: math :: mul ( int16_t   a ,   int16_t   b );  int32_t   modm :: toBigEndian ( int32_t   value );  int32_t   modm :: toLittleEndian ( int32_t   value );  std :: size_t   modm :: bitCount ( uint16_t   n );  std :: size_t   modm :: bitCount ( uint32_t   n );  std :: size_t   modm :: bitCount ( uint8_t   n );  uint16_t   modm :: bitReverse ( uint16_t   n );  uint16_t   modm :: fromBigEndian ( uint16_t   value );  uint16_t   modm :: fromLittleEndian ( uint16_t   value );  uint16_t   modm :: math :: sqrt ( uint32_t   a );  uint16_t   modm :: swap ( uint16_t   n );  uint16_t   modm :: toBigEndian ( uint16_t   value );  uint16_t   modm :: toLittleEndian ( uint16_t   value );  uint16_t   modm__sqrt32 ( uint32_t   a );  uint32_t   modm :: bitReverse ( uint32_t   n );  uint32_t   modm :: fromBigEndian ( uint32_t   value );  uint32_t   modm :: fromLittleEndian ( uint32_t   value );  uint32_t   modm :: math :: mul ( uint16_t   a ,   uint16_t   b );  uint32_t   modm :: swap ( uint32_t   n );  uint32_t   modm :: toBigEndian ( uint32_t   value );  uint32_t   modm :: toLittleEndian ( uint32_t   value );  uint8_t   modm :: bitReverse ( uint8_t   n );  uint8_t   modm :: swap ( uint8_t   n );  void   modm :: swap ( int16_t   & a ,   int16_t   & b );  void   modm :: swap ( uint8_t   & a ,   uint8_t   & b );",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-math-utils/#dependencies",
            "text": "modm:math:utils     modm_math_utils   modm:  math:  utils     modm_architecture    modm:  architecture       modm_math_utils->modm_architecture       modm_math    modm:  math       modm_math_utils->modm_math       modm_architecture_gpio_expander    modm:  architecture:  gpio.expander       modm_architecture_gpio_expander->modm_math_utils       modm_architecture_register    modm:  architecture:  register       modm_architecture_register->modm_math_utils       modm_communication_xpcc    modm:  communication:  xpcc       modm_communication_xpcc->modm_math_utils       modm_driver_ad7280a    modm:  driver:  ad7280a       modm_driver_ad7280a->modm_math_utils       modm_driver_adc_sampler    modm:  driver:  adc_sampler       modm_driver_adc_sampler->modm_math_utils       modm_driver_amsys5915    modm:  driver:  amsys5915       modm_driver_amsys5915->modm_math_utils       modm_driver_bme280    modm:  driver:  bme280       modm_driver_bme280->modm_math_utils       modm_driver_bmp085    modm:  driver:  bmp085       modm_driver_bmp085->modm_math_utils       modm_driver_hclax    modm:  driver:  hclax       modm_driver_hclax->modm_math_utils       modm_driver_hmc58x    modm:  driver:  hmc58x       modm_driver_hmc58x->modm_math_utils       modm_driver_hmc6343    modm:  driver:  hmc6343       modm_driver_hmc6343->modm_math_utils       modm_driver_l3gd20    modm:  driver:  l3gd20       modm_driver_l3gd20->modm_math_utils       modm_driver_lis3dsh    modm:  driver:  lis3dsh       modm_driver_lis3dsh->modm_math_utils       modm_driver_lsm303a    modm:  driver:  lsm303a       modm_driver_lsm303a->modm_math_utils       modm_driver_pca9535    modm:  driver:  pca9535       modm_driver_pca9535->modm_math_utils       modm_driver_tmp102    modm:  driver:  tmp102       modm_driver_tmp102->modm_math_utils       modm_driver_vl6180    modm:  driver:  vl6180       modm_driver_vl6180->modm_math_utils       modm_io    modm:  io       modm_io->modm_math_utils       modm_math_filter    modm:  math:  filter       modm_math_filter->modm_math_utils       modm_math_geometry    modm:  math:  geometry       modm_math_geometry->modm_math_utils       modm_platform_gpio    modm:  platform:  gpio       modm_platform_gpio->modm_math_utils       modm_test_math    modm:  test:  math       modm_test_math->modm_math_utils       modm_test_processing    modm:  test:  processing       modm_test_processing->modm_math_utils       modm_ui_color    modm:  ui:  color       modm_ui_color->modm_math_utils       modm_ui_display    modm:  ui:  display       modm_ui_display->modm_math_utils",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nCanBitTiming\n<\n \nint32_t\n \nClk\n,\n \nint32_t\n \nBitrate\n \n>\n;\n\n\nclass\n \nmodm\n::\ncortex\n::\nSysTickTimer\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdc1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdc2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdc3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdcInterrupt1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdcInterrupt2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdcInterrupt3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdvancedControlTimer\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nBasicTimer\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nBitBangI2cMaster\n<\n \nclass\n \nScl\n \n,\n \nclass\n \nSda\n  \n>\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nBitBangOneWireMaster\n<\n \ntypename\n \nPin\n  \n>\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nBitBangSpiMaster\n<\n \ntypename\n \nSck\n \n,\n \ntypename\n \nMosi\n \n,\n \ntypename\n \nMiso\n \n=\nGpioUnused\n \n>\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nCan1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nCan2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nCanFilter\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nClockControl\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDmaBase\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGeneralPurposeTimer\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioInverted\n<\n \nclass\n \nPin\n  \n>\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioK3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioK4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioK5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioK6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioK7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioPort\n<\n \nclass\n \nStartGpio\n \n,\n \nint8_t\n \nWidth\n \n>\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioSet\n<\n \nclass\n...\n \nGpios\n \n>\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioUnused\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nI2cMaster1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nI2cMaster2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nI2cMaster3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nRandomNumberGenerator\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSoftwareGpioPort\n<\n \nclass\n...\n \nGpios\n \n>\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiBase\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUart4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUart5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUart7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUart8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartBase\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartBaudrate\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartHal4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartHal5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartHal7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartHal8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsart1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsart2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsart3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsart6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsartHal1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsartHal2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsartHal3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsartHal6\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nCanBitTiming\n::\nCanBitTimingConfiguration\n;\n\n\nstruct\n \nmodm\n::\nFlashReader\n<\n \ntypename\n \nT\n \n,\n \nstd\n::\nsize_t\n \nsize\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nExtendedFilterMask\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nExtendedFilterMaskShort\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nExtendedIdentifier\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nExtendedIdentifierShort\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nIdentifier\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nIdentifierShort\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nStandardFilterMask\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nStandardFilterMaskShort\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nStandardIdentifier\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nStandardIdentifierShort\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpio\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioConnector\n<\n \nPeripheral\n \nperipheral\n,\n \ntemplate\n<\n \nPeripheral\n \n_\n \n>\n \nclass\n...\n \nSignals\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n \nport\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nA\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nA\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nB\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nB\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nC\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nC\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nD\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nD\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nE\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nE\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nF\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nF\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nG\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nG\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nH\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nH\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nI\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nI\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nJ\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nJ\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nK\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nK\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n1\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n10\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n11\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n12\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n13\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n14\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n15\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n16\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n2\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n3\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n4\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n5\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n6\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n7\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n8\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n9\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n0\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n1\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n10\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n11\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n12\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n13\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n14\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n15\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n16\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n2\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n3\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n4\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n5\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n6\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n7\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n8\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n9\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nclass\n \nStartGpio\n \n,\n \nint8_t\n \nWidth\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioShim\n<\n \nclass\n \nStartGpio\n \n,\n \nint8_t\n \noffset\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA10\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA11\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA12\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA13\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA14\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA15\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA16\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA17\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA18\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA19\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA20\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA21\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA22\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA23\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA24\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA25\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA8\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA9\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nAf1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nAf2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nAle\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBa0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBa1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk1Io0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk1Io1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk1Io2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk1Io3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk1Ncs\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk2Io0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk2Io1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk2Io2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk2Io3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk2Ncs\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBkin\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh1n\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh2n\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh3n\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCkin\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCle\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nClk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCmd\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCol\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCrs\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCrsDv\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCts\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD10\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD11\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD12\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD13\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD14\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD15\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD16\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD17\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD18\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD19\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD20\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD21\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD22\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD23\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD24\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD25\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD26\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD27\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD28\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD29\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD30\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD31\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD8\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD9\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa10\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa11\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa12\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa13\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa14\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa15\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa8\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa9\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDe\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDm\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDp\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nEtr\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nExtSd\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nFsA\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nFsB\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nHsync\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nId\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn10\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn11\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn12\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn13\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn14\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn15\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn8\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn9\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nInt\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nJtck\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nJtdi\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nJtdo\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nJtms\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nJtrst\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMck\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMclkA\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMclkB\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMco1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMco2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMdc\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMdio\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMiso\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMosi\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNbl0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNbl1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNbl2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNbl3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNce\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNe1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNe2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNe3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNe4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNl\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNoe\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNss\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNwait\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNwe\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nOsc32In\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nOsc32Out\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nOscIn\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nOscOut\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nOut1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nOut2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nPixclk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nPpsOut\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRefClk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRefin\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRts\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRx\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxClk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxDv\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxEr\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxd0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxd1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxd2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxd3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSck\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSckA\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSckB\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nScl\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSd\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdA\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdB\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSda\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdcke0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdcke1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdclk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdncas\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdne0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdne1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdnras\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdnwe\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSmba\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSof\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSwclk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSwdio\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSwo\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTe\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTraceclk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTraced0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTraced1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTraced2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTraced3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTx\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTxClk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTxEn\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTxd0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTxd1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTxd2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTxd3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiCk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiDir\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiNxt\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiStp\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nVbus\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nVsync\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nWkup\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nWs\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\n\n// Function\n\n\nstatic\n \nuint32_t\n \nmodm\n::\nplatform\n::\ngetUniqueId\n(\nuint8_t\n \noffset\n);\n\n\nvoid\n \n_delay_ms\n(\nuint32_t\n \nms\n);\n\n\nvoid\n \n_delay_ns\n(\nuint32_t\n \nns\n);\n\n\nvoid\n \n_delay_us\n(\nuint32_t\n \nus\n);\n\n\n\n// Enum\n\n\nenum\n \nErrorCode\n;\n\n\nenum\n \nclass\n \nPeripheral\n;\n\n\nenum\n \nclass\n \nStartupError\n;\n\n\n\n// Variable\n\n\nuint16_t\n \nmodm_fastdata\n \nmodm\n::\nclock\n::\nfcpu_MHz\n \n;\n\n\nuint16_t\n \nmodm_fastdata\n \nmodm\n::\nclock\n::\nns_per_loop\n \n;\n\n\nuint32_t\n \nmodm_fastdata\n \nmodm\n::\nclock\n::\nfcpu\n \n;\n\n\nuint32_t\n \nmodm_fastdata\n \nmodm\n::\nclock\n::\nfcpu_kHz\n \n;\n\n\n\n// Typedef\n\n\ntypedef\n \nvoid\n(\n*\n \nmodm\n::\ncortex\n::\nInterruptHandler\n)\n \n(\nvoid\n))(\nvoid\n);\n\n\n\n// Define\n\n\n#define EXTERN_FLASH_STORAGE(var)\n\n\n#define EXTERN_FLASH_STORAGE_STRING(s)\n\n\n#define FLASH_STORAGE(var)\n\n\n#define FLASH_STORAGE_STRING(s)\n\n\n#define INLINE_FLASH_STORAGE_STRING(s)\n\n\n#define PSTR(s)\n\n\n#define USART_BRR_DIV_FRACTION\n\n\n#define USART_BRR_DIV_MANTISSA\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\nmodm_platform_1-wire_bitbang\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\n1-wire.bitbang\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_1-wire_bitbang->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_common\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan.common\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_common->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock.cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_dma\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ndma\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_dma->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nfault.cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio_common\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio.common\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio_common->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c.bitbang\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_id\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nid\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_id->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_random\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nrandom\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_random->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_bitbang\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi.bitbang\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_bitbang->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi->modm_platform",
            "title": "modm:platform"
        },
        {
            "location": "/reference/module/modm-platform/#modmplatform",
            "text": "",
            "title": "modm:platform"
        },
        {
            "location": "/reference/module/modm-platform/#content",
            "text": "// Class  class   modm :: CanBitTiming <   int32_t   Clk ,   int32_t   Bitrate   > ;  class   modm :: cortex :: SysTickTimer ;  class   modm :: platform :: Adc1 ;  class   modm :: platform :: Adc2 ;  class   modm :: platform :: Adc3 ;  class   modm :: platform :: AdcInterrupt1 ;  class   modm :: platform :: AdcInterrupt2 ;  class   modm :: platform :: AdcInterrupt3 ;  class   modm :: platform :: AdvancedControlTimer ;  class   modm :: platform :: BasicTimer ;  class   modm :: platform :: BitBangI2cMaster <   class   Scl   ,   class   Sda    > ;  class   modm :: platform :: BitBangOneWireMaster <   typename   Pin    > ;  class   modm :: platform :: BitBangSpiMaster <   typename   Sck   ,   typename   Mosi   ,   typename   Miso   = GpioUnused   > ;  class   modm :: platform :: Can1 ;  class   modm :: platform :: Can2 ;  class   modm :: platform :: CanFilter ;  class   modm :: platform :: ClockControl ;  class   modm :: platform :: Dma1 :: Stream0 ;  class   modm :: platform :: Dma1 :: Stream1 ;  class   modm :: platform :: Dma1 :: Stream2 ;  class   modm :: platform :: Dma1 :: Stream3 ;  class   modm :: platform :: Dma1 :: Stream4 ;  class   modm :: platform :: Dma1 :: Stream5 ;  class   modm :: platform :: Dma1 :: Stream6 ;  class   modm :: platform :: Dma1 :: Stream7 ;  class   modm :: platform :: Dma1 ;  class   modm :: platform :: Dma2 :: Stream0 ;  class   modm :: platform :: Dma2 :: Stream1 ;  class   modm :: platform :: Dma2 :: Stream2 ;  class   modm :: platform :: Dma2 :: Stream3 ;  class   modm :: platform :: Dma2 :: Stream4 ;  class   modm :: platform :: Dma2 :: Stream5 ;  class   modm :: platform :: Dma2 :: Stream6 ;  class   modm :: platform :: Dma2 :: Stream7 ;  class   modm :: platform :: Dma2 ;  class   modm :: platform :: DmaBase ;  class   modm :: platform :: GeneralPurposeTimer ;  class   modm :: platform :: GpioA0 ;  class   modm :: platform :: GpioA10 ;  class   modm :: platform :: GpioA11 ;  class   modm :: platform :: GpioA12 ;  class   modm :: platform :: GpioA13 ;  class   modm :: platform :: GpioA14 ;  class   modm :: platform :: GpioA15 ;  class   modm :: platform :: GpioA1 ;  class   modm :: platform :: GpioA2 ;  class   modm :: platform :: GpioA3 ;  class   modm :: platform :: GpioA4 ;  class   modm :: platform :: GpioA5 ;  class   modm :: platform :: GpioA6 ;  class   modm :: platform :: GpioA7 ;  class   modm :: platform :: GpioA8 ;  class   modm :: platform :: GpioA9 ;  class   modm :: platform :: GpioB0 ;  class   modm :: platform :: GpioB10 ;  class   modm :: platform :: GpioB11 ;  class   modm :: platform :: GpioB12 ;  class   modm :: platform :: GpioB13 ;  class   modm :: platform :: GpioB14 ;  class   modm :: platform :: GpioB15 ;  class   modm :: platform :: GpioB1 ;  class   modm :: platform :: GpioB2 ;  class   modm :: platform :: GpioB3 ;  class   modm :: platform :: GpioB4 ;  class   modm :: platform :: GpioB5 ;  class   modm :: platform :: GpioB6 ;  class   modm :: platform :: GpioB7 ;  class   modm :: platform :: GpioB8 ;  class   modm :: platform :: GpioB9 ;  class   modm :: platform :: GpioC0 ;  class   modm :: platform :: GpioC10 ;  class   modm :: platform :: GpioC11 ;  class   modm :: platform :: GpioC12 ;  class   modm :: platform :: GpioC13 ;  class   modm :: platform :: GpioC14 ;  class   modm :: platform :: GpioC15 ;  class   modm :: platform :: GpioC1 ;  class   modm :: platform :: GpioC2 ;  class   modm :: platform :: GpioC3 ;  class   modm :: platform :: GpioC4 ;  class   modm :: platform :: GpioC5 ;  class   modm :: platform :: GpioC6 ;  class   modm :: platform :: GpioC7 ;  class   modm :: platform :: GpioC8 ;  class   modm :: platform :: GpioC9 ;  class   modm :: platform :: GpioD0 ;  class   modm :: platform :: GpioD10 ;  class   modm :: platform :: GpioD11 ;  class   modm :: platform :: GpioD12 ;  class   modm :: platform :: GpioD13 ;  class   modm :: platform :: GpioD14 ;  class   modm :: platform :: GpioD15 ;  class   modm :: platform :: GpioD1 ;  class   modm :: platform :: GpioD2 ;  class   modm :: platform :: GpioD3 ;  class   modm :: platform :: GpioD4 ;  class   modm :: platform :: GpioD5 ;  class   modm :: platform :: GpioD6 ;  class   modm :: platform :: GpioD7 ;  class   modm :: platform :: GpioD8 ;  class   modm :: platform :: GpioD9 ;  class   modm :: platform :: GpioE0 ;  class   modm :: platform :: GpioE10 ;  class   modm :: platform :: GpioE11 ;  class   modm :: platform :: GpioE12 ;  class   modm :: platform :: GpioE13 ;  class   modm :: platform :: GpioE14 ;  class   modm :: platform :: GpioE15 ;  class   modm :: platform :: GpioE1 ;  class   modm :: platform :: GpioE2 ;  class   modm :: platform :: GpioE3 ;  class   modm :: platform :: GpioE4 ;  class   modm :: platform :: GpioE5 ;  class   modm :: platform :: GpioE6 ;  class   modm :: platform :: GpioE7 ;  class   modm :: platform :: GpioE8 ;  class   modm :: platform :: GpioE9 ;  class   modm :: platform :: GpioF0 ;  class   modm :: platform :: GpioF10 ;  class   modm :: platform :: GpioF11 ;  class   modm :: platform :: GpioF12 ;  class   modm :: platform :: GpioF13 ;  class   modm :: platform :: GpioF14 ;  class   modm :: platform :: GpioF15 ;  class   modm :: platform :: GpioF1 ;  class   modm :: platform :: GpioF2 ;  class   modm :: platform :: GpioF3 ;  class   modm :: platform :: GpioF4 ;  class   modm :: platform :: GpioF5 ;  class   modm :: platform :: GpioF6 ;  class   modm :: platform :: GpioF7 ;  class   modm :: platform :: GpioF8 ;  class   modm :: platform :: GpioF9 ;  class   modm :: platform :: GpioG0 ;  class   modm :: platform :: GpioG10 ;  class   modm :: platform :: GpioG11 ;  class   modm :: platform :: GpioG12 ;  class   modm :: platform :: GpioG13 ;  class   modm :: platform :: GpioG14 ;  class   modm :: platform :: GpioG15 ;  class   modm :: platform :: GpioG1 ;  class   modm :: platform :: GpioG2 ;  class   modm :: platform :: GpioG3 ;  class   modm :: platform :: GpioG4 ;  class   modm :: platform :: GpioG5 ;  class   modm :: platform :: GpioG6 ;  class   modm :: platform :: GpioG7 ;  class   modm :: platform :: GpioG8 ;  class   modm :: platform :: GpioG9 ;  class   modm :: platform :: GpioH0 ;  class   modm :: platform :: GpioH10 ;  class   modm :: platform :: GpioH11 ;  class   modm :: platform :: GpioH12 ;  class   modm :: platform :: GpioH13 ;  class   modm :: platform :: GpioH14 ;  class   modm :: platform :: GpioH15 ;  class   modm :: platform :: GpioH1 ;  class   modm :: platform :: GpioH2 ;  class   modm :: platform :: GpioH3 ;  class   modm :: platform :: GpioH4 ;  class   modm :: platform :: GpioH5 ;  class   modm :: platform :: GpioH6 ;  class   modm :: platform :: GpioH7 ;  class   modm :: platform :: GpioH8 ;  class   modm :: platform :: GpioH9 ;  class   modm :: platform :: GpioI0 ;  class   modm :: platform :: GpioI10 ;  class   modm :: platform :: GpioI11 ;  class   modm :: platform :: GpioI12 ;  class   modm :: platform :: GpioI13 ;  class   modm :: platform :: GpioI14 ;  class   modm :: platform :: GpioI15 ;  class   modm :: platform :: GpioI1 ;  class   modm :: platform :: GpioI2 ;  class   modm :: platform :: GpioI3 ;  class   modm :: platform :: GpioI4 ;  class   modm :: platform :: GpioI5 ;  class   modm :: platform :: GpioI6 ;  class   modm :: platform :: GpioI7 ;  class   modm :: platform :: GpioI8 ;  class   modm :: platform :: GpioI9 ;  class   modm :: platform :: GpioInverted <   class   Pin    > ;  class   modm :: platform :: GpioJ0 ;  class   modm :: platform :: GpioJ12 ;  class   modm :: platform :: GpioJ13 ;  class   modm :: platform :: GpioJ14 ;  class   modm :: platform :: GpioJ15 ;  class   modm :: platform :: GpioJ1 ;  class   modm :: platform :: GpioJ2 ;  class   modm :: platform :: GpioJ3 ;  class   modm :: platform :: GpioJ4 ;  class   modm :: platform :: GpioJ5 ;  class   modm :: platform :: GpioK3 ;  class   modm :: platform :: GpioK4 ;  class   modm :: platform :: GpioK5 ;  class   modm :: platform :: GpioK6 ;  class   modm :: platform :: GpioK7 ;  class   modm :: platform :: GpioPort <   class   StartGpio   ,   int8_t   Width   > ;  class   modm :: platform :: GpioSet <   class ...   Gpios   > ;  class   modm :: platform :: GpioUnused ;  class   modm :: platform :: I2cMaster1 ;  class   modm :: platform :: I2cMaster2 ;  class   modm :: platform :: I2cMaster3 ;  class   modm :: platform :: RandomNumberGenerator ;  class   modm :: platform :: SoftwareGpioPort <   class ...   Gpios   > ;  class   modm :: platform :: SpiBase ;  class   modm :: platform :: SpiHal1 ;  class   modm :: platform :: SpiHal2 ;  class   modm :: platform :: SpiHal3 ;  class   modm :: platform :: SpiHal4 ;  class   modm :: platform :: SpiHal5 ;  class   modm :: platform :: SpiHal6 ;  class   modm :: platform :: SpiMaster1 ;  class   modm :: platform :: SpiMaster2 ;  class   modm :: platform :: SpiMaster3 ;  class   modm :: platform :: SpiMaster4 ;  class   modm :: platform :: SpiMaster5 ;  class   modm :: platform :: SpiMaster6 ;  class   modm :: platform :: Timer10 ;  class   modm :: platform :: Timer11 ;  class   modm :: platform :: Timer12 ;  class   modm :: platform :: Timer13 ;  class   modm :: platform :: Timer14 ;  class   modm :: platform :: Timer1 ;  class   modm :: platform :: Timer2 ;  class   modm :: platform :: Timer3 ;  class   modm :: platform :: Timer4 ;  class   modm :: platform :: Timer5 ;  class   modm :: platform :: Timer6 ;  class   modm :: platform :: Timer7 ;  class   modm :: platform :: Timer8 ;  class   modm :: platform :: Timer9 ;  class   modm :: platform :: Uart4 ;  class   modm :: platform :: Uart5 ;  class   modm :: platform :: Uart7 ;  class   modm :: platform :: Uart8 ;  class   modm :: platform :: UartBase ;  class   modm :: platform :: UartBaudrate ;  class   modm :: platform :: UartHal4 ;  class   modm :: platform :: UartHal5 ;  class   modm :: platform :: UartHal7 ;  class   modm :: platform :: UartHal8 ;  class   modm :: platform :: UartSpiMaster1 ;  class   modm :: platform :: UartSpiMaster2 ;  class   modm :: platform :: UartSpiMaster3 ;  class   modm :: platform :: UartSpiMaster6 ;  class   modm :: platform :: Usart1 ;  class   modm :: platform :: Usart2 ;  class   modm :: platform :: Usart3 ;  class   modm :: platform :: Usart6 ;  class   modm :: platform :: UsartHal1 ;  class   modm :: platform :: UsartHal2 ;  class   modm :: platform :: UsartHal3 ;  class   modm :: platform :: UsartHal6 ;  // Struct  struct   modm :: CanBitTiming :: CanBitTimingConfiguration ;  struct   modm :: FlashReader <   typename   T   ,   std :: size_t   size   > ;  struct   modm :: platform :: CanFilter :: ExtendedFilterMask ;  struct   modm :: platform :: CanFilter :: ExtendedFilterMaskShort ;  struct   modm :: platform :: CanFilter :: ExtendedIdentifier ;  struct   modm :: platform :: CanFilter :: ExtendedIdentifierShort ;  struct   modm :: platform :: CanFilter :: Identifier ;  struct   modm :: platform :: CanFilter :: IdentifierShort ;  struct   modm :: platform :: CanFilter :: StandardFilterMask ;  struct   modm :: platform :: CanFilter :: StandardFilterMaskShort ;  struct   modm :: platform :: CanFilter :: StandardIdentifier ;  struct   modm :: platform :: CanFilter :: StandardIdentifierShort ;  struct   modm :: platform :: Gpio ;  struct   modm :: platform :: GpioConnector <   Peripheral   peripheral ,   template <   Peripheral   _   >   class ...   Signals   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port   port   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: A   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: A   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: B   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: B   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: C   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: C   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: D   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: D   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: E   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: E   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: F   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: F   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: G   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: G   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: H   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: H   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: I   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: I   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: J   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: J   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: K   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: K   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 1   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 10   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 11   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 12   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 13   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 14   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 15   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 16   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 2   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 3   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 4   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 5   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 6   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 7   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 8   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 9   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   0   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   1   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   10   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   11   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   12   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   13   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   14   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   15   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   16   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   2   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   3   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   4   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   5   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   6   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   7   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   8   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   9   > ;  struct   modm :: platform :: GpioSetShim <   class   StartGpio   ,   int8_t   Width   > ;  struct   modm :: platform :: GpioShim <   class   StartGpio   ,   int8_t   offset   > ;  struct   modm :: platform :: GpioUnused :: A0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A10 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A11 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A12 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A13 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A14 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A15 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A16 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A17 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A18 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A19 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A20 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A21 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A22 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A23 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A24 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A25 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A8 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A9 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Af1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Af2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ale <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ba0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ba1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk1Io0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk1Io1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk1Io2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk1Io3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk1Ncs <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk2Io0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk2Io1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk2Io2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk2Io3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk2Ncs <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bkin <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch1n <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch2n <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch3n <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ck <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ckin <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Cle <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Clk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Cmd <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Col <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Crs <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: CrsDv <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Cts <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D10 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D11 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D12 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D13 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D14 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D15 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D16 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D17 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D18 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D19 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D20 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D21 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D22 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D23 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D24 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D25 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D26 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D27 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D28 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D29 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D30 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D31 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D8 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D9 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da10 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da11 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da12 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da13 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da14 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da15 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da8 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da9 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: De <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Dm <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Dp <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Etr <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: ExtSd <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: FsA <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: FsB <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Hsync <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Id <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In10 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In11 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In12 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In13 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In14 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In15 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In8 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In9 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Int <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Jtck <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Jtdi <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Jtdo <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Jtms <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Jtrst <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Mck <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: MclkA <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: MclkB <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Mco1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Mco2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Mdc <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Mdio <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Miso <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Mosi <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nbl0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nbl1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nbl2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nbl3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nce <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ne1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ne2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ne3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ne4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nl <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Noe <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nss <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nwait <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nwe <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Osc32In <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Osc32Out <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: OscIn <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: OscOut <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Out1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Out2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Pixclk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: PpsOut <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: RefClk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Refin <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Rts <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Rx <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: RxClk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: RxDv <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: RxEr <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Rxd0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Rxd1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Rxd2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Rxd3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sck <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: SckA <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: SckB <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Scl <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sd <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: SdA <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: SdB <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sda <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdcke0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdcke1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdclk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdncas <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdne0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdne1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdnras <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdnwe <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Smba <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sof <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Swclk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Swdio <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Swo <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Te <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Traceclk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Traced0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Traced1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Traced2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Traced3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Tx <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: TxClk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: TxEn <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Txd0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Txd1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Txd2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Txd3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiCk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiDir <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiNxt <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiStp <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Vbus <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Vsync <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Wkup <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ws <   Peripheral   _   > ;  // Function  static   uint32_t   modm :: platform :: getUniqueId ( uint8_t   offset );  void   _delay_ms ( uint32_t   ms );  void   _delay_ns ( uint32_t   ns );  void   _delay_us ( uint32_t   us );  // Enum  enum   ErrorCode ;  enum   class   Peripheral ;  enum   class   StartupError ;  // Variable  uint16_t   modm_fastdata   modm :: clock :: fcpu_MHz   ;  uint16_t   modm_fastdata   modm :: clock :: ns_per_loop   ;  uint32_t   modm_fastdata   modm :: clock :: fcpu   ;  uint32_t   modm_fastdata   modm :: clock :: fcpu_kHz   ;  // Typedef  typedef   void ( *   modm :: cortex :: InterruptHandler )   ( void ))( void );  // Define  #define EXTERN_FLASH_STORAGE(var)  #define EXTERN_FLASH_STORAGE_STRING(s)  #define FLASH_STORAGE(var)  #define FLASH_STORAGE_STRING(s)  #define INLINE_FLASH_STORAGE_STRING(s)  #define PSTR(s)  #define USART_BRR_DIV_FRACTION  #define USART_BRR_DIV_MANTISSA",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform/#dependencies",
            "text": "modm:platform     modm_platform   modm:  platform     modm_platform_1-wire_bitbang    modm:  platform:  1-wire.bitbang       modm_platform_1-wire_bitbang->modm_platform       modm_platform_adc    modm:  platform:  adc       modm_platform_adc->modm_platform       modm_platform_can    modm:  platform:  can       modm_platform_can->modm_platform       modm_platform_can_common    modm:  platform:  can.common       modm_platform_can_common->modm_platform       modm_platform_clock    modm:  platform:  clock       modm_platform_clock->modm_platform       modm_platform_clock_cortex    modm:  platform:  clock.cortex       modm_platform_clock_cortex->modm_platform       modm_platform_core    modm:  platform:  core       modm_platform_core->modm_platform       modm_platform_dma    modm:  platform:  dma       modm_platform_dma->modm_platform       modm_platform_fault_cortex    modm:  platform:  fault.cortex       modm_platform_fault_cortex->modm_platform       modm_platform_gpio    modm:  platform:  gpio       modm_platform_gpio->modm_platform       modm_platform_gpio_common    modm:  platform:  gpio.common       modm_platform_gpio_common->modm_platform       modm_platform_i2c    modm:  platform:  i2c       modm_platform_i2c->modm_platform       modm_platform_i2c_bitbang    modm:  platform:  i2c.bitbang       modm_platform_i2c_bitbang->modm_platform       modm_platform_id    modm:  platform:  id       modm_platform_id->modm_platform       modm_platform_random    modm:  platform:  random       modm_platform_random->modm_platform       modm_platform_spi    modm:  platform:  spi       modm_platform_spi->modm_platform       modm_platform_spi_bitbang    modm:  platform:  spi.bitbang       modm_platform_spi_bitbang->modm_platform       modm_platform_timer    modm:  platform:  timer       modm_platform_timer->modm_platform       modm_platform_uart    modm:  platform:  uart       modm_platform_uart->modm_platform       modm_platform_uart_spi    modm:  platform:  uart.spi       modm_platform_uart_spi->modm_platform",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-1-wire-bitbang/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:1-wire.bitbang\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nBitBangOneWireMaster\n<\n \ntypename\n \nPin\n  \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:1-wire.bitbang\n\n\n\n\n\n\n\n\nmodm_platform_1-wire_bitbang\n\n\n\n\nmodm:\n\n\nplatform:\n\n\n1-wire.bitbang\n\n\n\n\n\n\n\n\nmodm_architecture_1-wire\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\n1-wire\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_1-wire_bitbang->modm_architecture_1-wire\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_1-wire_bitbang->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_1-wire_bitbang->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_1-wire_bitbang->modm_platform_gpio",
            "title": "modm:platform:1-wire.bitbang"
        },
        {
            "location": "/reference/module/modm-platform-1-wire-bitbang/#modmplatform1-wirebitbang",
            "text": "",
            "title": "modm:platform:1-wire.bitbang"
        },
        {
            "location": "/reference/module/modm-platform-1-wire-bitbang/#content",
            "text": "// Class  class   modm :: platform :: BitBangOneWireMaster <   typename   Pin    > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-1-wire-bitbang/#dependencies",
            "text": "modm:platform:1-wire.bitbang     modm_platform_1-wire_bitbang   modm:  platform:  1-wire.bitbang     modm_architecture_1-wire    modm:  architecture:  1-wire       modm_platform_1-wire_bitbang->modm_architecture_1-wire       modm_architecture_delay    modm:  architecture:  delay       modm_platform_1-wire_bitbang->modm_architecture_delay       modm_platform    modm:  platform       modm_platform_1-wire_bitbang->modm_platform       modm_platform_gpio    modm:  platform:  gpio       modm_platform_1-wire_bitbang->modm_platform_gpio",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-adc/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:adc\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdc1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdc2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdc3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdcInterrupt1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdcInterrupt2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdcInterrupt3\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:adc\n\n\n\n\n\n\n\n\nmodm_platform_adc\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc\n\n\n\n\n\n\n\n\nmodm_architecture_adc\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nadc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc->modm_architecture_adc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc_1\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc:\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc_1->modm_platform_adc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc_2\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc:\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc_2->modm_platform_adc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc_3\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc:\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc_3->modm_platform_adc",
            "title": "modm:platform:adc"
        },
        {
            "location": "/reference/module/modm-platform-adc/#modmplatformadc",
            "text": "",
            "title": "modm:platform:adc"
        },
        {
            "location": "/reference/module/modm-platform-adc/#content",
            "text": "// Class  class   modm :: platform :: Adc1 ;  class   modm :: platform :: Adc2 ;  class   modm :: platform :: Adc3 ;  class   modm :: platform :: AdcInterrupt1 ;  class   modm :: platform :: AdcInterrupt2 ;  class   modm :: platform :: AdcInterrupt3 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-adc/#dependencies",
            "text": "modm:platform:adc     modm_platform_adc   modm:  platform:  adc     modm_architecture_adc    modm:  architecture:  adc       modm_platform_adc->modm_architecture_adc       modm_architecture_register    modm:  architecture:  register       modm_platform_adc->modm_architecture_register       modm_cmsis_device    modm:  cmsis:  device       modm_platform_adc->modm_cmsis_device       modm_platform    modm:  platform       modm_platform_adc->modm_platform       modm_platform_gpio    modm:  platform:  gpio       modm_platform_adc->modm_platform_gpio       modm_utils    modm:  utils       modm_platform_adc->modm_utils       modm_platform_adc_1    modm:  platform:  adc:  1       modm_platform_adc_1->modm_platform_adc       modm_platform_adc_2    modm:  platform:  adc:  2       modm_platform_adc_2->modm_platform_adc       modm_platform_adc_3    modm:  platform:  adc:  3       modm_platform_adc_3->modm_platform_adc",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-adc-1/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:adc:1: ADC 1 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdc1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdcInterrupt1\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:adc:1\n\n\n\n\n\n\n\n\nmodm_platform_adc_1\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc:\n\n\n1\n\n\n\n\n\n\n\n\nmodm_platform_adc\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc_1->modm_platform_adc",
            "title": "modm:platform:adc:1"
        },
        {
            "location": "/reference/module/modm-platform-adc-1/#modmplatformadc1-adc-1-instance",
            "text": "",
            "title": "modm:platform:adc:1: ADC 1 instance"
        },
        {
            "location": "/reference/module/modm-platform-adc-1/#content",
            "text": "// Class  class   modm :: platform :: Adc1 ;  class   modm :: platform :: AdcInterrupt1 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-adc-1/#dependencies",
            "text": "modm:platform:adc:1     modm_platform_adc_1   modm:  platform:  adc:  1     modm_platform_adc    modm:  platform:  adc       modm_platform_adc_1->modm_platform_adc",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-adc-2/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:adc:2: ADC 2 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdc2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdcInterrupt2\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:adc:2\n\n\n\n\n\n\n\n\nmodm_platform_adc_2\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc:\n\n\n2\n\n\n\n\n\n\n\n\nmodm_platform_adc\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc_2->modm_platform_adc",
            "title": "modm:platform:adc:2"
        },
        {
            "location": "/reference/module/modm-platform-adc-2/#modmplatformadc2-adc-2-instance",
            "text": "",
            "title": "modm:platform:adc:2: ADC 2 instance"
        },
        {
            "location": "/reference/module/modm-platform-adc-2/#content",
            "text": "// Class  class   modm :: platform :: Adc2 ;  class   modm :: platform :: AdcInterrupt2 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-adc-2/#dependencies",
            "text": "modm:platform:adc:2     modm_platform_adc_2   modm:  platform:  adc:  2     modm_platform_adc    modm:  platform:  adc       modm_platform_adc_2->modm_platform_adc",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-adc-3/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:adc:3: ADC 3 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdc3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdcInterrupt3\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:adc:3\n\n\n\n\n\n\n\n\nmodm_platform_adc_3\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc:\n\n\n3\n\n\n\n\n\n\n\n\nmodm_platform_adc\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc_3->modm_platform_adc",
            "title": "modm:platform:adc:3"
        },
        {
            "location": "/reference/module/modm-platform-adc-3/#modmplatformadc3-adc-3-instance",
            "text": "",
            "title": "modm:platform:adc:3: ADC 3 instance"
        },
        {
            "location": "/reference/module/modm-platform-adc-3/#content",
            "text": "// Class  class   modm :: platform :: Adc3 ;  class   modm :: platform :: AdcInterrupt3 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-adc-3/#dependencies",
            "text": "modm:platform:adc:3     modm_platform_adc_3   modm:  platform:  adc:  3     modm_platform_adc    modm:  platform:  adc       modm_platform_adc_3->modm_platform_adc",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-can/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:can\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nCanBitTiming\n<\n \nint32_t\n \nClk\n,\n \nint32_t\n \nBitrate\n \n>\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nCan1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nCan2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nCanFilter\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nCanBitTiming\n::\nCanBitTimingConfiguration\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nExtendedFilterMask\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nExtendedFilterMaskShort\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nExtendedIdentifier\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nExtendedIdentifierShort\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nIdentifier\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nIdentifierShort\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nStandardFilterMask\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nStandardFilterMaskShort\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nStandardIdentifier\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nCanFilter\n::\nStandardIdentifierShort\n;\n\n\n\n// Enum\n\n\nenum\n \nErrorCode\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:can\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\nmodm_architecture_assert\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nassert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_architecture_assert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\natomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_architecture_atomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_can\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_architecture_can\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_interrupt\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ninterrupt\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_architecture_interrupt\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_common\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan.common\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_platform_can_common\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_1\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan:\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_1->modm_platform_can\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_2\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan:\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_2->modm_platform_can",
            "title": "modm:platform:can"
        },
        {
            "location": "/reference/module/modm-platform-can/#modmplatformcan",
            "text": "",
            "title": "modm:platform:can"
        },
        {
            "location": "/reference/module/modm-platform-can/#content",
            "text": "// Class  class   modm :: CanBitTiming <   int32_t   Clk ,   int32_t   Bitrate   > ;  class   modm :: platform :: Can1 ;  class   modm :: platform :: Can2 ;  class   modm :: platform :: CanFilter ;  // Struct  struct   modm :: CanBitTiming :: CanBitTimingConfiguration ;  struct   modm :: platform :: CanFilter :: ExtendedFilterMask ;  struct   modm :: platform :: CanFilter :: ExtendedFilterMaskShort ;  struct   modm :: platform :: CanFilter :: ExtendedIdentifier ;  struct   modm :: platform :: CanFilter :: ExtendedIdentifierShort ;  struct   modm :: platform :: CanFilter :: Identifier ;  struct   modm :: platform :: CanFilter :: IdentifierShort ;  struct   modm :: platform :: CanFilter :: StandardFilterMask ;  struct   modm :: platform :: CanFilter :: StandardFilterMaskShort ;  struct   modm :: platform :: CanFilter :: StandardIdentifier ;  struct   modm :: platform :: CanFilter :: StandardIdentifierShort ;  // Enum  enum   ErrorCode ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-can/#dependencies",
            "text": "modm:platform:can     modm_platform_can   modm:  platform:  can     modm_architecture_assert    modm:  architecture:  assert       modm_platform_can->modm_architecture_assert       modm_architecture_atomic    modm:  architecture:  atomic       modm_platform_can->modm_architecture_atomic       modm_architecture_can    modm:  architecture:  can       modm_platform_can->modm_architecture_can       modm_architecture_clock    modm:  architecture:  clock       modm_platform_can->modm_architecture_clock       modm_architecture_delay    modm:  architecture:  delay       modm_platform_can->modm_architecture_delay       modm_architecture_interrupt    modm:  architecture:  interrupt       modm_platform_can->modm_architecture_interrupt       modm_cmsis_device    modm:  cmsis:  device       modm_platform_can->modm_cmsis_device       modm_debug    modm:  debug       modm_platform_can->modm_debug       modm_platform    modm:  platform       modm_platform_can->modm_platform       modm_platform_can_common    modm:  platform:  can.common       modm_platform_can->modm_platform_can_common       modm_platform_gpio    modm:  platform:  gpio       modm_platform_can->modm_platform_gpio       modm_utils    modm:  utils       modm_platform_can->modm_utils       modm_platform_can_1    modm:  platform:  can:  1       modm_platform_can_1->modm_platform_can       modm_platform_can_2    modm:  platform:  can:  2       modm_platform_can_2->modm_platform_can",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-can-common/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:can.common\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nCanBitTiming\n<\n \nint32_t\n \nClk\n,\n \nint32_t\n \nBitrate\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nCanBitTiming\n::\nCanBitTimingConfiguration\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:can.common\n\n\n\n\n\n\n\n\nmodm_platform_can_common\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan.common\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_common->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_common->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_platform_can_common\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform->modm_platform_can_common",
            "title": "modm:platform:can.common"
        },
        {
            "location": "/reference/module/modm-platform-can-common/#modmplatformcancommon",
            "text": "",
            "title": "modm:platform:can.common"
        },
        {
            "location": "/reference/module/modm-platform-can-common/#content",
            "text": "// Class  class   modm :: CanBitTiming <   int32_t   Clk ,   int32_t   Bitrate   > ;  // Struct  struct   modm :: CanBitTiming :: CanBitTimingConfiguration ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-can-common/#dependencies",
            "text": "modm:platform:can.common     modm_platform_can_common   modm:  platform:  can.common     modm_architecture_clock    modm:  architecture:  clock       modm_platform_can_common->modm_architecture_clock       modm_platform    modm:  platform       modm_platform_can_common->modm_platform       modm_platform_can    modm:  platform:  can       modm_platform_can->modm_platform_can_common       modm_test_platform    modm:  test:  platform       modm_test_platform->modm_platform_can_common",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-can-1/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:can:1: CAN 1 instance\n\u00b6\n\n\nOptions\n\u00b6\n\n\nbuffer.tx\n\u00b6\n\n\nDefault: \n32\n \u2208 \n{ 1 ... 65534 }\n\n\nbuffer.rx\n\u00b6\n\n\nDefault: \n32\n \u2208 \n{ 1 ... 65534 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nCan1\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:can:1\n\n\n\n\n\n\n\n\nmodm_platform_can_1\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan:\n\n\n1\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_1->modm_platform_can",
            "title": "modm:platform:can:1"
        },
        {
            "location": "/reference/module/modm-platform-can-1/#modmplatformcan1-can-1-instance",
            "text": "",
            "title": "modm:platform:can:1: CAN 1 instance"
        },
        {
            "location": "/reference/module/modm-platform-can-1/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-can-1/#buffertx",
            "text": "Default:  32  \u2208  { 1 ... 65534 }",
            "title": "buffer.tx"
        },
        {
            "location": "/reference/module/modm-platform-can-1/#bufferrx",
            "text": "Default:  32  \u2208  { 1 ... 65534 }",
            "title": "buffer.rx"
        },
        {
            "location": "/reference/module/modm-platform-can-1/#content",
            "text": "// Class  class   modm :: platform :: Can1 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-can-1/#dependencies",
            "text": "modm:platform:can:1     modm_platform_can_1   modm:  platform:  can:  1     modm_platform_can    modm:  platform:  can       modm_platform_can_1->modm_platform_can",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-can-2/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:can:2: CAN 2 instance\n\u00b6\n\n\nOptions\n\u00b6\n\n\nbuffer.tx\n\u00b6\n\n\nDefault: \n32\n \u2208 \n{ 1 ... 65534 }\n\n\nbuffer.rx\n\u00b6\n\n\nDefault: \n32\n \u2208 \n{ 1 ... 65534 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nCan2\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:can:2\n\n\n\n\n\n\n\n\nmodm_platform_can_2\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan:\n\n\n2\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_2->modm_platform_can",
            "title": "modm:platform:can:2"
        },
        {
            "location": "/reference/module/modm-platform-can-2/#modmplatformcan2-can-2-instance",
            "text": "",
            "title": "modm:platform:can:2: CAN 2 instance"
        },
        {
            "location": "/reference/module/modm-platform-can-2/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-can-2/#buffertx",
            "text": "Default:  32  \u2208  { 1 ... 65534 }",
            "title": "buffer.tx"
        },
        {
            "location": "/reference/module/modm-platform-can-2/#bufferrx",
            "text": "Default:  32  \u2208  { 1 ... 65534 }",
            "title": "buffer.rx"
        },
        {
            "location": "/reference/module/modm-platform-can-2/#content",
            "text": "// Class  class   modm :: platform :: Can2 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-can-2/#dependencies",
            "text": "modm:platform:can:2     modm_platform_can_2   modm:  platform:  can:  2     modm_platform_can    modm:  platform:  can       modm_platform_can_2->modm_platform_can",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-clock/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:clock\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\ncortex\n::\nSysTickTimer\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nClockControl\n;\n\n\n\n// Function\n\n\nvoid\n \n_delay_ms\n(\nuint32_t\n \nms\n);\n\n\nvoid\n \n_delay_ns\n(\nuint32_t\n \nns\n);\n\n\nvoid\n \n_delay_us\n(\nuint32_t\n \nus\n);\n\n\n\n// Enum\n\n\nenum\n \nclass\n \nStartupError\n;\n\n\n\n// Variable\n\n\nuint16_t\n \nmodm_fastdata\n \nmodm\n::\nclock\n::\nfcpu_MHz\n \n;\n\n\nuint16_t\n \nmodm_fastdata\n \nmodm\n::\nclock\n::\nns_per_loop\n \n;\n\n\nuint32_t\n \nmodm_fastdata\n \nmodm\n::\nclock\n::\nfcpu\n \n;\n\n\nuint32_t\n \nmodm_fastdata\n \nmodm\n::\nclock\n::\nfcpu_kHz\n \n;\n\n\n\n// Typedef\n\n\ntypedef\n \nvoid\n(\n*\n \nmodm\n::\ncortex\n::\nInterruptHandler\n)\n \n(\nvoid\n))(\nvoid\n);\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:clock\n\n\n\n\n\n\n\n\nmodm_platform_clock\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock.cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock->modm_platform_clock_cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni\n\n\n\n\n\n\nmodm:\n\n\nboard:\n\n\ndisco-f469ni\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_platform_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nfault.cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex->modm_platform_clock",
            "title": "modm:platform:clock"
        },
        {
            "location": "/reference/module/modm-platform-clock/#modmplatformclock",
            "text": "",
            "title": "modm:platform:clock"
        },
        {
            "location": "/reference/module/modm-platform-clock/#content",
            "text": "// Class  class   modm :: cortex :: SysTickTimer ;  class   modm :: platform :: ClockControl ;  // Function  void   _delay_ms ( uint32_t   ms );  void   _delay_ns ( uint32_t   ns );  void   _delay_us ( uint32_t   us );  // Enum  enum   class   StartupError ;  // Variable  uint16_t   modm_fastdata   modm :: clock :: fcpu_MHz   ;  uint16_t   modm_fastdata   modm :: clock :: ns_per_loop   ;  uint32_t   modm_fastdata   modm :: clock :: fcpu   ;  uint32_t   modm_fastdata   modm :: clock :: fcpu_kHz   ;  // Typedef  typedef   void ( *   modm :: cortex :: InterruptHandler )   ( void ))( void );",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-clock/#dependencies",
            "text": "modm:platform:clock     modm_platform_clock   modm:  platform:  clock     modm_cmsis_device    modm:  cmsis:  device       modm_platform_clock->modm_cmsis_device       modm_platform    modm:  platform       modm_platform_clock->modm_platform       modm_platform_clock_cortex    modm:  platform:  clock.cortex       modm_platform_clock->modm_platform_clock_cortex       modm_utils    modm:  utils       modm_platform_clock->modm_utils       modm_board_disco-f469ni    modm:  board:  disco-f469ni       modm_board_disco-f469ni->modm_platform_clock       modm_platform_fault_cortex    modm:  platform:  fault.cortex       modm_platform_fault_cortex->modm_platform_clock",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-clock-cortex/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:clock.cortex\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\ncortex\n::\nSysTickTimer\n;\n\n\n\n// Function\n\n\nvoid\n \n_delay_ms\n(\nuint32_t\n \nms\n);\n\n\nvoid\n \n_delay_ns\n(\nuint32_t\n \nns\n);\n\n\nvoid\n \n_delay_us\n(\nuint32_t\n \nus\n);\n\n\n\n// Enum\n\n\nenum\n \nclass\n \nStartupError\n;\n\n\n\n// Variable\n\n\nuint16_t\n \nmodm_fastdata\n \nmodm\n::\nclock\n::\nfcpu_MHz\n \n;\n\n\nuint16_t\n \nmodm_fastdata\n \nmodm\n::\nclock\n::\nns_per_loop\n \n;\n\n\nuint32_t\n \nmodm_fastdata\n \nmodm\n::\nclock\n::\nfcpu\n \n;\n\n\nuint32_t\n \nmodm_fastdata\n \nmodm\n::\nclock\n::\nfcpu_kHz\n \n;\n\n\n\n// Typedef\n\n\ntypedef\n \nvoid\n(\n*\n \nmodm\n::\ncortex\n::\nInterruptHandler\n)\n \n(\nvoid\n))(\nvoid\n);\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:clock.cortex\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock.cortex\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock->modm_platform_clock_cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_platform_clock_cortex",
            "title": "modm:platform:clock.cortex"
        },
        {
            "location": "/reference/module/modm-platform-clock-cortex/#modmplatformclockcortex",
            "text": "",
            "title": "modm:platform:clock.cortex"
        },
        {
            "location": "/reference/module/modm-platform-clock-cortex/#content",
            "text": "// Class  class   modm :: cortex :: SysTickTimer ;  // Function  void   _delay_ms ( uint32_t   ms );  void   _delay_ns ( uint32_t   ns );  void   _delay_us ( uint32_t   us );  // Enum  enum   class   StartupError ;  // Variable  uint16_t   modm_fastdata   modm :: clock :: fcpu_MHz   ;  uint16_t   modm_fastdata   modm :: clock :: ns_per_loop   ;  uint32_t   modm_fastdata   modm :: clock :: fcpu   ;  uint32_t   modm_fastdata   modm :: clock :: fcpu_kHz   ;  // Typedef  typedef   void ( *   modm :: cortex :: InterruptHandler )   ( void ))( void );",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-clock-cortex/#dependencies",
            "text": "modm:platform:clock.cortex     modm_platform_clock_cortex   modm:  platform:  clock.cortex     modm_architecture_clock    modm:  architecture:  clock       modm_platform_clock_cortex->modm_architecture_clock       modm_architecture_delay    modm:  architecture:  delay       modm_platform_clock_cortex->modm_architecture_delay       modm_cmsis_device    modm:  cmsis:  device       modm_platform_clock_cortex->modm_cmsis_device       modm_platform    modm:  platform       modm_platform_clock_cortex->modm_platform       modm_platform_clock    modm:  platform:  clock       modm_platform_clock->modm_platform_clock_cortex       modm_platform_core    modm:  platform:  core       modm_platform_core->modm_platform_clock_cortex",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-core/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:core\n\u00b6\n\n\nOptions\n\u00b6\n\n\nstack_execution_guard\n\u00b6\n\n\nFill the stack with relative jumps to fault handler to prevent accidental execution.: \nFalse\n \u2208 \n{ True, False }\n\n\nallocator\n\u00b6\n\n\nDynamic memory allocation strategy: \ntlsf\n \u2208 \n{ block, newlib, tlsf }\n\n\nBy default, the arm-none-eabi toolchain ships with the \nnewlib\n libc, which uses\n\ndlmalloc\n as the underlying allocator algorithm and only requires the\nimplementation of the \nvoid * sbrk(ptrdiff_t size)\n hook. However, this limits\nthe allocator to use just \none\n memory region, which must then also be of\n\ncontinuous\n extend, since \nsbrk\n can only grow and shrink, but not jump.\nTherefore, when using the \nnewlib\n strategy, only the largest memory region is\nused as heap! Depending on the device memory architecture this can leave large\nmemory regions unused.\n\n\nFor devices with very small memories, we recommend using the block allocator\nstrategy, which uses a very light-weight and simple algorithm. This also only\noperates on one continuous memory region as heap.\n\n\n\n\nNote\n\n\nMemories can have different traits, such as DMA-ability or access time. The\ndefault memory allocator functions (malloc, new, etc) only return DMA-able\nmemories, ordered by fastest access time. Similarly the search for the\nlargest memory region only considers DMA-able memory.\n\n\n\n\n\n\nWarning\n\n\nFor devices which contain separate memories laid out in a continuous way\n(often called SRAM1, SRAM2, etc.) the \nnewlib\n and \nblock\n strategies choose\nthe largest continuous memory region, \neven though\n unaligned accesses\nacross memory regions may not be supported in hardware and lead to a bus\nfault! Consider using the TLSF implementation, which does not suffer from\nthis issue.\n\n\n\n\nTo use all non-statically allocated memory for heap, use the TLSF strategy,\nwhich natively supports multiple memory regions. Our implementation treats\nall internal memories as separate regions, so unaligned accesses across memory\nboundaries are not an issue. To request heap memory of different traits, see\n\nmodm::MemoryTraits\n.\n\n\n\n\nNote\n\n\nThe TLSF implementation has a static overhead of about 1kB per memory trait\ngroup, however, these can then contain multiple non-continuous memory\nregions. The upside of this large static allocation is very fast allocation\ntimes of O(1), but we recommend using TLSF only for devices with multiple\nmemory regions.\n\n\n\n\nvector_table_location\n\u00b6\n\n\nVector table location in ROM or RAM: \nfastest\n \u2208 \n{ fastest, ram, rom }\n\n\nThe vector table is always stored in ROM and copied to RAM by the startup script\nif required. You can modify the RAM vector table using the CMSIS NVIC functions:\n\n\n\n\nvoid NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)\n\n\nuint32_t NVIC_GetVector(IRQn_Type IRQn)\n\n\n\n\nFor applications that do not modify the vector table at runtime, relocation to\nRAM is not necessary and can save a few hundred bytes of static memory.\n\n\nBy default, the fastest option is chosen depending on the target memory\narchitecture. This does not always mean the table is copied into RAM, and\ntherefore may not be modifiable with this option!\n\n\nFrom the ARM Cortex-M4 Technical Reference Manual on exception handling:\n\n\n\n\n\n\nProcessor state is automatically stored to the stack on an exception, and\n  automatically restored from the stack at the end of the Interrupt Service\n  Routine.\n\n\nThe vector is fetched in parallel to the state saving, enabling efficient\n  interrupt entry.\n\n\n\n\n\n\n\n\nWarning\n\n\nPlacing main stack and vector table into the same memory can significantly\nslow down interrupt latency, since both I-Code and D-Code memory interface\nneed to fetch from the same access port.\n\n\n\n\nmain_stack_size\n\u00b6\n\n\nMinimum size of the application main stack: \n3040\n \u2208 \n{ 256 ... 65536 }\n\n\nThe ARM Cortex-M uses a descending stack mechanism which is placed so that it\ngrows towards the beginning of RAM. In case of a stack overflow the hardware\nthen attempts to stack into invalid memory which triggers a HardFault. A stack\noverflow will therefore never overwrite any static or heap memory and this\nprotection works without the MPU and therefore also on ARM Cortex-M0 devices.\n\n\nIf you enable either the LED or the logging HardFault option, a smaller stack\nis added above the main stack. This stack is only used by the HardFault handler\nwhen not enough memory remains in the main stack to preserve GDB backtrace\nbehavior. This memory also acts as a small safety buffer against main stack\nunderflow, which is not detected however.\n\n\nIf the vector table is relocated into RAM, the start address needs to be aligned\nto the next highest power-of-two word depending on the total number of device\ninterrupts. On devices where the table is relocated into the same memory as the\nmain stack, an alignment buffer up to 1kB is added to the main stack.\n\n\n|              ...                |\n|---------------------------------|\n|    Interrupt Vectors (in RAM)   |\n|        (if re-mapped)           | <-- vector table origin\n|---------------------------------| <-- HardFault stack top\n|        HardFault Stack          |\n|       (grows downwards)         |\n|               |                 |\n|               v                 |\n|---------------------------------| <-- main stack top\n|           Main Stack            |\n|       (grows downwards)         |\n|               |                 |\n|               v                 |\n|---------------------------------|\n|  Alignment buffer for vectors   |\n|   (overwritten by main stack!)  |\n'---------------------------------' <-- RAM origin\n\n\n\n\n\n\nWarning\n\n\nThe main stack size you provide is a minimum and may be enlarged to satisfy\nalignment requirements. Be aware that these requirements operate on the sum\nof HardFault and main stack. Disabling HardFault options may therefore\ndecrease the alignment buffer added to the main stack size, which may make\nyour application overflow stack. You need to increase your minimum main\nstack size in that case.\n\n\n\n\n\n\nNote\n\n\nThe main stack is watermarked and you can get the maximum stack usage using\nthe \nuint32_t modm::cortex::getMaximumStackUsage()\n function.\n\n\n\n\nlinkerscript.memory\n\u00b6\n\n\nDefault: \nSDRAM (rwx) : ORIGIN = 0xC0000000, LENGTH = 16M\n \u2208 \n{ String }\n\n\nlinkerscript.sections\n\u00b6\n\n\nDefault: `\n        .sdramdata :\n        {\n            __sdramdata_load = LOADADDR (.sdramdata);   /* address in FLASH \n/\n            __sdramdata_start = .;                      /\n address in RAM */\n\n\n        KEEP(*(.sdramdata))\n\n        . = ALIGN(4);\n        __sdramdata_end = .;\n    } >SDRAM AT >FLASH\n\n    .heap_extern (NOLOAD) : ALIGN(4)\n    {\n        __heap_extern_start = .;\n        . = ORIGIN(SDRAM) + LENGTH(SDRAM);\n        __heap_extern_end = .;\n    } >SDRAM\n` \u2208 `{ String }`\n\n\n\n\n\nlinkerscript.table_extern.zero\n\u00b6\n\n\nValues: \n{ String }\n\n\nlinkerscript.table_extern.copy\n\u00b6\n\n\nDefault: \nLONG (__sdramdata_load)\n        LONG (__sdramdata_start)\n        LONG (__sdramdata_end)\n \u2208 \n{ String }\n\n\nlinkerscript.table_extern.heap\n\u00b6\n\n\nDefault: \nLONG (0x801f)\n        LONG (__heap_extern_start)\n        LONG (__heap_extern_end)\n \u2208 \n{ String }\n\n\nContent\n\u00b6\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nFlashReader\n<\n \ntypename\n \nT\n \n,\n \nstd\n::\nsize_t\n \nsize\n \n>\n;\n\n\n\n// Define\n\n\n#define EXTERN_FLASH_STORAGE(var)\n\n\n#define EXTERN_FLASH_STORAGE_STRING(s)\n\n\n#define FLASH_STORAGE(var)\n\n\n#define FLASH_STORAGE_STRING(s)\n\n\n#define INLINE_FLASH_STORAGE_STRING(s)\n\n\n#define PSTR(s)\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:core\n\n\n\n\n\n\n\n\nmodm_platform_core\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncore\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_assert\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nassert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_assert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\natomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_atomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_heap\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nheap\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_heap\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_interrupt\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ninterrupt\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_interrupt\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_memory\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nmemory\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_memory\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_unaligned\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nunaligned\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_architecture_unaligned\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock_cortex\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock.cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_core->modm_platform_clock_cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni\n\n\n\n\n\n\nmodm:\n\n\nboard:\n\n\ndisco-f469ni\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_platform_core",
            "title": "modm:platform:core"
        },
        {
            "location": "/reference/module/modm-platform-core/#modmplatformcore",
            "text": "",
            "title": "modm:platform:core"
        },
        {
            "location": "/reference/module/modm-platform-core/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-core/#stack_execution_guard",
            "text": "Fill the stack with relative jumps to fault handler to prevent accidental execution.:  False  \u2208  { True, False }",
            "title": "stack_execution_guard"
        },
        {
            "location": "/reference/module/modm-platform-core/#allocator",
            "text": "Dynamic memory allocation strategy:  tlsf  \u2208  { block, newlib, tlsf }  By default, the arm-none-eabi toolchain ships with the  newlib  libc, which uses dlmalloc  as the underlying allocator algorithm and only requires the\nimplementation of the  void * sbrk(ptrdiff_t size)  hook. However, this limits\nthe allocator to use just  one  memory region, which must then also be of continuous  extend, since  sbrk  can only grow and shrink, but not jump.\nTherefore, when using the  newlib  strategy, only the largest memory region is\nused as heap! Depending on the device memory architecture this can leave large\nmemory regions unused.  For devices with very small memories, we recommend using the block allocator\nstrategy, which uses a very light-weight and simple algorithm. This also only\noperates on one continuous memory region as heap.   Note  Memories can have different traits, such as DMA-ability or access time. The\ndefault memory allocator functions (malloc, new, etc) only return DMA-able\nmemories, ordered by fastest access time. Similarly the search for the\nlargest memory region only considers DMA-able memory.    Warning  For devices which contain separate memories laid out in a continuous way\n(often called SRAM1, SRAM2, etc.) the  newlib  and  block  strategies choose\nthe largest continuous memory region,  even though  unaligned accesses\nacross memory regions may not be supported in hardware and lead to a bus\nfault! Consider using the TLSF implementation, which does not suffer from\nthis issue.   To use all non-statically allocated memory for heap, use the TLSF strategy,\nwhich natively supports multiple memory regions. Our implementation treats\nall internal memories as separate regions, so unaligned accesses across memory\nboundaries are not an issue. To request heap memory of different traits, see modm::MemoryTraits .   Note  The TLSF implementation has a static overhead of about 1kB per memory trait\ngroup, however, these can then contain multiple non-continuous memory\nregions. The upside of this large static allocation is very fast allocation\ntimes of O(1), but we recommend using TLSF only for devices with multiple\nmemory regions.",
            "title": "allocator"
        },
        {
            "location": "/reference/module/modm-platform-core/#vector_table_location",
            "text": "Vector table location in ROM or RAM:  fastest  \u2208  { fastest, ram, rom }  The vector table is always stored in ROM and copied to RAM by the startup script\nif required. You can modify the RAM vector table using the CMSIS NVIC functions:   void NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)  uint32_t NVIC_GetVector(IRQn_Type IRQn)   For applications that do not modify the vector table at runtime, relocation to\nRAM is not necessary and can save a few hundred bytes of static memory.  By default, the fastest option is chosen depending on the target memory\narchitecture. This does not always mean the table is copied into RAM, and\ntherefore may not be modifiable with this option!  From the ARM Cortex-M4 Technical Reference Manual on exception handling:    Processor state is automatically stored to the stack on an exception, and\n  automatically restored from the stack at the end of the Interrupt Service\n  Routine.  The vector is fetched in parallel to the state saving, enabling efficient\n  interrupt entry.     Warning  Placing main stack and vector table into the same memory can significantly\nslow down interrupt latency, since both I-Code and D-Code memory interface\nneed to fetch from the same access port.",
            "title": "vector_table_location"
        },
        {
            "location": "/reference/module/modm-platform-core/#main_stack_size",
            "text": "Minimum size of the application main stack:  3040  \u2208  { 256 ... 65536 }  The ARM Cortex-M uses a descending stack mechanism which is placed so that it\ngrows towards the beginning of RAM. In case of a stack overflow the hardware\nthen attempts to stack into invalid memory which triggers a HardFault. A stack\noverflow will therefore never overwrite any static or heap memory and this\nprotection works without the MPU and therefore also on ARM Cortex-M0 devices.  If you enable either the LED or the logging HardFault option, a smaller stack\nis added above the main stack. This stack is only used by the HardFault handler\nwhen not enough memory remains in the main stack to preserve GDB backtrace\nbehavior. This memory also acts as a small safety buffer against main stack\nunderflow, which is not detected however.  If the vector table is relocated into RAM, the start address needs to be aligned\nto the next highest power-of-two word depending on the total number of device\ninterrupts. On devices where the table is relocated into the same memory as the\nmain stack, an alignment buffer up to 1kB is added to the main stack.  |              ...                |\n|---------------------------------|\n|    Interrupt Vectors (in RAM)   |\n|        (if re-mapped)           | <-- vector table origin\n|---------------------------------| <-- HardFault stack top\n|        HardFault Stack          |\n|       (grows downwards)         |\n|               |                 |\n|               v                 |\n|---------------------------------| <-- main stack top\n|           Main Stack            |\n|       (grows downwards)         |\n|               |                 |\n|               v                 |\n|---------------------------------|\n|  Alignment buffer for vectors   |\n|   (overwritten by main stack!)  |\n'---------------------------------' <-- RAM origin   Warning  The main stack size you provide is a minimum and may be enlarged to satisfy\nalignment requirements. Be aware that these requirements operate on the sum\nof HardFault and main stack. Disabling HardFault options may therefore\ndecrease the alignment buffer added to the main stack size, which may make\nyour application overflow stack. You need to increase your minimum main\nstack size in that case.    Note  The main stack is watermarked and you can get the maximum stack usage using\nthe  uint32_t modm::cortex::getMaximumStackUsage()  function.",
            "title": "main_stack_size"
        },
        {
            "location": "/reference/module/modm-platform-core/#linkerscriptmemory",
            "text": "Default:  SDRAM (rwx) : ORIGIN = 0xC0000000, LENGTH = 16M  \u2208  { String }",
            "title": "linkerscript.memory"
        },
        {
            "location": "/reference/module/modm-platform-core/#linkerscriptsections",
            "text": "Default: `\n        .sdramdata :\n        {\n            __sdramdata_load = LOADADDR (.sdramdata);   /* address in FLASH  /\n            __sdramdata_start = .;                      /  address in RAM */          KEEP(*(.sdramdata))\n\n        . = ALIGN(4);\n        __sdramdata_end = .;\n    } >SDRAM AT >FLASH\n\n    .heap_extern (NOLOAD) : ALIGN(4)\n    {\n        __heap_extern_start = .;\n        . = ORIGIN(SDRAM) + LENGTH(SDRAM);\n        __heap_extern_end = .;\n    } >SDRAM\n` \u2208 `{ String }`",
            "title": "linkerscript.sections"
        },
        {
            "location": "/reference/module/modm-platform-core/#linkerscripttable_externzero",
            "text": "Values:  { String }",
            "title": "linkerscript.table_extern.zero"
        },
        {
            "location": "/reference/module/modm-platform-core/#linkerscripttable_externcopy",
            "text": "Default:  LONG (__sdramdata_load)\n        LONG (__sdramdata_start)\n        LONG (__sdramdata_end)  \u2208  { String }",
            "title": "linkerscript.table_extern.copy"
        },
        {
            "location": "/reference/module/modm-platform-core/#linkerscripttable_externheap",
            "text": "Default:  LONG (0x801f)\n        LONG (__heap_extern_start)\n        LONG (__heap_extern_end)  \u2208  { String }",
            "title": "linkerscript.table_extern.heap"
        },
        {
            "location": "/reference/module/modm-platform-core/#content",
            "text": "// Struct  struct   modm :: FlashReader <   typename   T   ,   std :: size_t   size   > ;  // Define  #define EXTERN_FLASH_STORAGE(var)  #define EXTERN_FLASH_STORAGE_STRING(s)  #define FLASH_STORAGE(var)  #define FLASH_STORAGE_STRING(s)  #define INLINE_FLASH_STORAGE_STRING(s)  #define PSTR(s)",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-core/#dependencies",
            "text": "modm:platform:core     modm_platform_core   modm:  platform:  core     modm_architecture_accessor    modm:  architecture:  accessor       modm_platform_core->modm_architecture_accessor       modm_architecture_assert    modm:  architecture:  assert       modm_platform_core->modm_architecture_assert       modm_architecture_atomic    modm:  architecture:  atomic       modm_platform_core->modm_architecture_atomic       modm_architecture_clock    modm:  architecture:  clock       modm_platform_core->modm_architecture_clock       modm_architecture_delay    modm:  architecture:  delay       modm_platform_core->modm_architecture_delay       modm_architecture_heap    modm:  architecture:  heap       modm_platform_core->modm_architecture_heap       modm_architecture_interrupt    modm:  architecture:  interrupt       modm_platform_core->modm_architecture_interrupt       modm_architecture_memory    modm:  architecture:  memory       modm_platform_core->modm_architecture_memory       modm_architecture_unaligned    modm:  architecture:  unaligned       modm_platform_core->modm_architecture_unaligned       modm_cmsis_device    modm:  cmsis:  device       modm_platform_core->modm_cmsis_device       modm_platform    modm:  platform       modm_platform_core->modm_platform       modm_platform_clock_cortex    modm:  platform:  clock.cortex       modm_platform_core->modm_platform_clock_cortex       modm_board_disco-f469ni    modm:  board:  disco-f469ni       modm_board_disco-f469ni->modm_platform_core",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-dma/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:dma\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDmaBase\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:dma\n\n\n\n\n\n\n\n\nmodm_platform_dma\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ndma\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_dma->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_dma->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_dma_1\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ndma:\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_dma_1->modm_platform_dma\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_dma_2\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ndma:\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_dma_2->modm_platform_dma",
            "title": "modm:platform:dma"
        },
        {
            "location": "/reference/module/modm-platform-dma/#modmplatformdma",
            "text": "",
            "title": "modm:platform:dma"
        },
        {
            "location": "/reference/module/modm-platform-dma/#content",
            "text": "// Class  class   modm :: platform :: Dma1 :: Stream0 ;  class   modm :: platform :: Dma1 :: Stream1 ;  class   modm :: platform :: Dma1 :: Stream2 ;  class   modm :: platform :: Dma1 :: Stream3 ;  class   modm :: platform :: Dma1 :: Stream4 ;  class   modm :: platform :: Dma1 :: Stream5 ;  class   modm :: platform :: Dma1 :: Stream6 ;  class   modm :: platform :: Dma1 :: Stream7 ;  class   modm :: platform :: Dma1 ;  class   modm :: platform :: Dma2 :: Stream0 ;  class   modm :: platform :: Dma2 :: Stream1 ;  class   modm :: platform :: Dma2 :: Stream2 ;  class   modm :: platform :: Dma2 :: Stream3 ;  class   modm :: platform :: Dma2 :: Stream4 ;  class   modm :: platform :: Dma2 :: Stream5 ;  class   modm :: platform :: Dma2 :: Stream6 ;  class   modm :: platform :: Dma2 :: Stream7 ;  class   modm :: platform :: Dma2 ;  class   modm :: platform :: DmaBase ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-dma/#dependencies",
            "text": "modm:platform:dma     modm_platform_dma   modm:  platform:  dma     modm_cmsis_device    modm:  cmsis:  device       modm_platform_dma->modm_cmsis_device       modm_platform    modm:  platform       modm_platform_dma->modm_platform       modm_platform_dma_1    modm:  platform:  dma:  1       modm_platform_dma_1->modm_platform_dma       modm_platform_dma_2    modm:  platform:  dma:  2       modm_platform_dma_2->modm_platform_dma",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-dma-1/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:dma:1: DMA 1 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n::\nStream7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma1\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:dma:1\n\n\n\n\n\n\n\n\nmodm_platform_dma_1\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ndma:\n\n\n1\n\n\n\n\n\n\n\n\nmodm_platform_dma\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ndma\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_dma_1->modm_platform_dma",
            "title": "modm:platform:dma:1"
        },
        {
            "location": "/reference/module/modm-platform-dma-1/#modmplatformdma1-dma-1-instance",
            "text": "",
            "title": "modm:platform:dma:1: DMA 1 instance"
        },
        {
            "location": "/reference/module/modm-platform-dma-1/#content",
            "text": "// Class  class   modm :: platform :: Dma1 :: Stream0 ;  class   modm :: platform :: Dma1 :: Stream1 ;  class   modm :: platform :: Dma1 :: Stream2 ;  class   modm :: platform :: Dma1 :: Stream3 ;  class   modm :: platform :: Dma1 :: Stream4 ;  class   modm :: platform :: Dma1 :: Stream5 ;  class   modm :: platform :: Dma1 :: Stream6 ;  class   modm :: platform :: Dma1 :: Stream7 ;  class   modm :: platform :: Dma1 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-dma-1/#dependencies",
            "text": "modm:platform:dma:1     modm_platform_dma_1   modm:  platform:  dma:  1     modm_platform_dma    modm:  platform:  dma       modm_platform_dma_1->modm_platform_dma",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-dma-2/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:dma:2: DMA 2 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n::\nStream7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nDma2\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:dma:2\n\n\n\n\n\n\n\n\nmodm_platform_dma_2\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ndma:\n\n\n2\n\n\n\n\n\n\n\n\nmodm_platform_dma\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ndma\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_dma_2->modm_platform_dma",
            "title": "modm:platform:dma:2"
        },
        {
            "location": "/reference/module/modm-platform-dma-2/#modmplatformdma2-dma-2-instance",
            "text": "",
            "title": "modm:platform:dma:2: DMA 2 instance"
        },
        {
            "location": "/reference/module/modm-platform-dma-2/#content",
            "text": "// Class  class   modm :: platform :: Dma2 :: Stream0 ;  class   modm :: platform :: Dma2 :: Stream1 ;  class   modm :: platform :: Dma2 :: Stream2 ;  class   modm :: platform :: Dma2 :: Stream3 ;  class   modm :: platform :: Dma2 :: Stream4 ;  class   modm :: platform :: Dma2 :: Stream5 ;  class   modm :: platform :: Dma2 :: Stream6 ;  class   modm :: platform :: Dma2 :: Stream7 ;  class   modm :: platform :: Dma2 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-dma-2/#dependencies",
            "text": "modm:platform:dma:2     modm_platform_dma_2   modm:  platform:  dma:  2     modm_platform_dma    modm:  platform:  dma       modm_platform_dma_2->modm_platform_dma",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-fault-cortex/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:fault.cortex\n\u00b6\n\n\nOptions\n\u00b6\n\n\nled\n\u00b6\n\n\nToggle an LED on the specified pin: \ndisabled\n \u2208 \n{ A0, A1, A10, A11, A12, A13, A14, A15, A2, A3, A4, A5, A6, A7, A8, A9, B0, B1, B10, B11, B12, B13, B14, B15, B2, B3, B4, B5, B6, B7, B8, B9, C0, C1, C10, C11, C12, C13, C14, C15, C2, C3, C4, C5, C6, C7, C8, C9, D0, D1, D10, D11, D12, D13, D14, D15, D2, D3, D4, D5, D6, D7, D8, D9, E0, E1, E10, E11, E12, E13, E14, E15, E2, E3, E4, E5, E6, E7, E8, E9, F0, F1, F10, F11, F12, F13, F14, F15, F2, F3, F4, F5, F6, F7, F8, F9, G0, G1, G10, G11, G12, G13, G14, G15, G2, G3, G4, G5, G6, G7, G8, G9, H0, H1, H10, H11, H12, H13, H14, H15, H2, H3, H4, H5, H6, H7, H8, H9, I0, I1, I10, I11, I12, I13, I14, I15, I2, I3, I4, I5, I6, I7, I8, I9, J0, J1, J12, J13, J14, J15, J2, J3, J4, J5, K3, K4, K5, K6, K7, disabled }\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:fault.cortex\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nfault.cortex\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex->modm_platform_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex->modm_platform_gpio",
            "title": "modm:platform:fault.cortex"
        },
        {
            "location": "/reference/module/modm-platform-fault-cortex/#modmplatformfaultcortex",
            "text": "",
            "title": "modm:platform:fault.cortex"
        },
        {
            "location": "/reference/module/modm-platform-fault-cortex/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-fault-cortex/#led",
            "text": "Toggle an LED on the specified pin:  disabled  \u2208  { A0, A1, A10, A11, A12, A13, A14, A15, A2, A3, A4, A5, A6, A7, A8, A9, B0, B1, B10, B11, B12, B13, B14, B15, B2, B3, B4, B5, B6, B7, B8, B9, C0, C1, C10, C11, C12, C13, C14, C15, C2, C3, C4, C5, C6, C7, C8, C9, D0, D1, D10, D11, D12, D13, D14, D15, D2, D3, D4, D5, D6, D7, D8, D9, E0, E1, E10, E11, E12, E13, E14, E15, E2, E3, E4, E5, E6, E7, E8, E9, F0, F1, F10, F11, F12, F13, F14, F15, F2, F3, F4, F5, F6, F7, F8, F9, G0, G1, G10, G11, G12, G13, G14, G15, G2, G3, G4, G5, G6, G7, G8, G9, H0, H1, H10, H11, H12, H13, H14, H15, H2, H3, H4, H5, H6, H7, H8, H9, I0, I1, I10, I11, I12, I13, I14, I15, I2, I3, I4, I5, I6, I7, I8, I9, J0, J1, J12, J13, J14, J15, J2, J3, J4, J5, K3, K4, K5, K6, K7, disabled }",
            "title": "led"
        },
        {
            "location": "/reference/module/modm-platform-fault-cortex/#dependencies",
            "text": "modm:platform:fault.cortex     modm_platform_fault_cortex   modm:  platform:  fault.cortex     modm_architecture_clock    modm:  architecture:  clock       modm_platform_fault_cortex->modm_architecture_clock       modm_cmsis_device    modm:  cmsis:  device       modm_platform_fault_cortex->modm_cmsis_device       modm_platform    modm:  platform       modm_platform_fault_cortex->modm_platform       modm_platform_clock    modm:  platform:  clock       modm_platform_fault_cortex->modm_platform_clock       modm_platform_gpio    modm:  platform:  gpio       modm_platform_fault_cortex->modm_platform_gpio",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-gpio/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:gpio\n\u00b6\n\n\nOptions\n\u00b6\n\n\nenable_ports\n\u00b6\n\n\nEnable clock for these GPIO ports during startup: \n['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']\n \u2208 \n{ A, B, C, D, E, F, G, H, I, J, K }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioA9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioB9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioC9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioD9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioE9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioF9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioG9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioH9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioI9\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioInverted\n<\n \nclass\n \nPin\n  \n>\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ0\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ15\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioJ5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioK3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioK4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioK5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioK6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioK7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioPort\n<\n \nclass\n \nStartGpio\n \n,\n \nint8_t\n \nWidth\n \n>\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioSet\n<\n \nclass\n...\n \nGpios\n \n>\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioUnused\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSoftwareGpioPort\n<\n \nclass\n...\n \nGpios\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpio\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioConnector\n<\n \nPeripheral\n \nperipheral\n,\n \ntemplate\n<\n \nPeripheral\n \n_\n \n>\n \nclass\n...\n \nSignals\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n \nport\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nA\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nA\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nB\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nB\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nC\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nC\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nD\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nD\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nE\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nE\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nF\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nF\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nG\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nG\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nH\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nH\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nI\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nI\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nJ\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nJ\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nK\n \n>::\ncheck\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioPortInfo\n<\n \nGpio\n::\nPort\n::\nK\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n1\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n10\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n11\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n12\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n13\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n14\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n15\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n16\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n2\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n3\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n4\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n5\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n6\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n7\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n8\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n-\n9\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n0\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n1\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n10\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n11\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n12\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n13\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n14\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n15\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n16\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n2\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n3\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n4\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n5\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n6\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n7\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n8\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nStartGpio\n,\n \n9\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioSetShim\n<\n \nclass\n \nStartGpio\n \n,\n \nint8_t\n \nWidth\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioShim\n<\n \nclass\n \nStartGpio\n \n,\n \nint8_t\n \noffset\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA10\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA11\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA12\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA13\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA14\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA15\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA16\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA17\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA18\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA19\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA20\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA21\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA22\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA23\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA24\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA25\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA8\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nA9\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nAf1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nAf2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nAle\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nB7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBa0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBa1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk1Io0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk1Io1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk1Io2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk1Io3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk1Ncs\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk2Io0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk2Io1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk2Io2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk2Io3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBk2Ncs\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nBkin\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh1n\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh2n\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh3n\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCh4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCkin\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCle\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nClk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCmd\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCol\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCrs\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCrsDv\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nCts\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD10\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD11\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD12\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD13\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD14\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD15\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD16\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD17\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD18\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD19\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD20\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD21\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD22\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD23\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD24\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD25\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD26\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD27\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD28\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD29\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD30\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD31\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD8\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nD9\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa10\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa11\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa12\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa13\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa14\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa15\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa8\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDa9\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDe\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDm\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nDp\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nEtr\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nExtSd\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nFsA\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nFsB\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nG7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nHsync\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nId\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn10\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn11\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn12\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn13\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn14\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn15\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn8\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nIn9\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nInt\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nJtck\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nJtdi\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nJtdo\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nJtms\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nJtrst\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMck\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMclkA\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMclkB\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMco1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMco2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMdc\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMdio\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMiso\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nMosi\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNbl0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNbl1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNbl2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNbl3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNce\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNe1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNe2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNe3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNe4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNl\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNoe\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNss\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNwait\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nNwe\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nOsc32In\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nOsc32Out\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nOscIn\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nOscOut\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nOut1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nOut2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nPixclk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nPpsOut\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nR7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRefClk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRefin\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRts\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRx\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxClk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxDv\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxEr\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxd0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxd1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxd2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nRxd3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSck\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSckA\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSckB\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nScl\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSd\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdA\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdB\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSda\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdcke0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdcke1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdclk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdncas\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdne0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdne1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdnras\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSdnwe\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSmba\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSof\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSwclk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSwdio\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nSwo\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTe\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTraceclk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTraced0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTraced1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTraced2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTraced3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTx\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTxClk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTxEn\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTxd0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTxd1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTxd2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nTxd3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiCk\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD0\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD1\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD2\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD3\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD4\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD5\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD6\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiD7\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiDir\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiNxt\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nUlpiStp\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nVbus\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nVsync\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nWkup\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioUnused\n::\nWs\n<\n \nPeripheral\n \n_\n \n>\n;\n\n\n\n// Enum\n\n\nenum\n \nclass\n \nPeripheral\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:gpio\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio_common\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio.common\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio->modm_platform_gpio_common\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni\n\n\n\n\n\n\nmodm:\n\n\nboard:\n\n\ndisco-f469ni\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_1-wire_bitbang\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\n1-wire.bitbang\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_1-wire_bitbang->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nfault.cortex\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_fault_cortex->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c.bitbang\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_bitbang\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi.bitbang\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_bitbang->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_gpio->modm_platform_gpio",
            "title": "modm:platform:gpio"
        },
        {
            "location": "/reference/module/modm-platform-gpio/#modmplatformgpio",
            "text": "",
            "title": "modm:platform:gpio"
        },
        {
            "location": "/reference/module/modm-platform-gpio/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-gpio/#enable_ports",
            "text": "Enable clock for these GPIO ports during startup:  ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']  \u2208  { A, B, C, D, E, F, G, H, I, J, K }",
            "title": "enable_ports"
        },
        {
            "location": "/reference/module/modm-platform-gpio/#content",
            "text": "// Class  class   modm :: platform :: GpioA0 ;  class   modm :: platform :: GpioA10 ;  class   modm :: platform :: GpioA11 ;  class   modm :: platform :: GpioA12 ;  class   modm :: platform :: GpioA13 ;  class   modm :: platform :: GpioA14 ;  class   modm :: platform :: GpioA15 ;  class   modm :: platform :: GpioA1 ;  class   modm :: platform :: GpioA2 ;  class   modm :: platform :: GpioA3 ;  class   modm :: platform :: GpioA4 ;  class   modm :: platform :: GpioA5 ;  class   modm :: platform :: GpioA6 ;  class   modm :: platform :: GpioA7 ;  class   modm :: platform :: GpioA8 ;  class   modm :: platform :: GpioA9 ;  class   modm :: platform :: GpioB0 ;  class   modm :: platform :: GpioB10 ;  class   modm :: platform :: GpioB11 ;  class   modm :: platform :: GpioB12 ;  class   modm :: platform :: GpioB13 ;  class   modm :: platform :: GpioB14 ;  class   modm :: platform :: GpioB15 ;  class   modm :: platform :: GpioB1 ;  class   modm :: platform :: GpioB2 ;  class   modm :: platform :: GpioB3 ;  class   modm :: platform :: GpioB4 ;  class   modm :: platform :: GpioB5 ;  class   modm :: platform :: GpioB6 ;  class   modm :: platform :: GpioB7 ;  class   modm :: platform :: GpioB8 ;  class   modm :: platform :: GpioB9 ;  class   modm :: platform :: GpioC0 ;  class   modm :: platform :: GpioC10 ;  class   modm :: platform :: GpioC11 ;  class   modm :: platform :: GpioC12 ;  class   modm :: platform :: GpioC13 ;  class   modm :: platform :: GpioC14 ;  class   modm :: platform :: GpioC15 ;  class   modm :: platform :: GpioC1 ;  class   modm :: platform :: GpioC2 ;  class   modm :: platform :: GpioC3 ;  class   modm :: platform :: GpioC4 ;  class   modm :: platform :: GpioC5 ;  class   modm :: platform :: GpioC6 ;  class   modm :: platform :: GpioC7 ;  class   modm :: platform :: GpioC8 ;  class   modm :: platform :: GpioC9 ;  class   modm :: platform :: GpioD0 ;  class   modm :: platform :: GpioD10 ;  class   modm :: platform :: GpioD11 ;  class   modm :: platform :: GpioD12 ;  class   modm :: platform :: GpioD13 ;  class   modm :: platform :: GpioD14 ;  class   modm :: platform :: GpioD15 ;  class   modm :: platform :: GpioD1 ;  class   modm :: platform :: GpioD2 ;  class   modm :: platform :: GpioD3 ;  class   modm :: platform :: GpioD4 ;  class   modm :: platform :: GpioD5 ;  class   modm :: platform :: GpioD6 ;  class   modm :: platform :: GpioD7 ;  class   modm :: platform :: GpioD8 ;  class   modm :: platform :: GpioD9 ;  class   modm :: platform :: GpioE0 ;  class   modm :: platform :: GpioE10 ;  class   modm :: platform :: GpioE11 ;  class   modm :: platform :: GpioE12 ;  class   modm :: platform :: GpioE13 ;  class   modm :: platform :: GpioE14 ;  class   modm :: platform :: GpioE15 ;  class   modm :: platform :: GpioE1 ;  class   modm :: platform :: GpioE2 ;  class   modm :: platform :: GpioE3 ;  class   modm :: platform :: GpioE4 ;  class   modm :: platform :: GpioE5 ;  class   modm :: platform :: GpioE6 ;  class   modm :: platform :: GpioE7 ;  class   modm :: platform :: GpioE8 ;  class   modm :: platform :: GpioE9 ;  class   modm :: platform :: GpioF0 ;  class   modm :: platform :: GpioF10 ;  class   modm :: platform :: GpioF11 ;  class   modm :: platform :: GpioF12 ;  class   modm :: platform :: GpioF13 ;  class   modm :: platform :: GpioF14 ;  class   modm :: platform :: GpioF15 ;  class   modm :: platform :: GpioF1 ;  class   modm :: platform :: GpioF2 ;  class   modm :: platform :: GpioF3 ;  class   modm :: platform :: GpioF4 ;  class   modm :: platform :: GpioF5 ;  class   modm :: platform :: GpioF6 ;  class   modm :: platform :: GpioF7 ;  class   modm :: platform :: GpioF8 ;  class   modm :: platform :: GpioF9 ;  class   modm :: platform :: GpioG0 ;  class   modm :: platform :: GpioG10 ;  class   modm :: platform :: GpioG11 ;  class   modm :: platform :: GpioG12 ;  class   modm :: platform :: GpioG13 ;  class   modm :: platform :: GpioG14 ;  class   modm :: platform :: GpioG15 ;  class   modm :: platform :: GpioG1 ;  class   modm :: platform :: GpioG2 ;  class   modm :: platform :: GpioG3 ;  class   modm :: platform :: GpioG4 ;  class   modm :: platform :: GpioG5 ;  class   modm :: platform :: GpioG6 ;  class   modm :: platform :: GpioG7 ;  class   modm :: platform :: GpioG8 ;  class   modm :: platform :: GpioG9 ;  class   modm :: platform :: GpioH0 ;  class   modm :: platform :: GpioH10 ;  class   modm :: platform :: GpioH11 ;  class   modm :: platform :: GpioH12 ;  class   modm :: platform :: GpioH13 ;  class   modm :: platform :: GpioH14 ;  class   modm :: platform :: GpioH15 ;  class   modm :: platform :: GpioH1 ;  class   modm :: platform :: GpioH2 ;  class   modm :: platform :: GpioH3 ;  class   modm :: platform :: GpioH4 ;  class   modm :: platform :: GpioH5 ;  class   modm :: platform :: GpioH6 ;  class   modm :: platform :: GpioH7 ;  class   modm :: platform :: GpioH8 ;  class   modm :: platform :: GpioH9 ;  class   modm :: platform :: GpioI0 ;  class   modm :: platform :: GpioI10 ;  class   modm :: platform :: GpioI11 ;  class   modm :: platform :: GpioI12 ;  class   modm :: platform :: GpioI13 ;  class   modm :: platform :: GpioI14 ;  class   modm :: platform :: GpioI15 ;  class   modm :: platform :: GpioI1 ;  class   modm :: platform :: GpioI2 ;  class   modm :: platform :: GpioI3 ;  class   modm :: platform :: GpioI4 ;  class   modm :: platform :: GpioI5 ;  class   modm :: platform :: GpioI6 ;  class   modm :: platform :: GpioI7 ;  class   modm :: platform :: GpioI8 ;  class   modm :: platform :: GpioI9 ;  class   modm :: platform :: GpioInverted <   class   Pin    > ;  class   modm :: platform :: GpioJ0 ;  class   modm :: platform :: GpioJ12 ;  class   modm :: platform :: GpioJ13 ;  class   modm :: platform :: GpioJ14 ;  class   modm :: platform :: GpioJ15 ;  class   modm :: platform :: GpioJ1 ;  class   modm :: platform :: GpioJ2 ;  class   modm :: platform :: GpioJ3 ;  class   modm :: platform :: GpioJ4 ;  class   modm :: platform :: GpioJ5 ;  class   modm :: platform :: GpioK3 ;  class   modm :: platform :: GpioK4 ;  class   modm :: platform :: GpioK5 ;  class   modm :: platform :: GpioK6 ;  class   modm :: platform :: GpioK7 ;  class   modm :: platform :: GpioPort <   class   StartGpio   ,   int8_t   Width   > ;  class   modm :: platform :: GpioSet <   class ...   Gpios   > ;  class   modm :: platform :: GpioUnused ;  class   modm :: platform :: SoftwareGpioPort <   class ...   Gpios   > ;  // Struct  struct   modm :: platform :: Gpio ;  struct   modm :: platform :: GpioConnector <   Peripheral   peripheral ,   template <   Peripheral   _   >   class ...   Signals   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port   port   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: A   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: A   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: B   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: B   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: C   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: C   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: D   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: D   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: E   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: E   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: F   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: F   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: G   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: G   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: H   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: H   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: I   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: I   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: J   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: J   > ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: K   >:: check ;  struct   modm :: platform :: GpioPortInfo <   Gpio :: Port :: K   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 1   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 10   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 11   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 12   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 13   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 14   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 15   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 16   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 2   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 3   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 4   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 5   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 6   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 7   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 8   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   - 9   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   0   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   1   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   10   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   11   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   12   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   13   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   14   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   15   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   16   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   2   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   3   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   4   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   5   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   6   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   7   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   8   > ;  struct   modm :: platform :: GpioSetShim <   StartGpio ,   9   > ;  struct   modm :: platform :: GpioSetShim <   class   StartGpio   ,   int8_t   Width   > ;  struct   modm :: platform :: GpioShim <   class   StartGpio   ,   int8_t   offset   > ;  struct   modm :: platform :: GpioUnused :: A0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A10 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A11 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A12 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A13 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A14 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A15 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A16 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A17 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A18 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A19 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A20 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A21 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A22 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A23 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A24 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A25 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A8 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: A9 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Af1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Af2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ale <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: B7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ba0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ba1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk1Io0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk1Io1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk1Io2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk1Io3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk1Ncs <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk2Io0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk2Io1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk2Io2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk2Io3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bk2Ncs <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Bkin <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch1n <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch2n <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch3n <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ch4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ck <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ckin <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Cle <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Clk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Cmd <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Col <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Crs <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: CrsDv <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Cts <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D10 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D11 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D12 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D13 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D14 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D15 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D16 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D17 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D18 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D19 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D20 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D21 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D22 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D23 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D24 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D25 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D26 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D27 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D28 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D29 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D30 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D31 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D8 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: D9 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da10 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da11 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da12 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da13 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da14 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da15 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da8 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Da9 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: De <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Dm <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Dp <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Etr <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: ExtSd <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: FsA <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: FsB <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: G7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Hsync <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Id <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In10 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In11 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In12 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In13 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In14 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In15 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In8 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: In9 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Int <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Jtck <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Jtdi <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Jtdo <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Jtms <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Jtrst <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Mck <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: MclkA <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: MclkB <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Mco1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Mco2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Mdc <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Mdio <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Miso <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Mosi <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nbl0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nbl1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nbl2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nbl3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nce <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ne1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ne2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ne3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ne4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nl <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Noe <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nss <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nwait <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Nwe <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Osc32In <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Osc32Out <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: OscIn <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: OscOut <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Out1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Out2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Pixclk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: PpsOut <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: R7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: RefClk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Refin <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Rts <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Rx <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: RxClk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: RxDv <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: RxEr <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Rxd0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Rxd1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Rxd2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Rxd3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sck <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: SckA <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: SckB <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Scl <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sd <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: SdA <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: SdB <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sda <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdcke0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdcke1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdclk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdncas <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdne0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdne1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdnras <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sdnwe <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Smba <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Sof <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Swclk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Swdio <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Swo <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Te <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Traceclk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Traced0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Traced1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Traced2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Traced3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Tx <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: TxClk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: TxEn <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Txd0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Txd1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Txd2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Txd3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiCk <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD0 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD1 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD2 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD3 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD4 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD5 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD6 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiD7 <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiDir <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiNxt <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: UlpiStp <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Vbus <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Vsync <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Wkup <   Peripheral   _   > ;  struct   modm :: platform :: GpioUnused :: Ws <   Peripheral   _   > ;  // Enum  enum   class   Peripheral ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-gpio/#dependencies",
            "text": "modm:platform:gpio     modm_platform_gpio   modm:  platform:  gpio     modm_architecture_gpio    modm:  architecture:  gpio       modm_platform_gpio->modm_architecture_gpio       modm_cmsis_device    modm:  cmsis:  device       modm_platform_gpio->modm_cmsis_device       modm_math_utils    modm:  math:  utils       modm_platform_gpio->modm_math_utils       modm_platform    modm:  platform       modm_platform_gpio->modm_platform       modm_platform_gpio_common    modm:  platform:  gpio.common       modm_platform_gpio->modm_platform_gpio_common       modm_board_disco-f469ni    modm:  board:  disco-f469ni       modm_board_disco-f469ni->modm_platform_gpio       modm_platform_1-wire_bitbang    modm:  platform:  1-wire.bitbang       modm_platform_1-wire_bitbang->modm_platform_gpio       modm_platform_adc    modm:  platform:  adc       modm_platform_adc->modm_platform_gpio       modm_platform_can    modm:  platform:  can       modm_platform_can->modm_platform_gpio       modm_platform_fault_cortex    modm:  platform:  fault.cortex       modm_platform_fault_cortex->modm_platform_gpio       modm_platform_i2c    modm:  platform:  i2c       modm_platform_i2c->modm_platform_gpio       modm_platform_i2c_bitbang    modm:  platform:  i2c.bitbang       modm_platform_i2c_bitbang->modm_platform_gpio       modm_platform_spi    modm:  platform:  spi       modm_platform_spi->modm_platform_gpio       modm_platform_spi_bitbang    modm:  platform:  spi.bitbang       modm_platform_spi_bitbang->modm_platform_gpio       modm_platform_timer    modm:  platform:  timer       modm_platform_timer->modm_platform_gpio       modm_platform_uart    modm:  platform:  uart       modm_platform_uart->modm_platform_gpio       modm_platform_uart_spi    modm:  platform:  uart.spi       modm_platform_uart_spi->modm_platform_gpio       modm_test_driver    modm:  test:  driver       modm_test_driver->modm_platform_gpio       modm_test_platform_gpio    modm:  test:  platform:  gpio       modm_test_platform_gpio->modm_platform_gpio",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-gpio-common/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:gpio.common\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nGpioInverted\n<\n \nclass\n \nPin\n  \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nplatform\n::\nGpioConnector\n<\n \nPeripheral\n \nperipheral\n,\n \ntemplate\n<\n \nPeripheral\n \n_\n \n>\n \nclass\n...\n \nSignals\n \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:gpio.common\n\n\n\n\n\n\n\n\nmodm_platform_gpio_common\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio.common\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio_common->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio_common->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio_common->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio->modm_platform_gpio_common",
            "title": "modm:platform:gpio.common"
        },
        {
            "location": "/reference/module/modm-platform-gpio-common/#modmplatformgpiocommon",
            "text": "",
            "title": "modm:platform:gpio.common"
        },
        {
            "location": "/reference/module/modm-platform-gpio-common/#content",
            "text": "// Class  class   modm :: platform :: GpioInverted <   class   Pin    > ;  // Struct  struct   modm :: platform :: GpioConnector <   Peripheral   peripheral ,   template <   Peripheral   _   >   class ...   Signals   > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-gpio-common/#dependencies",
            "text": "modm:platform:gpio.common     modm_platform_gpio_common   modm:  platform:  gpio.common     modm_architecture_gpio    modm:  architecture:  gpio       modm_platform_gpio_common->modm_architecture_gpio       modm_platform    modm:  platform       modm_platform_gpio_common->modm_platform       modm_utils    modm:  utils       modm_platform_gpio_common->modm_utils       modm_platform_gpio    modm:  platform:  gpio       modm_platform_gpio->modm_platform_gpio_common",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-i2c/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:i2c\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nBitBangI2cMaster\n<\n \nclass\n \nScl\n \n,\n \nclass\n \nSda\n  \n>\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nI2cMaster1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nI2cMaster2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nI2cMaster3\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:i2c\n\n\n\n\n\n\n\n\nmodm_platform_i2c\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\natomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_architecture_atomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_architecture_i2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_interrupt\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ninterrupt\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_architecture_interrupt\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container\n\n\n\n\n\n\nmodm:\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_1\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c:\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_1->modm_platform_i2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_2\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c:\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_2->modm_platform_i2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_3\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c:\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_3->modm_platform_i2c",
            "title": "modm:platform:i2c"
        },
        {
            "location": "/reference/module/modm-platform-i2c/#modmplatformi2c",
            "text": "",
            "title": "modm:platform:i2c"
        },
        {
            "location": "/reference/module/modm-platform-i2c/#content",
            "text": "// Class  class   modm :: platform :: BitBangI2cMaster <   class   Scl   ,   class   Sda    > ;  class   modm :: platform :: I2cMaster1 ;  class   modm :: platform :: I2cMaster2 ;  class   modm :: platform :: I2cMaster3 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-i2c/#dependencies",
            "text": "modm:platform:i2c     modm_platform_i2c   modm:  platform:  i2c     modm_architecture_accessor    modm:  architecture:  accessor       modm_platform_i2c->modm_architecture_accessor       modm_architecture_atomic    modm:  architecture:  atomic       modm_platform_i2c->modm_architecture_atomic       modm_architecture_i2c    modm:  architecture:  i2c       modm_platform_i2c->modm_architecture_i2c       modm_architecture_interrupt    modm:  architecture:  interrupt       modm_platform_i2c->modm_architecture_interrupt       modm_cmsis_device    modm:  cmsis:  device       modm_platform_i2c->modm_cmsis_device       modm_container    modm:  container       modm_platform_i2c->modm_container       modm_platform    modm:  platform       modm_platform_i2c->modm_platform       modm_platform_gpio    modm:  platform:  gpio       modm_platform_i2c->modm_platform_gpio       modm_platform_i2c_1    modm:  platform:  i2c:  1       modm_platform_i2c_1->modm_platform_i2c       modm_platform_i2c_2    modm:  platform:  i2c:  2       modm_platform_i2c_2->modm_platform_i2c       modm_platform_i2c_3    modm:  platform:  i2c:  3       modm_platform_i2c_3->modm_platform_i2c",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-i2c-bitbang/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:i2c.bitbang\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nBitBangI2cMaster\n<\n \nclass\n \nScl\n \n,\n \nclass\n \nSda\n  \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:i2c.bitbang\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c.bitbang\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang->modm_architecture_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang->modm_architecture_i2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_bitbang->modm_platform_gpio",
            "title": "modm:platform:i2c.bitbang"
        },
        {
            "location": "/reference/module/modm-platform-i2c-bitbang/#modmplatformi2cbitbang",
            "text": "",
            "title": "modm:platform:i2c.bitbang"
        },
        {
            "location": "/reference/module/modm-platform-i2c-bitbang/#content",
            "text": "// Class  class   modm :: platform :: BitBangI2cMaster <   class   Scl   ,   class   Sda    > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-i2c-bitbang/#dependencies",
            "text": "modm:platform:i2c.bitbang     modm_platform_i2c_bitbang   modm:  platform:  i2c.bitbang     modm_architecture_delay    modm:  architecture:  delay       modm_platform_i2c_bitbang->modm_architecture_delay       modm_architecture_gpio    modm:  architecture:  gpio       modm_platform_i2c_bitbang->modm_architecture_gpio       modm_architecture_i2c    modm:  architecture:  i2c       modm_platform_i2c_bitbang->modm_architecture_i2c       modm_platform    modm:  platform       modm_platform_i2c_bitbang->modm_platform       modm_platform_gpio    modm:  platform:  gpio       modm_platform_i2c_bitbang->modm_platform_gpio",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-i2c-1/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:i2c:1: I2C 1 instance\n\u00b6\n\n\nOptions\n\u00b6\n\n\nbuffer.transaction\n\u00b6\n\n\nDefault: \n8\n \u2208 \n{ 1 ... 65534 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nI2cMaster1\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:i2c:1\n\n\n\n\n\n\n\n\nmodm_platform_i2c_1\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c:\n\n\n1\n\n\n\n\n\n\n\n\nmodm_platform_i2c\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_1->modm_platform_i2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni\n\n\n\n\n\n\nmodm:\n\n\nboard:\n\n\ndisco-f469ni\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_platform_i2c_1",
            "title": "modm:platform:i2c:1"
        },
        {
            "location": "/reference/module/modm-platform-i2c-1/#modmplatformi2c1-i2c-1-instance",
            "text": "",
            "title": "modm:platform:i2c:1: I2C 1 instance"
        },
        {
            "location": "/reference/module/modm-platform-i2c-1/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-i2c-1/#buffertransaction",
            "text": "Default:  8  \u2208  { 1 ... 65534 }",
            "title": "buffer.transaction"
        },
        {
            "location": "/reference/module/modm-platform-i2c-1/#content",
            "text": "// Class  class   modm :: platform :: I2cMaster1 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-i2c-1/#dependencies",
            "text": "modm:platform:i2c:1     modm_platform_i2c_1   modm:  platform:  i2c:  1     modm_platform_i2c    modm:  platform:  i2c       modm_platform_i2c_1->modm_platform_i2c       modm_board_disco-f469ni    modm:  board:  disco-f469ni       modm_board_disco-f469ni->modm_platform_i2c_1",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-i2c-2/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:i2c:2: I2C 2 instance\n\u00b6\n\n\nOptions\n\u00b6\n\n\nbuffer.transaction\n\u00b6\n\n\nDefault: \n8\n \u2208 \n{ 1 ... 65534 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nI2cMaster2\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:i2c:2\n\n\n\n\n\n\n\n\nmodm_platform_i2c_2\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c:\n\n\n2\n\n\n\n\n\n\n\n\nmodm_platform_i2c\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_2->modm_platform_i2c",
            "title": "modm:platform:i2c:2"
        },
        {
            "location": "/reference/module/modm-platform-i2c-2/#modmplatformi2c2-i2c-2-instance",
            "text": "",
            "title": "modm:platform:i2c:2: I2C 2 instance"
        },
        {
            "location": "/reference/module/modm-platform-i2c-2/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-i2c-2/#buffertransaction",
            "text": "Default:  8  \u2208  { 1 ... 65534 }",
            "title": "buffer.transaction"
        },
        {
            "location": "/reference/module/modm-platform-i2c-2/#content",
            "text": "// Class  class   modm :: platform :: I2cMaster2 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-i2c-2/#dependencies",
            "text": "modm:platform:i2c:2     modm_platform_i2c_2   modm:  platform:  i2c:  2     modm_platform_i2c    modm:  platform:  i2c       modm_platform_i2c_2->modm_platform_i2c",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-i2c-3/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:i2c:3: I2C 3 instance\n\u00b6\n\n\nOptions\n\u00b6\n\n\nbuffer.transaction\n\u00b6\n\n\nDefault: \n8\n \u2208 \n{ 1 ... 65534 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nI2cMaster3\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:i2c:3\n\n\n\n\n\n\n\n\nmodm_platform_i2c_3\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c:\n\n\n3\n\n\n\n\n\n\n\n\nmodm_platform_i2c\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ni2c\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_i2c_3->modm_platform_i2c",
            "title": "modm:platform:i2c:3"
        },
        {
            "location": "/reference/module/modm-platform-i2c-3/#modmplatformi2c3-i2c-3-instance",
            "text": "",
            "title": "modm:platform:i2c:3: I2C 3 instance"
        },
        {
            "location": "/reference/module/modm-platform-i2c-3/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-i2c-3/#buffertransaction",
            "text": "Default:  8  \u2208  { 1 ... 65534 }",
            "title": "buffer.transaction"
        },
        {
            "location": "/reference/module/modm-platform-i2c-3/#content",
            "text": "// Class  class   modm :: platform :: I2cMaster3 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-i2c-3/#dependencies",
            "text": "modm:platform:i2c:3     modm_platform_i2c_3   modm:  platform:  i2c:  3     modm_platform_i2c    modm:  platform:  i2c       modm_platform_i2c_3->modm_platform_i2c",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-id/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:id\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Function\n\n\nstatic\n \nuint32_t\n \nmodm\n::\nplatform\n::\ngetUniqueId\n(\nuint8_t\n \noffset\n);\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:id\n\n\n\n\n\n\n\n\nmodm_platform_id\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nid\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_id->modm_platform",
            "title": "modm:platform:id"
        },
        {
            "location": "/reference/module/modm-platform-id/#modmplatformid",
            "text": "",
            "title": "modm:platform:id"
        },
        {
            "location": "/reference/module/modm-platform-id/#content",
            "text": "// Function  static   uint32_t   modm :: platform :: getUniqueId ( uint8_t   offset );",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-id/#dependencies",
            "text": "modm:platform:id     modm_platform_id   modm:  platform:  id     modm_platform    modm:  platform       modm_platform_id->modm_platform",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-random/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:random\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nRandomNumberGenerator\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:random\n\n\n\n\n\n\n\n\nmodm_platform_random\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nrandom\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_random->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_random->modm_platform",
            "title": "modm:platform:random"
        },
        {
            "location": "/reference/module/modm-platform-random/#modmplatformrandom",
            "text": "",
            "title": "modm:platform:random"
        },
        {
            "location": "/reference/module/modm-platform-random/#content",
            "text": "// Class  class   modm :: platform :: RandomNumberGenerator ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-random/#dependencies",
            "text": "modm:platform:random     modm_platform_random   modm:  platform:  random     modm_cmsis_device    modm:  cmsis:  device       modm_platform_random->modm_cmsis_device       modm_platform    modm:  platform       modm_platform_random->modm_platform",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-spi/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:spi\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nBitBangSpiMaster\n<\n \ntypename\n \nSck\n \n,\n \ntypename\n \nMosi\n \n,\n \ntypename\n \nMiso\n \n=\nGpioUnused\n \n>\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiBase\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster6\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:spi\n\n\n\n\n\n\n\n\nmodm_platform_spi\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_1\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi:\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_1->modm_platform_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_2\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi:\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_2->modm_platform_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_3\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi:\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_3->modm_platform_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_4\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi:\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_4->modm_platform_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_5\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi:\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_5->modm_platform_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_6\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi:\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_6->modm_platform_spi",
            "title": "modm:platform:spi"
        },
        {
            "location": "/reference/module/modm-platform-spi/#modmplatformspi",
            "text": "",
            "title": "modm:platform:spi"
        },
        {
            "location": "/reference/module/modm-platform-spi/#content",
            "text": "// Class  class   modm :: platform :: BitBangSpiMaster <   typename   Sck   ,   typename   Mosi   ,   typename   Miso   = GpioUnused   > ;  class   modm :: platform :: SpiBase ;  class   modm :: platform :: SpiHal1 ;  class   modm :: platform :: SpiHal2 ;  class   modm :: platform :: SpiHal3 ;  class   modm :: platform :: SpiHal4 ;  class   modm :: platform :: SpiHal5 ;  class   modm :: platform :: SpiHal6 ;  class   modm :: platform :: SpiMaster1 ;  class   modm :: platform :: SpiMaster2 ;  class   modm :: platform :: SpiMaster3 ;  class   modm :: platform :: SpiMaster4 ;  class   modm :: platform :: SpiMaster5 ;  class   modm :: platform :: SpiMaster6 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-spi/#dependencies",
            "text": "modm:platform:spi     modm_platform_spi   modm:  platform:  spi     modm_architecture_register    modm:  architecture:  register       modm_platform_spi->modm_architecture_register       modm_architecture_spi    modm:  architecture:  spi       modm_platform_spi->modm_architecture_spi       modm_cmsis_device    modm:  cmsis:  device       modm_platform_spi->modm_cmsis_device       modm_platform    modm:  platform       modm_platform_spi->modm_platform       modm_platform_gpio    modm:  platform:  gpio       modm_platform_spi->modm_platform_gpio       modm_platform_spi_1    modm:  platform:  spi:  1       modm_platform_spi_1->modm_platform_spi       modm_platform_spi_2    modm:  platform:  spi:  2       modm_platform_spi_2->modm_platform_spi       modm_platform_spi_3    modm:  platform:  spi:  3       modm_platform_spi_3->modm_platform_spi       modm_platform_spi_4    modm:  platform:  spi:  4       modm_platform_spi_4->modm_platform_spi       modm_platform_spi_5    modm:  platform:  spi:  5       modm_platform_spi_5->modm_platform_spi       modm_platform_spi_6    modm:  platform:  spi:  6       modm_platform_spi_6->modm_platform_spi",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-spi-bitbang/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:spi.bitbang\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nBitBangSpiMaster\n<\n \ntypename\n \nSck\n \n,\n \ntypename\n \nMosi\n \n,\n \ntypename\n \nMiso\n \n=\nGpioUnused\n \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:spi.bitbang\n\n\n\n\n\n\n\n\nmodm_platform_spi_bitbang\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi.bitbang\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_bitbang->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_bitbang->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_bitbang->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_bitbang->modm_platform_gpio",
            "title": "modm:platform:spi.bitbang"
        },
        {
            "location": "/reference/module/modm-platform-spi-bitbang/#modmplatformspibitbang",
            "text": "",
            "title": "modm:platform:spi.bitbang"
        },
        {
            "location": "/reference/module/modm-platform-spi-bitbang/#content",
            "text": "// Class  class   modm :: platform :: BitBangSpiMaster <   typename   Sck   ,   typename   Mosi   ,   typename   Miso   = GpioUnused   > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-spi-bitbang/#dependencies",
            "text": "modm:platform:spi.bitbang     modm_platform_spi_bitbang   modm:  platform:  spi.bitbang     modm_architecture_delay    modm:  architecture:  delay       modm_platform_spi_bitbang->modm_architecture_delay       modm_architecture_spi    modm:  architecture:  spi       modm_platform_spi_bitbang->modm_architecture_spi       modm_platform    modm:  platform       modm_platform_spi_bitbang->modm_platform       modm_platform_gpio    modm:  platform:  gpio       modm_platform_spi_bitbang->modm_platform_gpio",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-spi-1/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:spi:1: SPI 1 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster1\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:spi:1\n\n\n\n\n\n\n\n\nmodm_platform_spi_1\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi:\n\n\n1\n\n\n\n\n\n\n\n\nmodm_platform_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_1->modm_platform_spi",
            "title": "modm:platform:spi:1"
        },
        {
            "location": "/reference/module/modm-platform-spi-1/#modmplatformspi1-spi-1-instance",
            "text": "",
            "title": "modm:platform:spi:1: SPI 1 instance"
        },
        {
            "location": "/reference/module/modm-platform-spi-1/#content",
            "text": "// Class  class   modm :: platform :: SpiHal1 ;  class   modm :: platform :: SpiMaster1 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-spi-1/#dependencies",
            "text": "modm:platform:spi:1     modm_platform_spi_1   modm:  platform:  spi:  1     modm_platform_spi    modm:  platform:  spi       modm_platform_spi_1->modm_platform_spi",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-spi-2/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:spi:2: SPI 2 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster2\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:spi:2\n\n\n\n\n\n\n\n\nmodm_platform_spi_2\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi:\n\n\n2\n\n\n\n\n\n\n\n\nmodm_platform_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_2->modm_platform_spi",
            "title": "modm:platform:spi:2"
        },
        {
            "location": "/reference/module/modm-platform-spi-2/#modmplatformspi2-spi-2-instance",
            "text": "",
            "title": "modm:platform:spi:2: SPI 2 instance"
        },
        {
            "location": "/reference/module/modm-platform-spi-2/#content",
            "text": "// Class  class   modm :: platform :: SpiHal2 ;  class   modm :: platform :: SpiMaster2 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-spi-2/#dependencies",
            "text": "modm:platform:spi:2     modm_platform_spi_2   modm:  platform:  spi:  2     modm_platform_spi    modm:  platform:  spi       modm_platform_spi_2->modm_platform_spi",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-spi-3/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:spi:3: SPI 3 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster3\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:spi:3\n\n\n\n\n\n\n\n\nmodm_platform_spi_3\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi:\n\n\n3\n\n\n\n\n\n\n\n\nmodm_platform_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_3->modm_platform_spi",
            "title": "modm:platform:spi:3"
        },
        {
            "location": "/reference/module/modm-platform-spi-3/#modmplatformspi3-spi-3-instance",
            "text": "",
            "title": "modm:platform:spi:3: SPI 3 instance"
        },
        {
            "location": "/reference/module/modm-platform-spi-3/#content",
            "text": "// Class  class   modm :: platform :: SpiHal3 ;  class   modm :: platform :: SpiMaster3 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-spi-3/#dependencies",
            "text": "modm:platform:spi:3     modm_platform_spi_3   modm:  platform:  spi:  3     modm_platform_spi    modm:  platform:  spi       modm_platform_spi_3->modm_platform_spi",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-spi-4/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:spi:4: SPI 4 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster4\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:spi:4\n\n\n\n\n\n\n\n\nmodm_platform_spi_4\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi:\n\n\n4\n\n\n\n\n\n\n\n\nmodm_platform_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_4->modm_platform_spi",
            "title": "modm:platform:spi:4"
        },
        {
            "location": "/reference/module/modm-platform-spi-4/#modmplatformspi4-spi-4-instance",
            "text": "",
            "title": "modm:platform:spi:4: SPI 4 instance"
        },
        {
            "location": "/reference/module/modm-platform-spi-4/#content",
            "text": "// Class  class   modm :: platform :: SpiHal4 ;  class   modm :: platform :: SpiMaster4 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-spi-4/#dependencies",
            "text": "modm:platform:spi:4     modm_platform_spi_4   modm:  platform:  spi:  4     modm_platform_spi    modm:  platform:  spi       modm_platform_spi_4->modm_platform_spi",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-spi-5/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:spi:5: SPI 5 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster5\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:spi:5\n\n\n\n\n\n\n\n\nmodm_platform_spi_5\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi:\n\n\n5\n\n\n\n\n\n\n\n\nmodm_platform_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_5->modm_platform_spi",
            "title": "modm:platform:spi:5"
        },
        {
            "location": "/reference/module/modm-platform-spi-5/#modmplatformspi5-spi-5-instance",
            "text": "",
            "title": "modm:platform:spi:5: SPI 5 instance"
        },
        {
            "location": "/reference/module/modm-platform-spi-5/#content",
            "text": "// Class  class   modm :: platform :: SpiHal5 ;  class   modm :: platform :: SpiMaster5 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-spi-5/#dependencies",
            "text": "modm:platform:spi:5     modm_platform_spi_5   modm:  platform:  spi:  5     modm_platform_spi    modm:  platform:  spi       modm_platform_spi_5->modm_platform_spi",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-spi-6/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:spi:6: SPI 6 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiHal6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nSpiMaster6\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:spi:6\n\n\n\n\n\n\n\n\nmodm_platform_spi_6\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi:\n\n\n6\n\n\n\n\n\n\n\n\nmodm_platform_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_spi_6->modm_platform_spi",
            "title": "modm:platform:spi:6"
        },
        {
            "location": "/reference/module/modm-platform-spi-6/#modmplatformspi6-spi-6-instance",
            "text": "",
            "title": "modm:platform:spi:6: SPI 6 instance"
        },
        {
            "location": "/reference/module/modm-platform-spi-6/#content",
            "text": "// Class  class   modm :: platform :: SpiHal6 ;  class   modm :: platform :: SpiMaster6 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-spi-6/#dependencies",
            "text": "modm:platform:spi:6     modm_platform_spi_6   modm:  platform:  spi:  6     modm_platform_spi    modm:  platform:  spi       modm_platform_spi_6->modm_platform_spi",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nAdvancedControlTimer\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nBasicTimer\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nGeneralPurposeTimer\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer9\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_1\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_1->modm_platform_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_10\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n10\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_10->modm_platform_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_11\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n11\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_11->modm_platform_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_12\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n12\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_12->modm_platform_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_13\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n13\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_13->modm_platform_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_14\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n14\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_14->modm_platform_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_2\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_2->modm_platform_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_3\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_3->modm_platform_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_4\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_4->modm_platform_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_5\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_5->modm_platform_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_6\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_6->modm_platform_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_7\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n7\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_7->modm_platform_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_8\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_8->modm_platform_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_9\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n9\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_9->modm_platform_timer",
            "title": "modm:platform:timer"
        },
        {
            "location": "/reference/module/modm-platform-timer/#modmplatformtimer",
            "text": "",
            "title": "modm:platform:timer"
        },
        {
            "location": "/reference/module/modm-platform-timer/#content",
            "text": "// Class  class   modm :: platform :: AdvancedControlTimer ;  class   modm :: platform :: BasicTimer ;  class   modm :: platform :: GeneralPurposeTimer ;  class   modm :: platform :: Timer10 ;  class   modm :: platform :: Timer11 ;  class   modm :: platform :: Timer12 ;  class   modm :: platform :: Timer13 ;  class   modm :: platform :: Timer14 ;  class   modm :: platform :: Timer1 ;  class   modm :: platform :: Timer2 ;  class   modm :: platform :: Timer3 ;  class   modm :: platform :: Timer4 ;  class   modm :: platform :: Timer5 ;  class   modm :: platform :: Timer6 ;  class   modm :: platform :: Timer7 ;  class   modm :: platform :: Timer8 ;  class   modm :: platform :: Timer9 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer/#dependencies",
            "text": "modm:platform:timer     modm_platform_timer   modm:  platform:  timer     modm_architecture_register    modm:  architecture:  register       modm_platform_timer->modm_architecture_register       modm_cmsis_device    modm:  cmsis:  device       modm_platform_timer->modm_cmsis_device       modm_platform    modm:  platform       modm_platform_timer->modm_platform       modm_platform_gpio    modm:  platform:  gpio       modm_platform_timer->modm_platform_gpio       modm_platform_timer_1    modm:  platform:  timer:  1       modm_platform_timer_1->modm_platform_timer       modm_platform_timer_10    modm:  platform:  timer:  10       modm_platform_timer_10->modm_platform_timer       modm_platform_timer_11    modm:  platform:  timer:  11       modm_platform_timer_11->modm_platform_timer       modm_platform_timer_12    modm:  platform:  timer:  12       modm_platform_timer_12->modm_platform_timer       modm_platform_timer_13    modm:  platform:  timer:  13       modm_platform_timer_13->modm_platform_timer       modm_platform_timer_14    modm:  platform:  timer:  14       modm_platform_timer_14->modm_platform_timer       modm_platform_timer_2    modm:  platform:  timer:  2       modm_platform_timer_2->modm_platform_timer       modm_platform_timer_3    modm:  platform:  timer:  3       modm_platform_timer_3->modm_platform_timer       modm_platform_timer_4    modm:  platform:  timer:  4       modm_platform_timer_4->modm_platform_timer       modm_platform_timer_5    modm:  platform:  timer:  5       modm_platform_timer_5->modm_platform_timer       modm_platform_timer_6    modm:  platform:  timer:  6       modm_platform_timer_6->modm_platform_timer       modm_platform_timer_7    modm:  platform:  timer:  7       modm_platform_timer_7->modm_platform_timer       modm_platform_timer_8    modm:  platform:  timer:  8       modm_platform_timer_8->modm_platform_timer       modm_platform_timer_9    modm:  platform:  timer:  9       modm_platform_timer_9->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-1/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:1: Timer 1 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer10\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer11\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer12\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer13\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer14\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer1\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:1\n\n\n\n\n\n\n\n\nmodm_platform_timer_1\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n1\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_1->modm_platform_timer",
            "title": "modm:platform:timer:1"
        },
        {
            "location": "/reference/module/modm-platform-timer-1/#modmplatformtimer1-timer-1-instance",
            "text": "",
            "title": "modm:platform:timer:1: Timer 1 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-1/#content",
            "text": "// Class  class   modm :: platform :: Timer10 ;  class   modm :: platform :: Timer11 ;  class   modm :: platform :: Timer12 ;  class   modm :: platform :: Timer13 ;  class   modm :: platform :: Timer14 ;  class   modm :: platform :: Timer1 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-1/#dependencies",
            "text": "modm:platform:timer:1     modm_platform_timer_1   modm:  platform:  timer:  1     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_1->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-10/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:10: Timer 10 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer10\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:10\n\n\n\n\n\n\n\n\nmodm_platform_timer_10\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n10\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_10->modm_platform_timer",
            "title": "modm:platform:timer:10"
        },
        {
            "location": "/reference/module/modm-platform-timer-10/#modmplatformtimer10-timer-10-instance",
            "text": "",
            "title": "modm:platform:timer:10: Timer 10 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-10/#content",
            "text": "// Class  class   modm :: platform :: Timer10 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-10/#dependencies",
            "text": "modm:platform:timer:10     modm_platform_timer_10   modm:  platform:  timer:  10     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_10->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-11/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:11: Timer 11 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer11\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:11\n\n\n\n\n\n\n\n\nmodm_platform_timer_11\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n11\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_11->modm_platform_timer",
            "title": "modm:platform:timer:11"
        },
        {
            "location": "/reference/module/modm-platform-timer-11/#modmplatformtimer11-timer-11-instance",
            "text": "",
            "title": "modm:platform:timer:11: Timer 11 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-11/#content",
            "text": "// Class  class   modm :: platform :: Timer11 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-11/#dependencies",
            "text": "modm:platform:timer:11     modm_platform_timer_11   modm:  platform:  timer:  11     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_11->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-12/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:12: Timer 12 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer12\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:12\n\n\n\n\n\n\n\n\nmodm_platform_timer_12\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n12\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_12->modm_platform_timer",
            "title": "modm:platform:timer:12"
        },
        {
            "location": "/reference/module/modm-platform-timer-12/#modmplatformtimer12-timer-12-instance",
            "text": "",
            "title": "modm:platform:timer:12: Timer 12 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-12/#content",
            "text": "// Class  class   modm :: platform :: Timer12 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-12/#dependencies",
            "text": "modm:platform:timer:12     modm_platform_timer_12   modm:  platform:  timer:  12     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_12->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-13/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:13: Timer 13 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer13\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:13\n\n\n\n\n\n\n\n\nmodm_platform_timer_13\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n13\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_13->modm_platform_timer",
            "title": "modm:platform:timer:13"
        },
        {
            "location": "/reference/module/modm-platform-timer-13/#modmplatformtimer13-timer-13-instance",
            "text": "",
            "title": "modm:platform:timer:13: Timer 13 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-13/#content",
            "text": "// Class  class   modm :: platform :: Timer13 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-13/#dependencies",
            "text": "modm:platform:timer:13     modm_platform_timer_13   modm:  platform:  timer:  13     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_13->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-14/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:14: Timer 14 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer14\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:14\n\n\n\n\n\n\n\n\nmodm_platform_timer_14\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n14\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_14->modm_platform_timer",
            "title": "modm:platform:timer:14"
        },
        {
            "location": "/reference/module/modm-platform-timer-14/#modmplatformtimer14-timer-14-instance",
            "text": "",
            "title": "modm:platform:timer:14: Timer 14 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-14/#content",
            "text": "// Class  class   modm :: platform :: Timer14 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-14/#dependencies",
            "text": "modm:platform:timer:14     modm_platform_timer_14   modm:  platform:  timer:  14     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_14->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-2/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:2: Timer 2 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer2\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:2\n\n\n\n\n\n\n\n\nmodm_platform_timer_2\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n2\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_2->modm_platform_timer",
            "title": "modm:platform:timer:2"
        },
        {
            "location": "/reference/module/modm-platform-timer-2/#modmplatformtimer2-timer-2-instance",
            "text": "",
            "title": "modm:platform:timer:2: Timer 2 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-2/#content",
            "text": "// Class  class   modm :: platform :: Timer2 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-2/#dependencies",
            "text": "modm:platform:timer:2     modm_platform_timer_2   modm:  platform:  timer:  2     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_2->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-3/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:3: Timer 3 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer3\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:3\n\n\n\n\n\n\n\n\nmodm_platform_timer_3\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n3\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_3->modm_platform_timer",
            "title": "modm:platform:timer:3"
        },
        {
            "location": "/reference/module/modm-platform-timer-3/#modmplatformtimer3-timer-3-instance",
            "text": "",
            "title": "modm:platform:timer:3: Timer 3 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-3/#content",
            "text": "// Class  class   modm :: platform :: Timer3 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-3/#dependencies",
            "text": "modm:platform:timer:3     modm_platform_timer_3   modm:  platform:  timer:  3     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_3->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-4/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:4: Timer 4 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer4\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:4\n\n\n\n\n\n\n\n\nmodm_platform_timer_4\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n4\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_4->modm_platform_timer",
            "title": "modm:platform:timer:4"
        },
        {
            "location": "/reference/module/modm-platform-timer-4/#modmplatformtimer4-timer-4-instance",
            "text": "",
            "title": "modm:platform:timer:4: Timer 4 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-4/#content",
            "text": "// Class  class   modm :: platform :: Timer4 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-4/#dependencies",
            "text": "modm:platform:timer:4     modm_platform_timer_4   modm:  platform:  timer:  4     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_4->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-5/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:5: Timer 5 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer5\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:5\n\n\n\n\n\n\n\n\nmodm_platform_timer_5\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n5\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_5->modm_platform_timer",
            "title": "modm:platform:timer:5"
        },
        {
            "location": "/reference/module/modm-platform-timer-5/#modmplatformtimer5-timer-5-instance",
            "text": "",
            "title": "modm:platform:timer:5: Timer 5 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-5/#content",
            "text": "// Class  class   modm :: platform :: Timer5 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-5/#dependencies",
            "text": "modm:platform:timer:5     modm_platform_timer_5   modm:  platform:  timer:  5     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_5->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-6/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:6: Timer 6 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer6\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:6\n\n\n\n\n\n\n\n\nmodm_platform_timer_6\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n6\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_6->modm_platform_timer",
            "title": "modm:platform:timer:6"
        },
        {
            "location": "/reference/module/modm-platform-timer-6/#modmplatformtimer6-timer-6-instance",
            "text": "",
            "title": "modm:platform:timer:6: Timer 6 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-6/#content",
            "text": "// Class  class   modm :: platform :: Timer6 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-6/#dependencies",
            "text": "modm:platform:timer:6     modm_platform_timer_6   modm:  platform:  timer:  6     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_6->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-7/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:7: Timer 7 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer7\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:7\n\n\n\n\n\n\n\n\nmodm_platform_timer_7\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n7\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_7->modm_platform_timer",
            "title": "modm:platform:timer:7"
        },
        {
            "location": "/reference/module/modm-platform-timer-7/#modmplatformtimer7-timer-7-instance",
            "text": "",
            "title": "modm:platform:timer:7: Timer 7 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-7/#content",
            "text": "// Class  class   modm :: platform :: Timer7 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-7/#dependencies",
            "text": "modm:platform:timer:7     modm_platform_timer_7   modm:  platform:  timer:  7     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_7->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-8/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:8: Timer 8 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer8\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:8\n\n\n\n\n\n\n\n\nmodm_platform_timer_8\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n8\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_8->modm_platform_timer",
            "title": "modm:platform:timer:8"
        },
        {
            "location": "/reference/module/modm-platform-timer-8/#modmplatformtimer8-timer-8-instance",
            "text": "",
            "title": "modm:platform:timer:8: Timer 8 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-8/#content",
            "text": "// Class  class   modm :: platform :: Timer8 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-8/#dependencies",
            "text": "modm:platform:timer:8     modm_platform_timer_8   modm:  platform:  timer:  8     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_8->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-timer-9/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:timer:9: Timer 9 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nTimer9\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:timer:9\n\n\n\n\n\n\n\n\nmodm_platform_timer_9\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer:\n\n\n9\n\n\n\n\n\n\n\n\nmodm_platform_timer\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_timer_9->modm_platform_timer",
            "title": "modm:platform:timer:9"
        },
        {
            "location": "/reference/module/modm-platform-timer-9/#modmplatformtimer9-timer-9-instance",
            "text": "",
            "title": "modm:platform:timer:9: Timer 9 instance"
        },
        {
            "location": "/reference/module/modm-platform-timer-9/#content",
            "text": "// Class  class   modm :: platform :: Timer9 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-timer-9/#dependencies",
            "text": "modm:platform:timer:9     modm_platform_timer_9   modm:  platform:  timer:  9     modm_platform_timer    modm:  platform:  timer       modm_platform_timer_9->modm_platform_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUart4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUart5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUart7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUart8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartBase\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartBaudrate\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartHal4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartHal5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartHal7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartHal8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsart1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsart2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsart3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsart6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsartHal1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsartHal2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsartHal3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsartHal6\n;\n\n\n\n// Define\n\n\n#define USART_BRR_DIV_FRACTION\n\n\n#define USART_BRR_DIV_MANTISSA\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\nmodm_architecture_atomic\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\natomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_architecture_atomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_interrupt\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ninterrupt\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_architecture_interrupt\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_uart\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_architecture_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi->modm_platform_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_1\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_1->modm_platform_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_2\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_2->modm_platform_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_3\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_3->modm_platform_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_4\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_4->modm_platform_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_5\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_5->modm_platform_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_6\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_6->modm_platform_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_7\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n7\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_7->modm_platform_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_8\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n8\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_8->modm_platform_uart",
            "title": "modm:platform:uart"
        },
        {
            "location": "/reference/module/modm-platform-uart/#modmplatformuart",
            "text": "",
            "title": "modm:platform:uart"
        },
        {
            "location": "/reference/module/modm-platform-uart/#content",
            "text": "// Class  class   modm :: platform :: Uart4 ;  class   modm :: platform :: Uart5 ;  class   modm :: platform :: Uart7 ;  class   modm :: platform :: Uart8 ;  class   modm :: platform :: UartBase ;  class   modm :: platform :: UartBaudrate ;  class   modm :: platform :: UartHal4 ;  class   modm :: platform :: UartHal5 ;  class   modm :: platform :: UartHal7 ;  class   modm :: platform :: UartHal8 ;  class   modm :: platform :: UartSpiMaster1 ;  class   modm :: platform :: UartSpiMaster2 ;  class   modm :: platform :: UartSpiMaster3 ;  class   modm :: platform :: UartSpiMaster6 ;  class   modm :: platform :: Usart1 ;  class   modm :: platform :: Usart2 ;  class   modm :: platform :: Usart3 ;  class   modm :: platform :: Usart6 ;  class   modm :: platform :: UsartHal1 ;  class   modm :: platform :: UsartHal2 ;  class   modm :: platform :: UsartHal3 ;  class   modm :: platform :: UsartHal6 ;  // Define  #define USART_BRR_DIV_FRACTION  #define USART_BRR_DIV_MANTISSA",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart/#dependencies",
            "text": "modm:platform:uart     modm_platform_uart   modm:  platform:  uart     modm_architecture_atomic    modm:  architecture:  atomic       modm_platform_uart->modm_architecture_atomic       modm_architecture_interrupt    modm:  architecture:  interrupt       modm_platform_uart->modm_architecture_interrupt       modm_architecture_register    modm:  architecture:  register       modm_platform_uart->modm_architecture_register       modm_architecture_uart    modm:  architecture:  uart       modm_platform_uart->modm_architecture_uart       modm_cmsis_device    modm:  cmsis:  device       modm_platform_uart->modm_cmsis_device       modm_platform    modm:  platform       modm_platform_uart->modm_platform       modm_platform_gpio    modm:  platform:  gpio       modm_platform_uart->modm_platform_gpio       modm_platform_uart_spi    modm:  platform:  uart.spi       modm_platform_uart_spi->modm_platform_uart       modm_platform_uart_1    modm:  platform:  uart:  1       modm_platform_uart_1->modm_platform_uart       modm_platform_uart_2    modm:  platform:  uart:  2       modm_platform_uart_2->modm_platform_uart       modm_platform_uart_3    modm:  platform:  uart:  3       modm_platform_uart_3->modm_platform_uart       modm_platform_uart_4    modm:  platform:  uart:  4       modm_platform_uart_4->modm_platform_uart       modm_platform_uart_5    modm:  platform:  uart:  5       modm_platform_uart_5->modm_platform_uart       modm_platform_uart_6    modm:  platform:  uart:  6       modm_platform_uart_6->modm_platform_uart       modm_platform_uart_7    modm:  platform:  uart:  7       modm_platform_uart_7->modm_platform_uart       modm_platform_uart_8    modm:  platform:  uart:  8       modm_platform_uart_8->modm_platform_uart",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart.spi\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster6\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart.spi\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_cmsis_device\n\n\n\n\n\n\nmodm:\n\n\ncmsis:\n\n\ndevice\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi->modm_cmsis_device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform\n\n\n\n\n\n\nmodm:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi->modm_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi->modm_platform_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_1\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi:\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_1->modm_platform_uart_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_2\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi:\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_2->modm_platform_uart_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_3\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi:\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_3->modm_platform_uart_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_6\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi:\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_6->modm_platform_uart_spi",
            "title": "modm:platform:uart.spi"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi/#modmplatformuartspi",
            "text": "",
            "title": "modm:platform:uart.spi"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi/#content",
            "text": "// Class  class   modm :: platform :: UartSpiMaster1 ;  class   modm :: platform :: UartSpiMaster2 ;  class   modm :: platform :: UartSpiMaster3 ;  class   modm :: platform :: UartSpiMaster6 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi/#dependencies",
            "text": "modm:platform:uart.spi     modm_platform_uart_spi   modm:  platform:  uart.spi     modm_architecture_spi    modm:  architecture:  spi       modm_platform_uart_spi->modm_architecture_spi       modm_cmsis_device    modm:  cmsis:  device       modm_platform_uart_spi->modm_cmsis_device       modm_platform    modm:  platform       modm_platform_uart_spi->modm_platform       modm_platform_gpio    modm:  platform:  gpio       modm_platform_uart_spi->modm_platform_gpio       modm_platform_uart    modm:  platform:  uart       modm_platform_uart_spi->modm_platform_uart       modm_platform_uart_spi_1    modm:  platform:  uart.spi:  1       modm_platform_uart_spi_1->modm_platform_uart_spi       modm_platform_uart_spi_2    modm:  platform:  uart.spi:  2       modm_platform_uart_spi_2->modm_platform_uart_spi       modm_platform_uart_spi_3    modm:  platform:  uart.spi:  3       modm_platform_uart_spi_3->modm_platform_uart_spi       modm_platform_uart_spi_6    modm:  platform:  uart.spi:  6       modm_platform_uart_spi_6->modm_platform_uart_spi",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-1/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart.spi:1: SPI in UART mode 1 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster1\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart.spi:1\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_1\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi:\n\n\n1\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_1->modm_platform_uart_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_1\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_1->modm_platform_uart_1",
            "title": "modm:platform:uart.spi:1"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-1/#modmplatformuartspi1-spi-in-uart-mode-1-instance",
            "text": "",
            "title": "modm:platform:uart.spi:1: SPI in UART mode 1 instance"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-1/#content",
            "text": "// Class  class   modm :: platform :: UartSpiMaster1 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-1/#dependencies",
            "text": "modm:platform:uart.spi:1     modm_platform_uart_spi_1   modm:  platform:  uart.spi:  1     modm_platform_uart_spi    modm:  platform:  uart.spi       modm_platform_uart_spi_1->modm_platform_uart_spi       modm_platform_uart_1    modm:  platform:  uart:  1       modm_platform_uart_spi_1->modm_platform_uart_1",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-2/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart.spi:2: SPI in UART mode 2 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster2\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart.spi:2\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_2\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi:\n\n\n2\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_2->modm_platform_uart_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_2\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_2->modm_platform_uart_2",
            "title": "modm:platform:uart.spi:2"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-2/#modmplatformuartspi2-spi-in-uart-mode-2-instance",
            "text": "",
            "title": "modm:platform:uart.spi:2: SPI in UART mode 2 instance"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-2/#content",
            "text": "// Class  class   modm :: platform :: UartSpiMaster2 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-2/#dependencies",
            "text": "modm:platform:uart.spi:2     modm_platform_uart_spi_2   modm:  platform:  uart.spi:  2     modm_platform_uart_spi    modm:  platform:  uart.spi       modm_platform_uart_spi_2->modm_platform_uart_spi       modm_platform_uart_2    modm:  platform:  uart:  2       modm_platform_uart_spi_2->modm_platform_uart_2",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-3/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart.spi:3: SPI in UART mode 3 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster3\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart.spi:3\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_3\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi:\n\n\n3\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_3->modm_platform_uart_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_3\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_3->modm_platform_uart_3",
            "title": "modm:platform:uart.spi:3"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-3/#modmplatformuartspi3-spi-in-uart-mode-3-instance",
            "text": "",
            "title": "modm:platform:uart.spi:3: SPI in UART mode 3 instance"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-3/#content",
            "text": "// Class  class   modm :: platform :: UartSpiMaster3 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-3/#dependencies",
            "text": "modm:platform:uart.spi:3     modm_platform_uart_spi_3   modm:  platform:  uart.spi:  3     modm_platform_uart_spi    modm:  platform:  uart.spi       modm_platform_uart_spi_3->modm_platform_uart_spi       modm_platform_uart_3    modm:  platform:  uart:  3       modm_platform_uart_spi_3->modm_platform_uart_3",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-6/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart.spi:6: SPI in UART mode 6 instance\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartSpiMaster6\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart.spi:6\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_6\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi:\n\n\n6\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_6->modm_platform_uart_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_6\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_6->modm_platform_uart_6",
            "title": "modm:platform:uart.spi:6"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-6/#modmplatformuartspi6-spi-in-uart-mode-6-instance",
            "text": "",
            "title": "modm:platform:uart.spi:6: SPI in UART mode 6 instance"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-6/#content",
            "text": "// Class  class   modm :: platform :: UartSpiMaster6 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart-spi-6/#dependencies",
            "text": "modm:platform:uart.spi:6     modm_platform_uart_spi_6   modm:  platform:  uart.spi:  6     modm_platform_uart_spi    modm:  platform:  uart.spi       modm_platform_uart_spi_6->modm_platform_uart_spi       modm_platform_uart_6    modm:  platform:  uart:  6       modm_platform_uart_spi_6->modm_platform_uart_6",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart-1/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart:1: UART 1 instance\n\u00b6\n\n\nOptions\n\u00b6\n\n\nbuffered\n\u00b6\n\n\nDefault: \nTrue\n \u2208 \n{ True, False }\n\n\nbuffer.tx\n\u00b6\n\n\nDefault: \n250\n \u2208 \n{ 1 ... 65534 }\n\n\nbuffer.rx\n\u00b6\n\n\nDefault: \n16\n \u2208 \n{ 1 ... 65534 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsart1\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsartHal1\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart:1\n\n\n\n\n\n\n\n\nmodm_platform_uart_1\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n1\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_1->modm_platform_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_1\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi:\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_1->modm_platform_uart_1",
            "title": "modm:platform:uart:1"
        },
        {
            "location": "/reference/module/modm-platform-uart-1/#modmplatformuart1-uart-1-instance",
            "text": "",
            "title": "modm:platform:uart:1: UART 1 instance"
        },
        {
            "location": "/reference/module/modm-platform-uart-1/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-uart-1/#buffered",
            "text": "Default:  True  \u2208  { True, False }",
            "title": "buffered"
        },
        {
            "location": "/reference/module/modm-platform-uart-1/#buffertx",
            "text": "Default:  250  \u2208  { 1 ... 65534 }",
            "title": "buffer.tx"
        },
        {
            "location": "/reference/module/modm-platform-uart-1/#bufferrx",
            "text": "Default:  16  \u2208  { 1 ... 65534 }",
            "title": "buffer.rx"
        },
        {
            "location": "/reference/module/modm-platform-uart-1/#content",
            "text": "// Class  class   modm :: platform :: Usart1 ;  class   modm :: platform :: UsartHal1 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart-1/#dependencies",
            "text": "modm:platform:uart:1     modm_platform_uart_1   modm:  platform:  uart:  1     modm_platform_uart    modm:  platform:  uart       modm_platform_uart_1->modm_platform_uart       modm_platform_uart_spi_1    modm:  platform:  uart.spi:  1       modm_platform_uart_spi_1->modm_platform_uart_1",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart-2/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart:2: UART 2 instance\n\u00b6\n\n\nOptions\n\u00b6\n\n\nbuffered\n\u00b6\n\n\nDefault: \nTrue\n \u2208 \n{ True, False }\n\n\nbuffer.tx\n\u00b6\n\n\nDefault: \n250\n \u2208 \n{ 1 ... 65534 }\n\n\nbuffer.rx\n\u00b6\n\n\nDefault: \n16\n \u2208 \n{ 1 ... 65534 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsart2\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsartHal2\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart:2\n\n\n\n\n\n\n\n\nmodm_platform_uart_2\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n2\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_2->modm_platform_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_2\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi:\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_2->modm_platform_uart_2",
            "title": "modm:platform:uart:2"
        },
        {
            "location": "/reference/module/modm-platform-uart-2/#modmplatformuart2-uart-2-instance",
            "text": "",
            "title": "modm:platform:uart:2: UART 2 instance"
        },
        {
            "location": "/reference/module/modm-platform-uart-2/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-uart-2/#buffered",
            "text": "Default:  True  \u2208  { True, False }",
            "title": "buffered"
        },
        {
            "location": "/reference/module/modm-platform-uart-2/#buffertx",
            "text": "Default:  250  \u2208  { 1 ... 65534 }",
            "title": "buffer.tx"
        },
        {
            "location": "/reference/module/modm-platform-uart-2/#bufferrx",
            "text": "Default:  16  \u2208  { 1 ... 65534 }",
            "title": "buffer.rx"
        },
        {
            "location": "/reference/module/modm-platform-uart-2/#content",
            "text": "// Class  class   modm :: platform :: Usart2 ;  class   modm :: platform :: UsartHal2 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart-2/#dependencies",
            "text": "modm:platform:uart:2     modm_platform_uart_2   modm:  platform:  uart:  2     modm_platform_uart    modm:  platform:  uart       modm_platform_uart_2->modm_platform_uart       modm_platform_uart_spi_2    modm:  platform:  uart.spi:  2       modm_platform_uart_spi_2->modm_platform_uart_2",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart-3/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart:3: UART 3 instance\n\u00b6\n\n\nOptions\n\u00b6\n\n\nbuffered\n\u00b6\n\n\nDefault: \nTrue\n \u2208 \n{ True, False }\n\n\nbuffer.tx\n\u00b6\n\n\nDefault: \n2048\n \u2208 \n{ 1 ... 65534 }\n\n\nbuffer.rx\n\u00b6\n\n\nDefault: \n16\n \u2208 \n{ 1 ... 65534 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsart3\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsartHal3\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart:3\n\n\n\n\n\n\n\n\nmodm_platform_uart_3\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n3\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_3->modm_platform_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni\n\n\n\n\n\n\nmodm:\n\n\nboard:\n\n\ndisco-f469ni\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_platform_uart_3\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_3\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi:\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_3->modm_platform_uart_3",
            "title": "modm:platform:uart:3"
        },
        {
            "location": "/reference/module/modm-platform-uart-3/#modmplatformuart3-uart-3-instance",
            "text": "",
            "title": "modm:platform:uart:3: UART 3 instance"
        },
        {
            "location": "/reference/module/modm-platform-uart-3/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-uart-3/#buffered",
            "text": "Default:  True  \u2208  { True, False }",
            "title": "buffered"
        },
        {
            "location": "/reference/module/modm-platform-uart-3/#buffertx",
            "text": "Default:  2048  \u2208  { 1 ... 65534 }",
            "title": "buffer.tx"
        },
        {
            "location": "/reference/module/modm-platform-uart-3/#bufferrx",
            "text": "Default:  16  \u2208  { 1 ... 65534 }",
            "title": "buffer.rx"
        },
        {
            "location": "/reference/module/modm-platform-uart-3/#content",
            "text": "// Class  class   modm :: platform :: Usart3 ;  class   modm :: platform :: UsartHal3 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart-3/#dependencies",
            "text": "modm:platform:uart:3     modm_platform_uart_3   modm:  platform:  uart:  3     modm_platform_uart    modm:  platform:  uart       modm_platform_uart_3->modm_platform_uart       modm_board_disco-f469ni    modm:  board:  disco-f469ni       modm_board_disco-f469ni->modm_platform_uart_3       modm_platform_uart_spi_3    modm:  platform:  uart.spi:  3       modm_platform_uart_spi_3->modm_platform_uart_3",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart-4/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart:4: UART 4 instance\n\u00b6\n\n\nOptions\n\u00b6\n\n\nbuffered\n\u00b6\n\n\nDefault: \nTrue\n \u2208 \n{ True, False }\n\n\nbuffer.tx\n\u00b6\n\n\nDefault: \n250\n \u2208 \n{ 1 ... 65534 }\n\n\nbuffer.rx\n\u00b6\n\n\nDefault: \n16\n \u2208 \n{ 1 ... 65534 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUart4\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartHal4\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart:4\n\n\n\n\n\n\n\n\nmodm_platform_uart_4\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n4\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_4->modm_platform_uart",
            "title": "modm:platform:uart:4"
        },
        {
            "location": "/reference/module/modm-platform-uart-4/#modmplatformuart4-uart-4-instance",
            "text": "",
            "title": "modm:platform:uart:4: UART 4 instance"
        },
        {
            "location": "/reference/module/modm-platform-uart-4/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-uart-4/#buffered",
            "text": "Default:  True  \u2208  { True, False }",
            "title": "buffered"
        },
        {
            "location": "/reference/module/modm-platform-uart-4/#buffertx",
            "text": "Default:  250  \u2208  { 1 ... 65534 }",
            "title": "buffer.tx"
        },
        {
            "location": "/reference/module/modm-platform-uart-4/#bufferrx",
            "text": "Default:  16  \u2208  { 1 ... 65534 }",
            "title": "buffer.rx"
        },
        {
            "location": "/reference/module/modm-platform-uart-4/#content",
            "text": "// Class  class   modm :: platform :: Uart4 ;  class   modm :: platform :: UartHal4 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart-4/#dependencies",
            "text": "modm:platform:uart:4     modm_platform_uart_4   modm:  platform:  uart:  4     modm_platform_uart    modm:  platform:  uart       modm_platform_uart_4->modm_platform_uart",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart-5/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart:5: UART 5 instance\n\u00b6\n\n\nOptions\n\u00b6\n\n\nbuffered\n\u00b6\n\n\nDefault: \nTrue\n \u2208 \n{ True, False }\n\n\nbuffer.tx\n\u00b6\n\n\nDefault: \n250\n \u2208 \n{ 1 ... 65534 }\n\n\nbuffer.rx\n\u00b6\n\n\nDefault: \n16\n \u2208 \n{ 1 ... 65534 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUart5\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartHal5\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart:5\n\n\n\n\n\n\n\n\nmodm_platform_uart_5\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n5\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_5->modm_platform_uart",
            "title": "modm:platform:uart:5"
        },
        {
            "location": "/reference/module/modm-platform-uart-5/#modmplatformuart5-uart-5-instance",
            "text": "",
            "title": "modm:platform:uart:5: UART 5 instance"
        },
        {
            "location": "/reference/module/modm-platform-uart-5/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-uart-5/#buffered",
            "text": "Default:  True  \u2208  { True, False }",
            "title": "buffered"
        },
        {
            "location": "/reference/module/modm-platform-uart-5/#buffertx",
            "text": "Default:  250  \u2208  { 1 ... 65534 }",
            "title": "buffer.tx"
        },
        {
            "location": "/reference/module/modm-platform-uart-5/#bufferrx",
            "text": "Default:  16  \u2208  { 1 ... 65534 }",
            "title": "buffer.rx"
        },
        {
            "location": "/reference/module/modm-platform-uart-5/#content",
            "text": "// Class  class   modm :: platform :: Uart5 ;  class   modm :: platform :: UartHal5 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart-5/#dependencies",
            "text": "modm:platform:uart:5     modm_platform_uart_5   modm:  platform:  uart:  5     modm_platform_uart    modm:  platform:  uart       modm_platform_uart_5->modm_platform_uart",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart-6/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart:6: UART 6 instance\n\u00b6\n\n\nOptions\n\u00b6\n\n\nbuffered\n\u00b6\n\n\nDefault: \nTrue\n \u2208 \n{ True, False }\n\n\nbuffer.tx\n\u00b6\n\n\nDefault: \n250\n \u2208 \n{ 1 ... 65534 }\n\n\nbuffer.rx\n\u00b6\n\n\nDefault: \n16\n \u2208 \n{ 1 ... 65534 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsart6\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUsartHal6\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart:6\n\n\n\n\n\n\n\n\nmodm_platform_uart_6\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n6\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_6->modm_platform_uart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_6\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart.spi:\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_spi_6->modm_platform_uart_6",
            "title": "modm:platform:uart:6"
        },
        {
            "location": "/reference/module/modm-platform-uart-6/#modmplatformuart6-uart-6-instance",
            "text": "",
            "title": "modm:platform:uart:6: UART 6 instance"
        },
        {
            "location": "/reference/module/modm-platform-uart-6/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-uart-6/#buffered",
            "text": "Default:  True  \u2208  { True, False }",
            "title": "buffered"
        },
        {
            "location": "/reference/module/modm-platform-uart-6/#buffertx",
            "text": "Default:  250  \u2208  { 1 ... 65534 }",
            "title": "buffer.tx"
        },
        {
            "location": "/reference/module/modm-platform-uart-6/#bufferrx",
            "text": "Default:  16  \u2208  { 1 ... 65534 }",
            "title": "buffer.rx"
        },
        {
            "location": "/reference/module/modm-platform-uart-6/#content",
            "text": "// Class  class   modm :: platform :: Usart6 ;  class   modm :: platform :: UsartHal6 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart-6/#dependencies",
            "text": "modm:platform:uart:6     modm_platform_uart_6   modm:  platform:  uart:  6     modm_platform_uart    modm:  platform:  uart       modm_platform_uart_6->modm_platform_uart       modm_platform_uart_spi_6    modm:  platform:  uart.spi:  6       modm_platform_uart_spi_6->modm_platform_uart_6",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart-7/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart:7: UART 7 instance\n\u00b6\n\n\nOptions\n\u00b6\n\n\nbuffered\n\u00b6\n\n\nDefault: \nTrue\n \u2208 \n{ True, False }\n\n\nbuffer.tx\n\u00b6\n\n\nDefault: \n250\n \u2208 \n{ 1 ... 65534 }\n\n\nbuffer.rx\n\u00b6\n\n\nDefault: \n16\n \u2208 \n{ 1 ... 65534 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUart7\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartHal7\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart:7\n\n\n\n\n\n\n\n\nmodm_platform_uart_7\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n7\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_7->modm_platform_uart",
            "title": "modm:platform:uart:7"
        },
        {
            "location": "/reference/module/modm-platform-uart-7/#modmplatformuart7-uart-7-instance",
            "text": "",
            "title": "modm:platform:uart:7: UART 7 instance"
        },
        {
            "location": "/reference/module/modm-platform-uart-7/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-uart-7/#buffered",
            "text": "Default:  True  \u2208  { True, False }",
            "title": "buffered"
        },
        {
            "location": "/reference/module/modm-platform-uart-7/#buffertx",
            "text": "Default:  250  \u2208  { 1 ... 65534 }",
            "title": "buffer.tx"
        },
        {
            "location": "/reference/module/modm-platform-uart-7/#bufferrx",
            "text": "Default:  16  \u2208  { 1 ... 65534 }",
            "title": "buffer.rx"
        },
        {
            "location": "/reference/module/modm-platform-uart-7/#content",
            "text": "// Class  class   modm :: platform :: Uart7 ;  class   modm :: platform :: UartHal7 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart-7/#dependencies",
            "text": "modm:platform:uart:7     modm_platform_uart_7   modm:  platform:  uart:  7     modm_platform_uart    modm:  platform:  uart       modm_platform_uart_7->modm_platform_uart",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-platform-uart-8/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:platform:uart:8: UART 8 instance\n\u00b6\n\n\nOptions\n\u00b6\n\n\nbuffered\n\u00b6\n\n\nDefault: \nTrue\n \u2208 \n{ True, False }\n\n\nbuffer.tx\n\u00b6\n\n\nDefault: \n250\n \u2208 \n{ 1 ... 65534 }\n\n\nbuffer.rx\n\u00b6\n\n\nDefault: \n16\n \u2208 \n{ 1 ... 65534 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nplatform\n::\nUart8\n;\n\n\nclass\n \nmodm\n::\nplatform\n::\nUartHal8\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:platform:uart:8\n\n\n\n\n\n\n\n\nmodm_platform_uart_8\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart:\n\n\n8\n\n\n\n\n\n\n\n\nmodm_platform_uart\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nuart\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_uart_8->modm_platform_uart",
            "title": "modm:platform:uart:8"
        },
        {
            "location": "/reference/module/modm-platform-uart-8/#modmplatformuart8-uart-8-instance",
            "text": "",
            "title": "modm:platform:uart:8: UART 8 instance"
        },
        {
            "location": "/reference/module/modm-platform-uart-8/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-platform-uart-8/#buffered",
            "text": "Default:  True  \u2208  { True, False }",
            "title": "buffered"
        },
        {
            "location": "/reference/module/modm-platform-uart-8/#buffertx",
            "text": "Default:  250  \u2208  { 1 ... 65534 }",
            "title": "buffer.tx"
        },
        {
            "location": "/reference/module/modm-platform-uart-8/#bufferrx",
            "text": "Default:  16  \u2208  { 1 ... 65534 }",
            "title": "buffer.rx"
        },
        {
            "location": "/reference/module/modm-platform-uart-8/#content",
            "text": "// Class  class   modm :: platform :: Uart8 ;  class   modm :: platform :: UartHal8 ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-platform-uart-8/#dependencies",
            "text": "modm:platform:uart:8     modm_platform_uart_8   modm:  platform:  uart:  8     modm_platform_uart    modm:  platform:  uart       modm_platform_uart_8->modm_platform_uart",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-processing/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:processing\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nGenericPeriodicTimer\n<\n \nclass\n \nClock\n,\n \ntypename\n \nTimestampType\n=\nmodm\n::\nTimestamp\n \n>\n;\n\n\nclass\n \nmodm\n::\nGenericTimeout\n<\n \nclass\n \nClock\n,\n \nclass\n \nTimestampType\n=\nmodm\n::\nTimestamp\n \n>\n;\n\n\nclass\n \nmodm\n::\nGenericTimestamp\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nNestedResumable\n<\n \nuint8_t\n \nLevels\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nResumable\n<\n \nuint8_t\n \nFunctions\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nScheduler\n::\nTask\n;\n\n\nclass\n \nmodm\n::\nScheduler\n;\n\n\nclass\n \nmodm\n::\nTask\n;\n\n\nclass\n \nmodm\n::\npt\n::\nProtothread\n;\n\n\nclass\n \nmodm\n::\npt\n::\nSemaphore\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nBinarySemaphore\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nMutex\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nMutexGuard\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nQueue\n<\n \ntypename\n \nT\n  \n>\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nQueueBase\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nScheduler\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nSemaphore\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nSemaphoreBase\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nThread\n::\nLock\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nThread\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nResumableResult\n<\n \ntypename\n \nT\n \n>\n;\n\n\nstruct\n \nmodm\n::\nScheduler\n::\nTaskListItem\n;\n\n\n\n// Function\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nGenericTimestamp\n<\n \nT\n \n>\n \n&\nt\n);\n\n\n\n// Enum\n\n\nenum\n \nclass\n \nPeriodicTimerState\n;\n\n\nenum\n \nclass\n \nTimeoutState\n;\n\n\n\n// Typedef\n\n\nusing\n \nmodm\n::\nPeriodicTimer\n \n=\n \ntypedef\n \nGenericPeriodicTimer\n<\n \n::\nmodm\n::\nClock\n,\n \nTimestamp\n>\n;\n\n\nusing\n \nmodm\n::\nShortPeriodicTimer\n \n=\n \ntypedef\n \nGenericPeriodicTimer\n<\n \n::\nmodm\n::\nClock\n,\n \nShortTimestamp\n>\n;\n\n\nusing\n \nmodm\n::\nShortTimeout\n \n=\n \ntypedef\n \nGenericTimeout\n<\n \n::\nmodm\n::\nClock\n,\n \nShortTimestamp\n>\n;\n\n\nusing\n \nmodm\n::\nShortTimestamp\n \n=\n \ntypedef\n \nGenericTimestamp\n<\nuint16_t\n>\n;\n\n\nusing\n \nmodm\n::\nTimeout\n \n=\n \ntypedef\n \nGenericTimeout\n<\n \n::\nmodm\n::\nClock\n,\n \nTimestamp\n>\n;\n\n\nusing\n \nmodm\n::\nTimestamp\n \n=\n \ntypedef\n \nGenericTimestamp\n<\nuint32_t\n>\n;\n\n\n\n// Define\n\n\n#define MILLISECONDS\n\n\n#define MODM_RESUMABLE_MODULE_NAME\n\n\n#define PT_BEGIN\n\n\n#define PT_CALL(resumable)\n\n\n#define PT_END\n\n\n#define PT_EXIT\n\n\n#define PT_RESTART\n\n\n#define PT_SPAWN(child)\n\n\n#define PT_WAIT_THREAD(child)\n\n\n#define PT_WAIT_UNTIL(condition)\n\n\n#define PT_WAIT_WHILE(condition)\n\n\n#define PT_YIELD\n\n\n#define RF_BEGIN\n\n\n#define RF_BEGIN(index)\n\n\n#define RF_CALL(resumable)\n\n\n#define RF_CALL_BLOCKING(resumable)\n\n\n#define RF_END\n\n\n#define RF_END_RETURN(result)\n\n\n#define RF_END_RETURN_CALL(resumable)\n\n\n#define RF_RETURN\n\n\n#define RF_RETURN(result)\n\n\n#define RF_RETURN_CALL(resumable)\n\n\n#define RF_WAIT_THREAD(child)\n\n\n#define RF_WAIT_UNTIL(condition)\n\n\n#define RF_WAIT_WHILE(condition)\n\n\n#define RF_YIELD\n\n\n#define TIME_LOOP(frequency)\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:processing\n\n\n\n\n\n\n\n\nmodm_processing\n\n\n\n\nmodm:\n\n\nprocessing\n\n\n\n\n\n\n\n\nmodm_processing_protothread\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nprotothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_protothread->modm_processing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable->modm_processing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_rtos\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nrtos\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_rtos->modm_processing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_scheduler\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nscheduler\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_scheduler->modm_processing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer->modm_processing",
            "title": "modm:processing"
        },
        {
            "location": "/reference/module/modm-processing/#modmprocessing",
            "text": "",
            "title": "modm:processing"
        },
        {
            "location": "/reference/module/modm-processing/#content",
            "text": "// Class  class   modm :: GenericPeriodicTimer <   class   Clock ,   typename   TimestampType = modm :: Timestamp   > ;  class   modm :: GenericTimeout <   class   Clock ,   class   TimestampType = modm :: Timestamp   > ;  class   modm :: GenericTimestamp <   typename   T   > ;  class   modm :: NestedResumable <   uint8_t   Levels = 1   > ;  class   modm :: Resumable <   uint8_t   Functions = 1   > ;  class   modm :: Scheduler :: Task ;  class   modm :: Scheduler ;  class   modm :: Task ;  class   modm :: pt :: Protothread ;  class   modm :: pt :: Semaphore ;  class   modm :: rtos :: BinarySemaphore ;  class   modm :: rtos :: Mutex ;  class   modm :: rtos :: MutexGuard ;  class   modm :: rtos :: Queue <   typename   T    > ;  class   modm :: rtos :: QueueBase ;  class   modm :: rtos :: Scheduler ;  class   modm :: rtos :: Semaphore ;  class   modm :: rtos :: SemaphoreBase ;  class   modm :: rtos :: Thread :: Lock ;  class   modm :: rtos :: Thread ;  // Struct  struct   modm :: ResumableResult <   typename   T   > ;  struct   modm :: Scheduler :: TaskListItem ;  // Function  IOStream &   modm :: operator << ( IOStream   & os ,   const   GenericTimestamp <   T   >   & t );  // Enum  enum   class   PeriodicTimerState ;  enum   class   TimeoutState ;  // Typedef  using   modm :: PeriodicTimer   =   typedef   GenericPeriodicTimer <   :: modm :: Clock ,   Timestamp > ;  using   modm :: ShortPeriodicTimer   =   typedef   GenericPeriodicTimer <   :: modm :: Clock ,   ShortTimestamp > ;  using   modm :: ShortTimeout   =   typedef   GenericTimeout <   :: modm :: Clock ,   ShortTimestamp > ;  using   modm :: ShortTimestamp   =   typedef   GenericTimestamp < uint16_t > ;  using   modm :: Timeout   =   typedef   GenericTimeout <   :: modm :: Clock ,   Timestamp > ;  using   modm :: Timestamp   =   typedef   GenericTimestamp < uint32_t > ;  // Define  #define MILLISECONDS  #define MODM_RESUMABLE_MODULE_NAME  #define PT_BEGIN  #define PT_CALL(resumable)  #define PT_END  #define PT_EXIT  #define PT_RESTART  #define PT_SPAWN(child)  #define PT_WAIT_THREAD(child)  #define PT_WAIT_UNTIL(condition)  #define PT_WAIT_WHILE(condition)  #define PT_YIELD  #define RF_BEGIN  #define RF_BEGIN(index)  #define RF_CALL(resumable)  #define RF_CALL_BLOCKING(resumable)  #define RF_END  #define RF_END_RETURN(result)  #define RF_END_RETURN_CALL(resumable)  #define RF_RETURN  #define RF_RETURN(result)  #define RF_RETURN_CALL(resumable)  #define RF_WAIT_THREAD(child)  #define RF_WAIT_UNTIL(condition)  #define RF_WAIT_WHILE(condition)  #define RF_YIELD  #define TIME_LOOP(frequency)",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-processing/#dependencies",
            "text": "modm:processing     modm_processing   modm:  processing     modm_processing_protothread    modm:  processing:  protothread       modm_processing_protothread->modm_processing       modm_processing_resumable    modm:  processing:  resumable       modm_processing_resumable->modm_processing       modm_processing_rtos    modm:  processing:  rtos       modm_processing_rtos->modm_processing       modm_processing_scheduler    modm:  processing:  scheduler       modm_processing_scheduler->modm_processing       modm_processing_timer    modm:  processing:  timer       modm_processing_timer->modm_processing",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-processing-protothread/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:processing:protothread\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\npt\n::\nProtothread\n;\n\n\nclass\n \nmodm\n::\npt\n::\nSemaphore\n;\n\n\n\n// Define\n\n\n#define PT_BEGIN\n\n\n#define PT_CALL(resumable)\n\n\n#define PT_END\n\n\n#define PT_EXIT\n\n\n#define PT_RESTART\n\n\n#define PT_SPAWN(child)\n\n\n#define PT_WAIT_THREAD(child)\n\n\n#define PT_WAIT_UNTIL(condition)\n\n\n#define PT_WAIT_WHILE(condition)\n\n\n#define PT_YIELD\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:processing:protothread\n\n\n\n\n\n\n\n\nmodm_processing_protothread\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nprotothread\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_protothread->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing\n\n\n\n\n\n\nmodm:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_protothread->modm_processing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbme280\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_processing_protothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbmp085\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085->modm_processing_protothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nds1631\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ds1631->modm_processing_protothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhmc6343\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hmc6343->modm_processing_protothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntmp102\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp102->modm_processing_protothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntmp175\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tmp175->modm_processing_protothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl6180\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_processing_protothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_processing_protothread",
            "title": "modm:processing:protothread"
        },
        {
            "location": "/reference/module/modm-processing-protothread/#modmprocessingprotothread",
            "text": "",
            "title": "modm:processing:protothread"
        },
        {
            "location": "/reference/module/modm-processing-protothread/#content",
            "text": "// Class  class   modm :: pt :: Protothread ;  class   modm :: pt :: Semaphore ;  // Define  #define PT_BEGIN  #define PT_CALL(resumable)  #define PT_END  #define PT_EXIT  #define PT_RESTART  #define PT_SPAWN(child)  #define PT_WAIT_THREAD(child)  #define PT_WAIT_UNTIL(condition)  #define PT_WAIT_WHILE(condition)  #define PT_YIELD",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-processing-protothread/#dependencies",
            "text": "modm:processing:protothread     modm_processing_protothread   modm:  processing:  protothread     modm_architecture    modm:  architecture       modm_processing_protothread->modm_architecture       modm_processing    modm:  processing       modm_processing_protothread->modm_processing       modm_driver_bme280    modm:  driver:  bme280       modm_driver_bme280->modm_processing_protothread       modm_driver_bmp085    modm:  driver:  bmp085       modm_driver_bmp085->modm_processing_protothread       modm_driver_ds1631    modm:  driver:  ds1631       modm_driver_ds1631->modm_processing_protothread       modm_driver_hmc6343    modm:  driver:  hmc6343       modm_driver_hmc6343->modm_processing_protothread       modm_driver_tmp102    modm:  driver:  tmp102       modm_driver_tmp102->modm_processing_protothread       modm_driver_tmp175    modm:  driver:  tmp175       modm_driver_tmp175->modm_processing_protothread       modm_driver_vl6180    modm:  driver:  vl6180       modm_driver_vl6180->modm_processing_protothread       modm_test_processing    modm:  test:  processing       modm_test_processing->modm_processing_protothread",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-processing-resumable/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:processing:resumable: Resumable Functions\n\u00b6\n\n\nAn implementation of lightweight resumable functions which allow for nested calling.\n\n\nThis base class and its macros allows you to implement and use several\nresumable functions in one class.\nThis allows you to modularize your code by placing it into its own resumable functions\ninstead of the placing everything into one big method.\nIt also allows you to call and run resumable functions within your resumables,\nso you can reuse their functionality.\n\n\nNote that you should call resumable functions within a protothreads, with the\n\nPT_CALL(group.resumable())\n macro, which will return the result of the \nresumable function. To call a resumable function inside another resumable\nfunction, use the \nRF_CALL(group.resumable())\n.\n\n\nYou may use the \nRF_CALL_BLOCKING(group.resumable())\n macro to execute\na resumable function outside of a protothread, however, this which will\nforce the CPU to busy-wait until the resumable function ended.\n\n\n\n\nResumable functions are not thread-safe!\n\n\nUse an external mutex to arbitrate access if two Protothreads access the\nsame resumable function.\n\n\n\n\nYou can either run your group of resumable functions independently from each\nother, or only run one function at a time, but it may nest calls to its own \ngroup's functions.\nSo you need to inherit your group from \nmodm::Resumable<#Functions>\n, and from\n\nmodm::NestedResumable<#Functions>\n respectively.\n\n\nIndependent operation\n\u00b6\n\n\nYou must begin each resumable function using \nRF_BEGIN(index)\n where \nindex\n is\nthe unique index of your resumable function starting at zero.\nYou may exit and return a value by using \nRF_RETURN(value)\n or\nreturn the result of another resumable function using \nRF_RETURN_CALL(resumable())\n.\nThis return value is wrapped in a \nmodm::ResumableResult<Type>\n struct\nand transparently returned by the \nRF_CALL\n macro so it can be used\nto influence your program flow.\nIf the resumable function reaches \nRF_END()\n it will exit automatically,\nwith the result of \n0\n cast to the return type.\nShould you wish to return a value at the end, you may use\n\nRF_END_RETURN(value)\n.\nYou may also return the result of another resumable function using\n\nRF_END_RETURN_CALL(resumable())\n.\n\n\nBe aware that this class keeps a separate state for each of your resumable functions.\nThis allows each resumable function to be run at the same time.\nThis might require the use of an internal semaphore or mutex if such\ndependencies exist in your use case.\nTake a look at the \nNestedResumable\n class for mutually exclusive resumable functions,\nwhich also require a little less memory.\n\n\nNested operation\n\u00b6\n\n\nYou are responsible to choosing the right nesting depth!\nThis class will guard itself against calling another resumable function at too\ndeep a nesting level and fail the \nresumable.begin.nesting\n assertion!\nIt is then up to you to recognize this in your program design\nand increase the nesting depth or rethink your code.\n\n\nThe resumable functions of this class are mutually exclusive, so only one\nresumable function of the same object can run at the same time. Even if you\ncall another resumable function, it will simply return \nmodm::rf::WrongState\n.\nUsing the \nRF_CALL(resumable())\n macro, you can wait for these\nresumable functions to become available and then run them, so you usually do\nnot need to worry about those cases.\n\n\nYou must begin each resumable function using \nRF_BEGIN()\n.\nYou may exit and return a value by using \nRF_RETURN(value)\n or\nreturn the result of another resumable function using \nRF_RETURN_CALL(resumable())\n.\nThis return value is wrapped in a \nmodm::ResumableResult<Type>\n struct\nand transparently returned by the \nRF_CALL\n macro so it can be used\nto influence your program flow.\nIf the resumable function reaches \nRF_END()\n it will exit automatically,\nwith the result of \n0\n cast to the return type.\nShould you wish to return a value at the end, you may use\n\nRF_END_RETURN(value)\n.\nYou may also return the result of another resumable function using\n\nRF_END_RETURN_CALL(resumable())\n.\n\n\nExample\n\u00b6\n\n\nHere is a (slightly over-engineered) example:\n\n\n#include\n \n<modm/platform/platform.hpp>\n\n\n#include\n \n<modm/processing/processing.hpp>\n\n\n\nusing\n \nLed\n \n=\n \nGpioOutputB0\n;\n\n\n\nclass\n \nBlinkingLight\n \n:\n \npublic\n \nmodm\n::\npt\n::\nProtothread\n,\n \nprivate\n \nmodm\n::\nNestedResumable\n<\n2\n>\n\n\n{\n\n\npublic\n:\n\n    \nbool\n\n    \nrun\n()\n\n    \n{\n\n        \nPT_BEGIN\n();\n\n\n        \n// set everything up\n\n        \nLed\n::\nsetOutput\n();\n\n        \nLed\n::\nset\n();\n\n\n        \nwhile\n \n(\ntrue\n)\n\n        \n{\n\n            \nLed\n::\nset\n();\n\n            \nPT_CALL\n(\nwaitForTimer\n());\n\n\n            \nLed\n::\nreset\n();\n\n            \nPT_CALL\n(\nsetTimer\n(\n200\n));\n\n\n            \nPT_WAIT_UNTIL\n(\ntimeout\n.\nisExpired\n());\n\n        \n}\n\n\n        \nPT_END\n();\n\n    \n}\n\n\n    \nmodm\n::\nResumableResult\n<\nbool\n>\n\n    \nwaitForTimer\n()\n\n    \n{\n\n        \nRF_BEGIN\n();\n\n\n        \n// nested calling is allowed\n\n        \nif\n \n(\nRF_CALL\n(\nsetTimer\n(\n100\n)))\n\n        \n{\n\n            \nRF_WAIT_UNTIL\n(\ntimeout\n.\nisExpired\n());\n\n            \nRF_RETURN\n(\ntrue\n);\n\n        \n}\n\n\n        \nRF_END_RETURN\n(\nfalse\n);\n\n    \n}\n\n\n    \nmodm\n::\nResumableResult\n<\nbool\n>\n\n    \nsetTimer\n(\nuint16_t\n \nnew_timeout\n)\n\n    \n{\n\n        \nRF_BEGIN\n();\n\n\n        \ntimeout\n.\nrestart\n(\nnew_timeout\n);\n\n\n        \nif\n(\ntimeout\n.\nisArmed\n())\n \n{\n\n            \nRF_RETURN\n(\ntrue\n);\n\n        \n}\n\n\n        \n// clean up code goes here\n\n\n        \nRF_END_RETURN\n(\nfalse\n);\n\n    \n}\n\n\n\nprivate\n:\n\n    \nmodm\n::\nShortTimeout\n \ntimeout\n;\n\n\n};\n\n\n\nBlinkingLight\n \nlight\n;\n\n\n\nwhile\n \n(\n1\n)\n \n{\n\n    \nlight\n.\nrun\n();\n\n\n}\n\n\n\n\n\nFor other examples take a look in the \nexamples\n folder in the modm\nroot folder. The given example is in \nmodm/examples/generic/resumable\n.\n\n\nOptions\n\u00b6\n\n\ncheck_nesting_depth\n\u00b6\n\n\nCheck nesting call depth: \nTrue\n \u2208 \n{ True, False }\n\n\nNested resumable functions protect against memory corruption by checking if the\nnesting level is within the allocated nesting level depth, on first entry to\nthe function. If the allocated nesting level is exceeded, the assertion\n\nresumable.begin.nesting\n fails.\n\n\nYou may disable this behavior by disabling this check, then instead of the\nassertion, the function on entry returns the \nmodm::rf::NestingError\n state value.\n\nPT_CALL()\n and \nRF_CALL()\n macros will respond to this error by stopping\nfunction polling and just continuing program execution.\n\n\n\n\nPerformance Penalty\n\n\nThis check is performed during the call to \nRF_BEGIN(N)\n, so exactly once\non function entry and not during every polling call, so the performance\npenalty is relatively small.\n\n\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nNestedResumable\n<\n \nuint8_t\n \nLevels\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nResumable\n<\n \nuint8_t\n \nFunctions\n=\n1\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nResumableResult\n<\n \ntypename\n \nT\n \n>\n;\n\n\n\n// Define\n\n\n#define MODM_RESUMABLE_MODULE_NAME\n\n\n#define RF_BEGIN\n\n\n#define RF_BEGIN(index)\n\n\n#define RF_CALL(resumable)\n\n\n#define RF_CALL_BLOCKING(resumable)\n\n\n#define RF_END\n\n\n#define RF_END_RETURN(result)\n\n\n#define RF_END_RETURN_CALL(resumable)\n\n\n#define RF_RETURN\n\n\n#define RF_RETURN(result)\n\n\n#define RF_RETURN_CALL(resumable)\n\n\n#define RF_WAIT_THREAD(child)\n\n\n#define RF_WAIT_UNTIL(condition)\n\n\n#define RF_WAIT_WHILE(condition)\n\n\n#define RF_YIELD\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:processing:resumable\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\nmodm_architecture_assert\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nassert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable->modm_architecture_assert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing\n\n\n\n\n\n\nmodm:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable->modm_processing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_block_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nblock.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_block_device->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ngpio.expander\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_gpio_expander->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ni2c.device\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_i2c_device->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_spi->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7928\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7928->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ndrv832x_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nl3gd20\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_l3gd20->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis3.transport\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis3_transport->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis302dl\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlis302dl\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lis302dl->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nltc2984\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp23x17\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp23x17->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca8574\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca8574->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\npca9535\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_pca9535->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_processing_resumable",
            "title": "modm:processing:resumable"
        },
        {
            "location": "/reference/module/modm-processing-resumable/#modmprocessingresumable-resumable-functions",
            "text": "An implementation of lightweight resumable functions which allow for nested calling.  This base class and its macros allows you to implement and use several\nresumable functions in one class.\nThis allows you to modularize your code by placing it into its own resumable functions\ninstead of the placing everything into one big method.\nIt also allows you to call and run resumable functions within your resumables,\nso you can reuse their functionality.  Note that you should call resumable functions within a protothreads, with the PT_CALL(group.resumable())  macro, which will return the result of the \nresumable function. To call a resumable function inside another resumable\nfunction, use the  RF_CALL(group.resumable()) .  You may use the  RF_CALL_BLOCKING(group.resumable())  macro to execute\na resumable function outside of a protothread, however, this which will\nforce the CPU to busy-wait until the resumable function ended.   Resumable functions are not thread-safe!  Use an external mutex to arbitrate access if two Protothreads access the\nsame resumable function.   You can either run your group of resumable functions independently from each\nother, or only run one function at a time, but it may nest calls to its own \ngroup's functions.\nSo you need to inherit your group from  modm::Resumable<#Functions> , and from modm::NestedResumable<#Functions>  respectively.",
            "title": "modm:processing:resumable: Resumable Functions"
        },
        {
            "location": "/reference/module/modm-processing-resumable/#independent-operation",
            "text": "You must begin each resumable function using  RF_BEGIN(index)  where  index  is\nthe unique index of your resumable function starting at zero.\nYou may exit and return a value by using  RF_RETURN(value)  or\nreturn the result of another resumable function using  RF_RETURN_CALL(resumable()) .\nThis return value is wrapped in a  modm::ResumableResult<Type>  struct\nand transparently returned by the  RF_CALL  macro so it can be used\nto influence your program flow.\nIf the resumable function reaches  RF_END()  it will exit automatically,\nwith the result of  0  cast to the return type.\nShould you wish to return a value at the end, you may use RF_END_RETURN(value) .\nYou may also return the result of another resumable function using RF_END_RETURN_CALL(resumable()) .  Be aware that this class keeps a separate state for each of your resumable functions.\nThis allows each resumable function to be run at the same time.\nThis might require the use of an internal semaphore or mutex if such\ndependencies exist in your use case.\nTake a look at the  NestedResumable  class for mutually exclusive resumable functions,\nwhich also require a little less memory.",
            "title": "Independent operation"
        },
        {
            "location": "/reference/module/modm-processing-resumable/#nested-operation",
            "text": "You are responsible to choosing the right nesting depth!\nThis class will guard itself against calling another resumable function at too\ndeep a nesting level and fail the  resumable.begin.nesting  assertion!\nIt is then up to you to recognize this in your program design\nand increase the nesting depth or rethink your code.  The resumable functions of this class are mutually exclusive, so only one\nresumable function of the same object can run at the same time. Even if you\ncall another resumable function, it will simply return  modm::rf::WrongState .\nUsing the  RF_CALL(resumable())  macro, you can wait for these\nresumable functions to become available and then run them, so you usually do\nnot need to worry about those cases.  You must begin each resumable function using  RF_BEGIN() .\nYou may exit and return a value by using  RF_RETURN(value)  or\nreturn the result of another resumable function using  RF_RETURN_CALL(resumable()) .\nThis return value is wrapped in a  modm::ResumableResult<Type>  struct\nand transparently returned by the  RF_CALL  macro so it can be used\nto influence your program flow.\nIf the resumable function reaches  RF_END()  it will exit automatically,\nwith the result of  0  cast to the return type.\nShould you wish to return a value at the end, you may use RF_END_RETURN(value) .\nYou may also return the result of another resumable function using RF_END_RETURN_CALL(resumable()) .",
            "title": "Nested operation"
        },
        {
            "location": "/reference/module/modm-processing-resumable/#example",
            "text": "Here is a (slightly over-engineered) example:  #include   <modm/platform/platform.hpp>  #include   <modm/processing/processing.hpp>  using   Led   =   GpioOutputB0 ;  class   BlinkingLight   :   public   modm :: pt :: Protothread ,   private   modm :: NestedResumable < 2 >  {  public : \n     bool \n     run () \n     { \n         PT_BEGIN (); \n\n         // set everything up \n         Led :: setOutput (); \n         Led :: set (); \n\n         while   ( true ) \n         { \n             Led :: set (); \n             PT_CALL ( waitForTimer ()); \n\n             Led :: reset (); \n             PT_CALL ( setTimer ( 200 )); \n\n             PT_WAIT_UNTIL ( timeout . isExpired ()); \n         } \n\n         PT_END (); \n     } \n\n     modm :: ResumableResult < bool > \n     waitForTimer () \n     { \n         RF_BEGIN (); \n\n         // nested calling is allowed \n         if   ( RF_CALL ( setTimer ( 100 ))) \n         { \n             RF_WAIT_UNTIL ( timeout . isExpired ()); \n             RF_RETURN ( true ); \n         } \n\n         RF_END_RETURN ( false ); \n     } \n\n     modm :: ResumableResult < bool > \n     setTimer ( uint16_t   new_timeout ) \n     { \n         RF_BEGIN (); \n\n         timeout . restart ( new_timeout ); \n\n         if ( timeout . isArmed ())   { \n             RF_RETURN ( true ); \n         } \n\n         // clean up code goes here \n\n         RF_END_RETURN ( false ); \n     }  private : \n     modm :: ShortTimeout   timeout ;  };  BlinkingLight   light ;  while   ( 1 )   { \n     light . run ();  }   For other examples take a look in the  examples  folder in the modm\nroot folder. The given example is in  modm/examples/generic/resumable .",
            "title": "Example"
        },
        {
            "location": "/reference/module/modm-processing-resumable/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-processing-resumable/#check_nesting_depth",
            "text": "Check nesting call depth:  True  \u2208  { True, False }  Nested resumable functions protect against memory corruption by checking if the\nnesting level is within the allocated nesting level depth, on first entry to\nthe function. If the allocated nesting level is exceeded, the assertion resumable.begin.nesting  fails.  You may disable this behavior by disabling this check, then instead of the\nassertion, the function on entry returns the  modm::rf::NestingError  state value. PT_CALL()  and  RF_CALL()  macros will respond to this error by stopping\nfunction polling and just continuing program execution.   Performance Penalty  This check is performed during the call to  RF_BEGIN(N) , so exactly once\non function entry and not during every polling call, so the performance\npenalty is relatively small.",
            "title": "check_nesting_depth"
        },
        {
            "location": "/reference/module/modm-processing-resumable/#content",
            "text": "// Class  class   modm :: NestedResumable <   uint8_t   Levels = 1   > ;  class   modm :: Resumable <   uint8_t   Functions = 1   > ;  // Struct  struct   modm :: ResumableResult <   typename   T   > ;  // Define  #define MODM_RESUMABLE_MODULE_NAME  #define RF_BEGIN  #define RF_BEGIN(index)  #define RF_CALL(resumable)  #define RF_CALL_BLOCKING(resumable)  #define RF_END  #define RF_END_RETURN(result)  #define RF_END_RETURN_CALL(resumable)  #define RF_RETURN  #define RF_RETURN(result)  #define RF_RETURN_CALL(resumable)  #define RF_WAIT_THREAD(child)  #define RF_WAIT_UNTIL(condition)  #define RF_WAIT_WHILE(condition)  #define RF_YIELD",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-processing-resumable/#dependencies",
            "text": "modm:processing:resumable     modm_processing_resumable   modm:  processing:  resumable     modm_architecture_assert    modm:  architecture:  assert       modm_processing_resumable->modm_architecture_assert       modm_processing    modm:  processing       modm_processing_resumable->modm_processing       modm_architecture_block_device    modm:  architecture:  block.device       modm_architecture_block_device->modm_processing_resumable       modm_architecture_gpio_expander    modm:  architecture:  gpio.expander       modm_architecture_gpio_expander->modm_processing_resumable       modm_architecture_i2c_device    modm:  architecture:  i2c.device       modm_architecture_i2c_device->modm_processing_resumable       modm_architecture_spi    modm:  architecture:  spi       modm_architecture_spi->modm_processing_resumable       modm_communication_xpcc    modm:  communication:  xpcc       modm_communication_xpcc->modm_processing_resumable       modm_driver_ad7928    modm:  driver:  ad7928       modm_driver_ad7928->modm_processing_resumable       modm_driver_drv832x_spi    modm:  driver:  drv832x_spi       modm_driver_drv832x_spi->modm_processing_resumable       modm_driver_l3gd20    modm:  driver:  l3gd20       modm_driver_l3gd20->modm_processing_resumable       modm_driver_lis3_transport    modm:  driver:  lis3.transport       modm_driver_lis3_transport->modm_processing_resumable       modm_driver_lis302dl    modm:  driver:  lis302dl       modm_driver_lis302dl->modm_processing_resumable       modm_driver_ltc2984    modm:  driver:  ltc2984       modm_driver_ltc2984->modm_processing_resumable       modm_driver_mcp23x17    modm:  driver:  mcp23x17       modm_driver_mcp23x17->modm_processing_resumable       modm_driver_pca8574    modm:  driver:  pca8574       modm_driver_pca8574->modm_processing_resumable       modm_driver_pca9535    modm:  driver:  pca9535       modm_driver_pca9535->modm_processing_resumable       modm_test_processing    modm:  test:  processing       modm_test_processing->modm_processing_resumable",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-processing-rtos/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:processing:rtos\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nrtos\n::\nBinarySemaphore\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nMutex\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nMutexGuard\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nQueue\n<\n \ntypename\n \nT\n  \n>\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nQueueBase\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nScheduler\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nSemaphore\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nSemaphoreBase\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nThread\n::\nLock\n;\n\n\nclass\n \nmodm\n::\nrtos\n::\nThread\n;\n\n\n\n// Define\n\n\n#define MILLISECONDS\n\n\n#define TIME_LOOP(frequency)\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:processing:rtos\n\n\n\n\n\n\n\n\nmodm_processing_rtos\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nrtos\n\n\n\n\n\n\n\n\nmodm_freertos\n\n\n\n\n\n\nmodm:\n\n\nfreertos\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_rtos->modm_freertos\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing\n\n\n\n\n\n\nmodm:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_rtos->modm_processing",
            "title": "modm:processing:rtos"
        },
        {
            "location": "/reference/module/modm-processing-rtos/#modmprocessingrtos",
            "text": "",
            "title": "modm:processing:rtos"
        },
        {
            "location": "/reference/module/modm-processing-rtos/#content",
            "text": "// Class  class   modm :: rtos :: BinarySemaphore ;  class   modm :: rtos :: Mutex ;  class   modm :: rtos :: MutexGuard ;  class   modm :: rtos :: Queue <   typename   T    > ;  class   modm :: rtos :: QueueBase ;  class   modm :: rtos :: Scheduler ;  class   modm :: rtos :: Semaphore ;  class   modm :: rtos :: SemaphoreBase ;  class   modm :: rtos :: Thread :: Lock ;  class   modm :: rtos :: Thread ;  // Define  #define MILLISECONDS  #define TIME_LOOP(frequency)",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-processing-rtos/#dependencies",
            "text": "modm:processing:rtos     modm_processing_rtos   modm:  processing:  rtos     modm_freertos    modm:  freertos       modm_processing_rtos->modm_freertos       modm_processing    modm:  processing       modm_processing_rtos->modm_processing",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-processing-scheduler/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:processing:scheduler\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nScheduler\n::\nTask\n;\n\n\nclass\n \nmodm\n::\nScheduler\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nScheduler\n::\nTaskListItem\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:processing:scheduler\n\n\n\n\n\n\n\n\nmodm_processing_scheduler\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nscheduler\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_scheduler->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\natomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_scheduler->modm_architecture_atomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing\n\n\n\n\n\n\nmodm:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_scheduler->modm_processing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_processing_scheduler",
            "title": "modm:processing:scheduler"
        },
        {
            "location": "/reference/module/modm-processing-scheduler/#modmprocessingscheduler",
            "text": "",
            "title": "modm:processing:scheduler"
        },
        {
            "location": "/reference/module/modm-processing-scheduler/#content",
            "text": "// Class  class   modm :: Scheduler :: Task ;  class   modm :: Scheduler ;  // Struct  struct   modm :: Scheduler :: TaskListItem ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-processing-scheduler/#dependencies",
            "text": "modm:processing:scheduler     modm_processing_scheduler   modm:  processing:  scheduler     modm_architecture_accessor    modm:  architecture:  accessor       modm_processing_scheduler->modm_architecture_accessor       modm_architecture_atomic    modm:  architecture:  atomic       modm_processing_scheduler->modm_architecture_atomic       modm_processing    modm:  processing       modm_processing_scheduler->modm_processing       modm_test_processing    modm:  test:  processing       modm_test_processing->modm_processing_scheduler",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-processing-timer/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:processing:timer\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nGenericPeriodicTimer\n<\n \nclass\n \nClock\n,\n \ntypename\n \nTimestampType\n=\nmodm\n::\nTimestamp\n \n>\n;\n\n\nclass\n \nmodm\n::\nGenericTimeout\n<\n \nclass\n \nClock\n,\n \nclass\n \nTimestampType\n=\nmodm\n::\nTimestamp\n \n>\n;\n\n\nclass\n \nmodm\n::\nGenericTimestamp\n<\n \ntypename\n \nT\n \n>\n;\n\n\n\n// Function\n\n\nIOStream\n&\n \nmodm\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \nGenericTimestamp\n<\n \nT\n \n>\n \n&\nt\n);\n\n\n\n// Enum\n\n\nenum\n \nclass\n \nPeriodicTimerState\n;\n\n\nenum\n \nclass\n \nTimeoutState\n;\n\n\n\n// Typedef\n\n\nusing\n \nmodm\n::\nPeriodicTimer\n \n=\n \ntypedef\n \nGenericPeriodicTimer\n<\n \n::\nmodm\n::\nClock\n,\n \nTimestamp\n>\n;\n\n\nusing\n \nmodm\n::\nShortPeriodicTimer\n \n=\n \ntypedef\n \nGenericPeriodicTimer\n<\n \n::\nmodm\n::\nClock\n,\n \nShortTimestamp\n>\n;\n\n\nusing\n \nmodm\n::\nShortTimeout\n \n=\n \ntypedef\n \nGenericTimeout\n<\n \n::\nmodm\n::\nClock\n,\n \nShortTimestamp\n>\n;\n\n\nusing\n \nmodm\n::\nShortTimestamp\n \n=\n \ntypedef\n \nGenericTimestamp\n<\nuint16_t\n>\n;\n\n\nusing\n \nmodm\n::\nTimeout\n \n=\n \ntypedef\n \nGenericTimeout\n<\n \n::\nmodm\n::\nClock\n,\n \nTimestamp\n>\n;\n\n\nusing\n \nmodm\n::\nTimestamp\n \n=\n \ntypedef\n \nGenericTimestamp\n<\nuint32_t\n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:processing:timer\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing\n\n\n\n\n\n\nmodm:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer->modm_processing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_clock->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_ros\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nros\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_ros->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nsab\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nsab2\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_sab2->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbme280\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbmp085\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nnrf24\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ssd1306\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nssd1306\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ssd1306->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl53l0\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl6180\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl6180->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ngui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nled\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nmenu\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu->modm_processing_timer",
            "title": "modm:processing:timer"
        },
        {
            "location": "/reference/module/modm-processing-timer/#modmprocessingtimer",
            "text": "",
            "title": "modm:processing:timer"
        },
        {
            "location": "/reference/module/modm-processing-timer/#content",
            "text": "// Class  class   modm :: GenericPeriodicTimer <   class   Clock ,   typename   TimestampType = modm :: Timestamp   > ;  class   modm :: GenericTimeout <   class   Clock ,   class   TimestampType = modm :: Timestamp   > ;  class   modm :: GenericTimestamp <   typename   T   > ;  // Function  IOStream &   modm :: operator << ( IOStream   & os ,   const   GenericTimestamp <   T   >   & t );  // Enum  enum   class   PeriodicTimerState ;  enum   class   TimeoutState ;  // Typedef  using   modm :: PeriodicTimer   =   typedef   GenericPeriodicTimer <   :: modm :: Clock ,   Timestamp > ;  using   modm :: ShortPeriodicTimer   =   typedef   GenericPeriodicTimer <   :: modm :: Clock ,   ShortTimestamp > ;  using   modm :: ShortTimeout   =   typedef   GenericTimeout <   :: modm :: Clock ,   ShortTimestamp > ;  using   modm :: ShortTimestamp   =   typedef   GenericTimestamp < uint16_t > ;  using   modm :: Timeout   =   typedef   GenericTimeout <   :: modm :: Clock ,   Timestamp > ;  using   modm :: Timestamp   =   typedef   GenericTimestamp < uint32_t > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-processing-timer/#dependencies",
            "text": "modm:processing:timer     modm_processing_timer   modm:  processing:  timer     modm_architecture_clock    modm:  architecture:  clock       modm_processing_timer->modm_architecture_clock       modm_io    modm:  io       modm_processing_timer->modm_io       modm_processing    modm:  processing       modm_processing_timer->modm_processing       modm_utils    modm:  utils       modm_processing_timer->modm_utils       modm_architecture_clock->modm_processing_timer       modm_communication_ros    modm:  communication:  ros       modm_communication_ros->modm_processing_timer       modm_communication_sab    modm:  communication:  sab       modm_communication_sab->modm_processing_timer       modm_communication_sab2    modm:  communication:  sab2       modm_communication_sab2->modm_processing_timer       modm_communication_xpcc    modm:  communication:  xpcc       modm_communication_xpcc->modm_processing_timer       modm_driver_bme280    modm:  driver:  bme280       modm_driver_bme280->modm_processing_timer       modm_driver_bmp085    modm:  driver:  bmp085       modm_driver_bmp085->modm_processing_timer       modm_driver_nrf24    modm:  driver:  nrf24       modm_driver_nrf24->modm_processing_timer       modm_driver_ssd1306    modm:  driver:  ssd1306       modm_driver_ssd1306->modm_processing_timer       modm_driver_vl53l0    modm:  driver:  vl53l0       modm_driver_vl53l0->modm_processing_timer       modm_driver_vl6180    modm:  driver:  vl6180       modm_driver_vl6180->modm_processing_timer       modm_test_processing    modm:  test:  processing       modm_test_processing->modm_processing_timer       modm_ui_gui    modm:  ui:  gui       modm_ui_gui->modm_processing_timer       modm_ui_led    modm:  ui:  led       modm_ui_led->modm_processing_timer       modm_ui_menu    modm:  ui:  menu       modm_ui_menu->modm_processing_timer",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-ros/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:ros\n\u00b6",
            "title": "modm:ros"
        },
        {
            "location": "/reference/module/modm-ros/#modmros",
            "text": "",
            "title": "modm:ros"
        },
        {
            "location": "/reference/module/modm-test/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:test\n\u00b6\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:test\n\n\n\n\n\n\n\n\nmodm_test\n\n\n\n\nmodm:\n\n\ntest\n\n\n\n\n\n\n\n\nmodm_unittest\n\n\n\n\n\n\nmodm:\n\n\nunittest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test->modm_unittest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_communication\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ncommunication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_communication->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_container\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_container->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_io\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_io->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nmath\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_ui\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_ui->modm_test",
            "title": "modm:test"
        },
        {
            "location": "/reference/module/modm-test/#modmtest",
            "text": "",
            "title": "modm:test"
        },
        {
            "location": "/reference/module/modm-test/#dependencies",
            "text": "modm:test     modm_test   modm:  test     modm_unittest    modm:  unittest       modm_test->modm_unittest       modm_test_architecture    modm:  test:  architecture       modm_test_architecture->modm_test       modm_test_communication    modm:  test:  communication       modm_test_communication->modm_test       modm_test_container    modm:  test:  container       modm_test_container->modm_test       modm_test_driver    modm:  test:  driver       modm_test_driver->modm_test       modm_test_io    modm:  test:  io       modm_test_io->modm_test       modm_test_math    modm:  test:  math       modm_test_math->modm_test       modm_test_platform    modm:  test:  platform       modm_test_platform->modm_test       modm_test_processing    modm:  test:  processing       modm_test_processing->modm_test       modm_test_ui    modm:  test:  ui       modm_test_ui->modm_test",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-test-architecture/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:test:architecture\n\u00b6\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:test:architecture\n\n\n\n\n\n\n\n\nmodm_test_architecture\n\n\n\n\nmodm:\n\n\ntest:\n\n\narchitecture\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\natomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_architecture_atomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_can\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_architecture_can\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_heap\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nheap\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_architecture_heap\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_register\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nregister\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_architecture_register\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test\n\n\n\n\n\n\nmodm:\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_communication\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ncommunication\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_communication->modm_test_architecture",
            "title": "modm:test:architecture"
        },
        {
            "location": "/reference/module/modm-test-architecture/#modmtestarchitecture",
            "text": "",
            "title": "modm:test:architecture"
        },
        {
            "location": "/reference/module/modm-test-architecture/#dependencies",
            "text": "modm:test:architecture     modm_test_architecture   modm:  test:  architecture     modm_architecture_accessor    modm:  architecture:  accessor       modm_test_architecture->modm_architecture_accessor       modm_architecture_atomic    modm:  architecture:  atomic       modm_test_architecture->modm_architecture_atomic       modm_architecture_can    modm:  architecture:  can       modm_test_architecture->modm_architecture_can       modm_architecture_clock    modm:  architecture:  clock       modm_test_architecture->modm_architecture_clock       modm_architecture_heap    modm:  architecture:  heap       modm_test_architecture->modm_architecture_heap       modm_architecture_register    modm:  architecture:  register       modm_test_architecture->modm_architecture_register       modm_test    modm:  test       modm_test_architecture->modm_test       modm_test_communication    modm:  test:  communication       modm_test_communication->modm_test_architecture",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-test-communication/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:test:communication\n\u00b6\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:test:communication\n\n\n\n\n\n\n\n\nmodm_test_communication\n\n\n\n\nmodm:\n\n\ntest:\n\n\ncommunication\n\n\n\n\n\n\n\n\nmodm_communication_sab\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nsab\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_communication->modm_communication_sab\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_communication_xpcc\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_communication->modm_communication_xpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test\n\n\n\n\n\n\nmodm:\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_communication->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_architecture\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_communication->modm_test_architecture",
            "title": "modm:test:communication"
        },
        {
            "location": "/reference/module/modm-test-communication/#modmtestcommunication",
            "text": "",
            "title": "modm:test:communication"
        },
        {
            "location": "/reference/module/modm-test-communication/#dependencies",
            "text": "modm:test:communication     modm_test_communication   modm:  test:  communication     modm_communication_sab    modm:  communication:  sab       modm_test_communication->modm_communication_sab       modm_communication_xpcc    modm:  communication:  xpcc       modm_test_communication->modm_communication_xpcc       modm_test    modm:  test       modm_test_communication->modm_test       modm_test_architecture    modm:  test:  architecture       modm_test_communication->modm_test_architecture",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-test-container/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:test:container\n\u00b6\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:test:container\n\n\n\n\n\n\n\n\nmodm_test_container\n\n\n\n\nmodm:\n\n\ntest:\n\n\ncontainer\n\n\n\n\n\n\n\n\nmodm_container\n\n\n\n\n\n\nmodm:\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_container->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test\n\n\n\n\n\n\nmodm:\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_container->modm_test",
            "title": "modm:test:container"
        },
        {
            "location": "/reference/module/modm-test-container/#modmtestcontainer",
            "text": "",
            "title": "modm:test:container"
        },
        {
            "location": "/reference/module/modm-test-container/#dependencies",
            "text": "modm:test:container     modm_test_container   modm:  test:  container     modm_container    modm:  container       modm_test_container->modm_container       modm_test    modm:  test       modm_test_container->modm_test",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-test-driver/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:test:driver\n\u00b6\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:test:driver\n\n\n\n\n\n\n\n\nmodm_test_driver\n\n\n\n\nmodm:\n\n\ntest:\n\n\ndriver\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7280a\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_ad7280a\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bme280\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbme280\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_bme280\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_bmp085\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nbmp085\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_bmp085\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_drv832x_spi\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ndrv832x_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_drv832x_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_lawicel\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nlawicel\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_lawicel\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ltc2984\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nltc2984\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_ltc2984\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_mcp2515\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmcp2515\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_driver_mcp2515\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test\n\n\n\n\n\n\nmodm:\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_spi\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_test_platform_spi",
            "title": "modm:test:driver"
        },
        {
            "location": "/reference/module/modm-test-driver/#modmtestdriver",
            "text": "",
            "title": "modm:test:driver"
        },
        {
            "location": "/reference/module/modm-test-driver/#dependencies",
            "text": "modm:test:driver     modm_test_driver   modm:  test:  driver     modm_architecture_clock    modm:  architecture:  clock       modm_test_driver->modm_architecture_clock       modm_debug    modm:  debug       modm_test_driver->modm_debug       modm_driver_ad7280a    modm:  driver:  ad7280a       modm_test_driver->modm_driver_ad7280a       modm_driver_bme280    modm:  driver:  bme280       modm_test_driver->modm_driver_bme280       modm_driver_bmp085    modm:  driver:  bmp085       modm_test_driver->modm_driver_bmp085       modm_driver_drv832x_spi    modm:  driver:  drv832x_spi       modm_test_driver->modm_driver_drv832x_spi       modm_driver_lawicel    modm:  driver:  lawicel       modm_test_driver->modm_driver_lawicel       modm_driver_ltc2984    modm:  driver:  ltc2984       modm_test_driver->modm_driver_ltc2984       modm_driver_mcp2515    modm:  driver:  mcp2515       modm_test_driver->modm_driver_mcp2515       modm_platform_gpio    modm:  platform:  gpio       modm_test_driver->modm_platform_gpio       modm_test    modm:  test       modm_test_driver->modm_test       modm_test_platform_spi    modm:  test:  platform:  spi       modm_test_driver->modm_test_platform_spi",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-test-io/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:test:io\n\u00b6\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:test:io\n\n\n\n\n\n\n\n\nmodm_test_io\n\n\n\n\nmodm:\n\n\ntest:\n\n\nio\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_io->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test\n\n\n\n\n\n\nmodm:\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_io->modm_test",
            "title": "modm:test:io"
        },
        {
            "location": "/reference/module/modm-test-io/#modmtestio",
            "text": "",
            "title": "modm:test:io"
        },
        {
            "location": "/reference/module/modm-test-io/#dependencies",
            "text": "modm:test:io     modm_test_io   modm:  test:  io     modm_io    modm:  io       modm_test_io->modm_io       modm_test    modm:  test       modm_test_io->modm_test",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-test-math/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:test:math\n\u00b6\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:test:math\n\n\n\n\n\n\n\n\nmodm_test_math\n\n\n\n\nmodm:\n\n\ntest:\n\n\nmath\n\n\n\n\n\n\n\n\nmodm_math_filter\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nfilter\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_math_filter\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\ngeometry\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_math_geometry\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_interpolation\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\ninterpolation\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_math_interpolation\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_matrix\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nmatrix\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_math_matrix\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_saturated\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nsaturated\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_math_saturated\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test\n\n\n\n\n\n\nmodm:\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_math->modm_test",
            "title": "modm:test:math"
        },
        {
            "location": "/reference/module/modm-test-math/#modmtestmath",
            "text": "",
            "title": "modm:test:math"
        },
        {
            "location": "/reference/module/modm-test-math/#dependencies",
            "text": "modm:test:math     modm_test_math   modm:  test:  math     modm_math_filter    modm:  math:  filter       modm_test_math->modm_math_filter       modm_math_geometry    modm:  math:  geometry       modm_test_math->modm_math_geometry       modm_math_interpolation    modm:  math:  interpolation       modm_test_math->modm_math_interpolation       modm_math_matrix    modm:  math:  matrix       modm_test_math->modm_math_matrix       modm_math_saturated    modm:  math:  saturated       modm_test_math->modm_math_saturated       modm_math_utils    modm:  math:  utils       modm_test_math->modm_math_utils       modm_test    modm:  test       modm_test_math->modm_test",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-test-platform/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:test:platform\n\u00b6\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:test:platform\n\n\n\n\n\n\n\n\nmodm_test_platform\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform\n\n\n\n\n\n\n\n\nmodm_architecture_can\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform->modm_architecture_can\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can_common\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan.common\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform->modm_platform_can_common\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test\n\n\n\n\n\n\nmodm:\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_gpio->modm_test_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_spi\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_spi->modm_test_platform",
            "title": "modm:test:platform"
        },
        {
            "location": "/reference/module/modm-test-platform/#modmtestplatform",
            "text": "",
            "title": "modm:test:platform"
        },
        {
            "location": "/reference/module/modm-test-platform/#dependencies",
            "text": "modm:test:platform     modm_test_platform   modm:  test:  platform     modm_architecture_can    modm:  architecture:  can       modm_test_platform->modm_architecture_can       modm_architecture_clock    modm:  architecture:  clock       modm_test_platform->modm_architecture_clock       modm_platform_can_common    modm:  platform:  can.common       modm_test_platform->modm_platform_can_common       modm_test    modm:  test       modm_test_platform->modm_test       modm_test_platform_gpio    modm:  test:  platform:  gpio       modm_test_platform_gpio->modm_test_platform       modm_test_platform_spi    modm:  test:  platform:  spi       modm_test_platform_spi->modm_test_platform",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-test-platform-gpio/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:test:platform:gpio\n\u00b6\n\n\nOptions\n\u00b6\n\n\ntest_gpio_lock\n\u00b6\n\n\nTest locking the GPIOs. This will make the GPIOs unusable until the next reboot!: \nFalse\n \u2208 \n{ True, False }\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:test:platform:gpio\n\n\n\n\n\n\n\n\nmodm_test_platform_gpio\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\nmodm_architecture_delay\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\ndelay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_gpio->modm_architecture_delay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_gpio->modm_platform_gpio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_gpio->modm_test_platform",
            "title": "modm:test:platform:gpio"
        },
        {
            "location": "/reference/module/modm-test-platform-gpio/#modmtestplatformgpio",
            "text": "",
            "title": "modm:test:platform:gpio"
        },
        {
            "location": "/reference/module/modm-test-platform-gpio/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-test-platform-gpio/#test_gpio_lock",
            "text": "Test locking the GPIOs. This will make the GPIOs unusable until the next reboot!:  False  \u2208  { True, False }",
            "title": "test_gpio_lock"
        },
        {
            "location": "/reference/module/modm-test-platform-gpio/#dependencies",
            "text": "modm:test:platform:gpio     modm_test_platform_gpio   modm:  test:  platform:  gpio     modm_architecture_delay    modm:  architecture:  delay       modm_test_platform_gpio->modm_architecture_delay       modm_platform_gpio    modm:  platform:  gpio       modm_test_platform_gpio->modm_platform_gpio       modm_test_platform    modm:  test:  platform       modm_test_platform_gpio->modm_test_platform",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-test-platform-spi/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:test:platform:spi\n\u00b6\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:test:platform:spi\n\n\n\n\n\n\n\n\nmodm_test_platform_spi\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform:\n\n\nspi\n\n\n\n\n\n\n\n\nmodm_architecture_spi\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nspi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_spi->modm_architecture_spi\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container\n\n\n\n\n\n\nmodm:\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_spi->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nplatform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_platform_spi->modm_test_platform\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\ndriver\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_driver->modm_test_platform_spi",
            "title": "modm:test:platform:spi"
        },
        {
            "location": "/reference/module/modm-test-platform-spi/#modmtestplatformspi",
            "text": "",
            "title": "modm:test:platform:spi"
        },
        {
            "location": "/reference/module/modm-test-platform-spi/#dependencies",
            "text": "modm:test:platform:spi     modm_test_platform_spi   modm:  test:  platform:  spi     modm_architecture_spi    modm:  architecture:  spi       modm_test_platform_spi->modm_architecture_spi       modm_container    modm:  container       modm_test_platform_spi->modm_container       modm_test_platform    modm:  test:  platform       modm_test_platform_spi->modm_test_platform       modm_test_driver    modm:  test:  driver       modm_test_driver->modm_test_platform_spi",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-test-processing/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:test:processing\n\u00b6\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:test:processing\n\n\n\n\n\n\n\n\nmodm_test_processing\n\n\n\n\nmodm:\n\n\ntest:\n\n\nprocessing\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_filter\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nfilter\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_math_filter\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_protothread\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nprotothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_processing_protothread\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_resumable\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nresumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_processing_resumable\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_scheduler\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\nscheduler\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_processing_scheduler\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test\n\n\n\n\n\n\nmodm:\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_utils",
            "title": "modm:test:processing"
        },
        {
            "location": "/reference/module/modm-test-processing/#modmtestprocessing",
            "text": "",
            "title": "modm:test:processing"
        },
        {
            "location": "/reference/module/modm-test-processing/#dependencies",
            "text": "modm:test:processing     modm_test_processing   modm:  test:  processing     modm_architecture    modm:  architecture       modm_test_processing->modm_architecture       modm_math_filter    modm:  math:  filter       modm_test_processing->modm_math_filter       modm_math_utils    modm:  math:  utils       modm_test_processing->modm_math_utils       modm_processing_protothread    modm:  processing:  protothread       modm_test_processing->modm_processing_protothread       modm_processing_resumable    modm:  processing:  resumable       modm_test_processing->modm_processing_resumable       modm_processing_scheduler    modm:  processing:  scheduler       modm_test_processing->modm_processing_scheduler       modm_processing_timer    modm:  processing:  timer       modm_test_processing->modm_processing_timer       modm_test    modm:  test       modm_test_processing->modm_test       modm_utils    modm:  utils       modm_test_processing->modm_utils",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-test-ui/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:test:ui\n\u00b6\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:test:ui\n\n\n\n\n\n\n\n\nmodm_test_ui\n\n\n\n\nmodm:\n\n\ntest:\n\n\nui\n\n\n\n\n\n\n\n\nmodm_test\n\n\n\n\n\n\nmodm:\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_ui->modm_test\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_button\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nbutton\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_ui->modm_ui_button\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_time\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ntime\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_ui->modm_ui_time",
            "title": "modm:test:ui"
        },
        {
            "location": "/reference/module/modm-test-ui/#modmtestui",
            "text": "",
            "title": "modm:test:ui"
        },
        {
            "location": "/reference/module/modm-test-ui/#dependencies",
            "text": "modm:test:ui     modm_test_ui   modm:  test:  ui     modm_test    modm:  test       modm_test_ui->modm_test       modm_ui_button    modm:  ui:  button       modm_test_ui->modm_ui_button       modm_ui_time    modm:  ui:  time       modm_test_ui->modm_ui_time",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-tlsf/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:tlsf\n\u00b6\n\n\nOptions\n\u00b6\n\n\nsubdivisions\n\u00b6\n\n\nNumber of subdivisions per memory pool: \n16\n \u2208 \n{ 16, 32 }\n\n\nminimum_pool_size\n\u00b6\n\n\nMinimum pool size in byte: \n16777216\n \u2208 \n{ 4096 ... 536870912 }\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:tlsf\n\n\n\n\n\n\n\n\nmodm_tlsf\n\n\n\n\nmodm:\n\n\ntlsf\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni\n\n\n\n\n\n\nmodm:\n\n\nboard:\n\n\ndisco-f469ni\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_tlsf",
            "title": "modm:tlsf"
        },
        {
            "location": "/reference/module/modm-tlsf/#modmtlsf",
            "text": "",
            "title": "modm:tlsf"
        },
        {
            "location": "/reference/module/modm-tlsf/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-tlsf/#subdivisions",
            "text": "Number of subdivisions per memory pool:  16  \u2208  { 16, 32 }",
            "title": "subdivisions"
        },
        {
            "location": "/reference/module/modm-tlsf/#minimum_pool_size",
            "text": "Minimum pool size in byte:  16777216  \u2208  { 4096 ... 536870912 }",
            "title": "minimum_pool_size"
        },
        {
            "location": "/reference/module/modm-tlsf/#dependencies",
            "text": "modm:tlsf     modm_tlsf   modm:  tlsf     modm_board_disco-f469ni    modm:  board:  disco-f469ni       modm_board_disco-f469ni->modm_tlsf",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-ui/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:ui\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nAbstractMenu\n;\n\n\nclass\n \nmodm\n::\nAbstractView\n;\n\n\nclass\n \nmodm\n::\nBufferedGraphicDisplay\n<\n \nuint16_t\n \nWidth\n,\n \nuint16_t\n \nHeight\n \n>\n;\n\n\nclass\n \nmodm\n::\nButton\n<\n \ntypename\n \nPIN\n  \n>\n;\n\n\nclass\n \nmodm\n::\nButtonGroup\n<\n \ntypename\n \nT\n \n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nCharacterDisplay\n::\nWriter\n;\n\n\nclass\n \nmodm\n::\nCharacterDisplay\n;\n\n\nclass\n \nmodm\n::\nChoiceMenu\n;\n\n\nclass\n \nmodm\n::\nChoiceMenuEntry\n;\n\n\nclass\n \nmodm\n::\nCommunicatingView\n;\n\n\nclass\n \nmodm\n::\nCommunicatingViewStack\n;\n\n\nclass\n \nmodm\n::\nDate\n;\n\n\nclass\n \nmodm\n::\nGraphicDisplay\n::\nWriter\n;\n\n\nclass\n \nmodm\n::\nGraphicDisplay\n;\n\n\nclass\n \nmodm\n::\nMenuEntryCallback\n;\n\n\nclass\n \nmodm\n::\nScrollableText\n;\n\n\nclass\n \nmodm\n::\nStandardMenu\n;\n\n\nclass\n \nmodm\n::\nUnixTime\n;\n\n\nclass\n \nmodm\n::\nViewStack\n;\n\n\nclass\n \nmodm\n::\nVirtualGraphicDisplay\n;\n\n\nclass\n \nmodm\n::\ncolor\n::\nHsvT\n<\n \nclass\n \nUnderlyingType\n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\ncolor\n::\nRgbT\n<\n \nclass\n \nUnderlyingType\n \n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nglcd\n::\nColor\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nArrowButton\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nAsyncEvent\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nButtonWidget\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nCheckboxWidget\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nColorPalette\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nFilledAreaButton\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nFloatField\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nGuiViewStack\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nInputEvent\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nLabel\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nNumberField\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nNumberRocker\n<\n \ntypename\n \nT\n \n=\nint16_t\n \n>\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nStringField\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nStringRocker\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nTabPanel\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nView\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nWidget\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nWidgetGroup\n;\n\n\nclass\n \nmodm\n::\nui\n::\nAnimation\n<\n \ntypename\n \nT\n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nui\n::\nFastRamp\n<\n \ntypename\n \nT\n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nui\n::\nIndicator\n<\n \ntypename\n \nT\n \n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nui\n::\nKeyFrameAnimation\n<\n \ntypename\n \nT\n=\nuint8_t\n,\n \nuint8_t\n \nN\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nui\n::\nLed\n;\n\n\nclass\n \nmodm\n::\nui\n::\nPulse\n<\n \ntypename\n \nT\n \n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nui\n::\nRgbLed\n;\n\n\nclass\n \nmodm\n::\nui\n::\nStrobe\n<\n \ntypename\n \nT\n \n=\nuint8_t\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nMenuEntry\n;\n\n\nstruct\n \nmodm\n::\ngui\n::\nDimension\n;\n\n\nstruct\n \nmodm\n::\nui\n::\nFastRamp\n::\nComputations\n<\n \nType\n,\n \nuint16_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nui\n::\nFastRamp\n::\nComputations\n<\n \nType\n,\n \nuint32_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nui\n::\nFastRamp\n::\nComputations\n<\n \nType\n,\n \nuint8_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nui\n::\nFastRamp\n::\nComputations\n<\n \ntypename\n \nType\n,\n \ntypename\n \nUnsigned\n \n>\n;\n\n\nstruct\n \nmodm\n::\nui\n::\nKeyFrame\n<\n \ntypename\n \nT\n=\nuint8_t\n,\n \nuint8_t\n \nN\n=\n1\n \n>\n;\n\n\n\n// Function\n\n\nIOStream\n&\n \nmodm\n::\ncolor\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ncolor\n::\nRgbT\n<\n \nUnderlyingType\n \n>\n \n&\ncolor\n);\n\n\n\n// Enum\n\n\nenum\n \nButton\n;\n\n\nenum\n \nColor\n;\n\n\nenum\n \nclass\n \nKeyFrameAnimationMode\n;\n\n\n\n// Variable\n\n\nColorPalette\n \nmodm\n::\ngui\n::\nDefaultColorPalette\n \n;\n\n\nconst\n \nuint8_t\n \nbitmap\n::\nhome_16x16\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nbitmap\n::\nlogo_eurobot_90x64\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nbitmap\n::\nlogo_modm_90x64\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nbitmap\n::\nlogo_rca_90x64\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nbitmap\n::\nskull_64x64\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nAllCaps3x5\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nArcadeClassic\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nAssertion\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nFixedWidth5x8\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nMatrix8x8\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nNumbers14x32\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nNumbers40x57\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nNumbers46x64\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nScriptoNarrow\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nUbuntu_36\n[]\n \n;\n\n\nint16_t\n \nmodm\n::\ngui\n::\nuid_global\n \n=\n \n0\n;\n\n\nmodm\n::\naccessor\n::\nFlash\n<\nuint16_t\n>\n \nmodm\n::\nui\n::\ntable22_10_256\n \n;\n\n\nmodm\n::\naccessor\n::\nFlash\n<\nuint16_t\n>\n \nmodm\n::\nui\n::\ntable22_12_256\n \n;\n\n\nmodm\n::\naccessor\n::\nFlash\n<\nuint16_t\n>\n \nmodm\n::\nui\n::\ntable22_16_256\n \n;\n\n\nmodm\n::\naccessor\n::\nFlash\n<\nuint8_t\n>\n \nmodm\n::\nui\n::\ntable22_7_256\n \n;\n\n\nmodm\n::\naccessor\n::\nFlash\n<\nuint8_t\n>\n \nmodm\n::\nui\n::\ntable22_8_256\n \n;\n\n\n\n// Typedef\n\n\ntypedef\n \nHsvT\n \nmodm\n::\ncolor\n::\nHsv\n;\n\n\ntypedef\n \nNumberField\n<\nint16_t\n>\n \nmodm\n::\ngui\n::\nIntegerField\n;\n\n\ntypedef\n \nNumberRocker\n<\nfloat\n>\n \nmodm\n::\ngui\n::\nFloatRocker\n;\n\n\ntypedef\n \nNumberRocker\n<\nint16_t\n>\n \nmodm\n::\ngui\n::\nIntegerRocker\n;\n\n\ntypedef\n \nRgbT\n \nmodm\n::\ncolor\n::\nRgb\n;\n\n\ntypedef\n \nVector\n<\nint16_t\n,\n \n2\n>\n \nmodm\n::\nglcd\n::\nPoint\n;\n\n\ntypedef\n \nmodm\n::\nDoublyLinkedList\n<\nAsyncEvent\n*>\n \nmodm\n::\ngui\n::\nAsyncEventList\n;\n\n\ntypedef\n \nmodm\n::\nDynamicArray\n<\nWidget\n*>\n \nmodm\n::\ngui\n::\nWidgetContainer\n;\n\n\ntypedef\n \nmodm\n::\nQueue\n<\nInputEvent\n*\n,\n \nmodm\n::\nLinkedList\n<\nInputEvent\n*>\n \n>\n \nmodm\n::\ngui\n::\ninputQueue\n;\n\n\ntypedef\n \nmodm\n::\nglcd\n::\nPoint\n \nmodm\n::\ngui\n::\nPoint\n;\n\n\ntypedef\n \nstruct\n \nmodm\n::\ngui\n::\nDimension\n  \nmodm\n::\ngui\n::\nDimension\n;\n\n\ntypedef\n \nvoid\n(\n*\n \nmodm\n::\ngui\n::\neventCallback\n)\n \n(\nconst\n \nInputEvent\n \n&\n,\n \nWidget\n \n*\n,\n \nvoid\n \n*\n))(\nconst\n \nInputEvent\n \n&\n,\n \nWidget\n \n*\n,\n \nvoid\n \n*\n);\n\n\ntypedef\n \nvoid\n(\n*\n \nmodm\n::\ngui\n::\ngenericCallback\n)\n \n(\nvoid\n \n*\n))(\nvoid\n \n*\n);\n\n\n\n// Define\n\n\n#define NULL\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:ui\n\n\n\n\n\n\n\n\nmodm_ui\n\n\n\n\nmodm:\n\n\nui\n\n\n\n\n\n\n\n\nmodm_ui_animation\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nanimation\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_animation->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_button\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nbutton\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_button->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ncolor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ngui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nled\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nmenu\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_time\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ntime\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_time->modm_ui",
            "title": "modm:ui"
        },
        {
            "location": "/reference/module/modm-ui/#modmui",
            "text": "",
            "title": "modm:ui"
        },
        {
            "location": "/reference/module/modm-ui/#content",
            "text": "// Class  class   modm :: AbstractMenu ;  class   modm :: AbstractView ;  class   modm :: BufferedGraphicDisplay <   uint16_t   Width ,   uint16_t   Height   > ;  class   modm :: Button <   typename   PIN    > ;  class   modm :: ButtonGroup <   typename   T   = uint8_t   > ;  class   modm :: CharacterDisplay :: Writer ;  class   modm :: CharacterDisplay ;  class   modm :: ChoiceMenu ;  class   modm :: ChoiceMenuEntry ;  class   modm :: CommunicatingView ;  class   modm :: CommunicatingViewStack ;  class   modm :: Date ;  class   modm :: GraphicDisplay :: Writer ;  class   modm :: GraphicDisplay ;  class   modm :: MenuEntryCallback ;  class   modm :: ScrollableText ;  class   modm :: StandardMenu ;  class   modm :: UnixTime ;  class   modm :: ViewStack ;  class   modm :: VirtualGraphicDisplay ;  class   modm :: color :: HsvT <   class   UnderlyingType = uint8_t   > ;  class   modm :: color :: RgbT <   class   UnderlyingType   = uint8_t   > ;  class   modm :: glcd :: Color ;  class   modm :: gui :: ArrowButton ;  class   modm :: gui :: AsyncEvent ;  class   modm :: gui :: ButtonWidget ;  class   modm :: gui :: CheckboxWidget ;  class   modm :: gui :: ColorPalette ;  class   modm :: gui :: FilledAreaButton ;  class   modm :: gui :: FloatField ;  class   modm :: gui :: GuiViewStack ;  class   modm :: gui :: InputEvent ;  class   modm :: gui :: Label ;  class   modm :: gui :: NumberField <   typename   T   > ;  class   modm :: gui :: NumberRocker <   typename   T   = int16_t   > ;  class   modm :: gui :: StringField ;  class   modm :: gui :: StringRocker ;  class   modm :: gui :: TabPanel ;  class   modm :: gui :: View ;  class   modm :: gui :: Widget ;  class   modm :: gui :: WidgetGroup ;  class   modm :: ui :: Animation <   typename   T = uint8_t   > ;  class   modm :: ui :: FastRamp <   typename   T = uint8_t   > ;  class   modm :: ui :: Indicator <   typename   T   = uint8_t   > ;  class   modm :: ui :: KeyFrameAnimation <   typename   T = uint8_t ,   uint8_t   N = 1   > ;  class   modm :: ui :: Led ;  class   modm :: ui :: Pulse <   typename   T   = uint8_t   > ;  class   modm :: ui :: RgbLed ;  class   modm :: ui :: Strobe <   typename   T   = uint8_t   > ;  // Struct  struct   modm :: MenuEntry ;  struct   modm :: gui :: Dimension ;  struct   modm :: ui :: FastRamp :: Computations <   Type ,   uint16_t   > ;  struct   modm :: ui :: FastRamp :: Computations <   Type ,   uint32_t   > ;  struct   modm :: ui :: FastRamp :: Computations <   Type ,   uint8_t   > ;  struct   modm :: ui :: FastRamp :: Computations <   typename   Type ,   typename   Unsigned   > ;  struct   modm :: ui :: KeyFrame <   typename   T = uint8_t ,   uint8_t   N = 1   > ;  // Function  IOStream &   modm :: color :: operator << ( IOStream   & os ,   const   color :: RgbT <   UnderlyingType   >   & color );  // Enum  enum   Button ;  enum   Color ;  enum   class   KeyFrameAnimationMode ;  // Variable  ColorPalette   modm :: gui :: DefaultColorPalette   ;  const   uint8_t   bitmap :: home_16x16 []   ;  const   uint8_t   bitmap :: logo_eurobot_90x64 []   ;  const   uint8_t   bitmap :: logo_modm_90x64 []   ;  const   uint8_t   bitmap :: logo_rca_90x64 []   ;  const   uint8_t   bitmap :: skull_64x64 []   ;  const   uint8_t   modm :: font :: AllCaps3x5 []   ;  const   uint8_t   modm :: font :: ArcadeClassic []   ;  const   uint8_t   modm :: font :: Assertion []   ;  const   uint8_t   modm :: font :: FixedWidth5x8 []   ;  const   uint8_t   modm :: font :: Matrix8x8 []   ;  const   uint8_t   modm :: font :: Numbers14x32 []   ;  const   uint8_t   modm :: font :: Numbers40x57 []   ;  const   uint8_t   modm :: font :: Numbers46x64 []   ;  const   uint8_t   modm :: font :: ScriptoNarrow []   ;  const   uint8_t   modm :: font :: Ubuntu_36 []   ;  int16_t   modm :: gui :: uid_global   =   0 ;  modm :: accessor :: Flash < uint16_t >   modm :: ui :: table22_10_256   ;  modm :: accessor :: Flash < uint16_t >   modm :: ui :: table22_12_256   ;  modm :: accessor :: Flash < uint16_t >   modm :: ui :: table22_16_256   ;  modm :: accessor :: Flash < uint8_t >   modm :: ui :: table22_7_256   ;  modm :: accessor :: Flash < uint8_t >   modm :: ui :: table22_8_256   ;  // Typedef  typedef   HsvT   modm :: color :: Hsv ;  typedef   NumberField < int16_t >   modm :: gui :: IntegerField ;  typedef   NumberRocker < float >   modm :: gui :: FloatRocker ;  typedef   NumberRocker < int16_t >   modm :: gui :: IntegerRocker ;  typedef   RgbT   modm :: color :: Rgb ;  typedef   Vector < int16_t ,   2 >   modm :: glcd :: Point ;  typedef   modm :: DoublyLinkedList < AsyncEvent *>   modm :: gui :: AsyncEventList ;  typedef   modm :: DynamicArray < Widget *>   modm :: gui :: WidgetContainer ;  typedef   modm :: Queue < InputEvent * ,   modm :: LinkedList < InputEvent *>   >   modm :: gui :: inputQueue ;  typedef   modm :: glcd :: Point   modm :: gui :: Point ;  typedef   struct   modm :: gui :: Dimension    modm :: gui :: Dimension ;  typedef   void ( *   modm :: gui :: eventCallback )   ( const   InputEvent   & ,   Widget   * ,   void   * ))( const   InputEvent   & ,   Widget   * ,   void   * );  typedef   void ( *   modm :: gui :: genericCallback )   ( void   * ))( void   * );  // Define  #define NULL",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-ui/#dependencies",
            "text": "modm:ui     modm_ui   modm:  ui     modm_ui_animation    modm:  ui:  animation       modm_ui_animation->modm_ui       modm_ui_button    modm:  ui:  button       modm_ui_button->modm_ui       modm_ui_color    modm:  ui:  color       modm_ui_color->modm_ui       modm_ui_display    modm:  ui:  display       modm_ui_display->modm_ui       modm_ui_gui    modm:  ui:  gui       modm_ui_gui->modm_ui       modm_ui_led    modm:  ui:  led       modm_ui_led->modm_ui       modm_ui_menu    modm:  ui:  menu       modm_ui_menu->modm_ui       modm_ui_time    modm:  ui:  time       modm_ui_time->modm_ui",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-ui-animation/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:ui:animation\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nui\n::\nAnimation\n<\n \ntypename\n \nT\n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nui\n::\nFastRamp\n<\n \ntypename\n \nT\n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nui\n::\nIndicator\n<\n \ntypename\n \nT\n \n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nui\n::\nKeyFrameAnimation\n<\n \ntypename\n \nT\n=\nuint8_t\n,\n \nuint8_t\n \nN\n=\n1\n \n>\n;\n\n\nclass\n \nmodm\n::\nui\n::\nPulse\n<\n \ntypename\n \nT\n \n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\nui\n::\nStrobe\n<\n \ntypename\n \nT\n \n=\nuint8_t\n \n>\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nui\n::\nFastRamp\n::\nComputations\n<\n \nType\n,\n \nuint16_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nui\n::\nFastRamp\n::\nComputations\n<\n \nType\n,\n \nuint32_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nui\n::\nFastRamp\n::\nComputations\n<\n \nType\n,\n \nuint8_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nui\n::\nFastRamp\n::\nComputations\n<\n \ntypename\n \nType\n,\n \ntypename\n \nUnsigned\n \n>\n;\n\n\nstruct\n \nmodm\n::\nui\n::\nKeyFrame\n<\n \ntypename\n \nT\n=\nuint8_t\n,\n \nuint8_t\n \nN\n=\n1\n \n>\n;\n\n\n\n// Enum\n\n\nenum\n \nclass\n \nKeyFrameAnimationMode\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:ui:animation\n\n\n\n\n\n\n\n\nmodm_ui_animation\n\n\n\n\nmodm:\n\n\nui:\n\n\nanimation\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_animation->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui\n\n\n\n\n\n\nmodm:\n\n\nui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_animation->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_animation->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nled\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led->modm_ui_animation",
            "title": "modm:ui:animation"
        },
        {
            "location": "/reference/module/modm-ui-animation/#modmuianimation",
            "text": "",
            "title": "modm:ui:animation"
        },
        {
            "location": "/reference/module/modm-ui-animation/#content",
            "text": "// Class  class   modm :: ui :: Animation <   typename   T = uint8_t   > ;  class   modm :: ui :: FastRamp <   typename   T = uint8_t   > ;  class   modm :: ui :: Indicator <   typename   T   = uint8_t   > ;  class   modm :: ui :: KeyFrameAnimation <   typename   T = uint8_t ,   uint8_t   N = 1   > ;  class   modm :: ui :: Pulse <   typename   T   = uint8_t   > ;  class   modm :: ui :: Strobe <   typename   T   = uint8_t   > ;  // Struct  struct   modm :: ui :: FastRamp :: Computations <   Type ,   uint16_t   > ;  struct   modm :: ui :: FastRamp :: Computations <   Type ,   uint32_t   > ;  struct   modm :: ui :: FastRamp :: Computations <   Type ,   uint8_t   > ;  struct   modm :: ui :: FastRamp :: Computations <   typename   Type ,   typename   Unsigned   > ;  struct   modm :: ui :: KeyFrame <   typename   T = uint8_t ,   uint8_t   N = 1   > ;  // Enum  enum   class   KeyFrameAnimationMode ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-ui-animation/#dependencies",
            "text": "modm:ui:animation     modm_ui_animation   modm:  ui:  animation     modm_architecture_clock    modm:  architecture:  clock       modm_ui_animation->modm_architecture_clock       modm_ui    modm:  ui       modm_ui_animation->modm_ui       modm_utils    modm:  utils       modm_ui_animation->modm_utils       modm_ui_led    modm:  ui:  led       modm_ui_led->modm_ui_animation",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-ui-button/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:ui:button\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nButton\n<\n \ntypename\n \nPIN\n  \n>\n;\n\n\nclass\n \nmodm\n::\nButtonGroup\n<\n \ntypename\n \nT\n \n=\nuint8_t\n \n>\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:ui:button\n\n\n\n\n\n\n\n\nmodm_ui_button\n\n\n\n\nmodm:\n\n\nui:\n\n\nbutton\n\n\n\n\n\n\n\n\nmodm_architecture_atomic\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\natomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_button->modm_architecture_atomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui\n\n\n\n\n\n\nmodm:\n\n\nui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_button->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_ui\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_ui->modm_ui_button",
            "title": "modm:ui:button"
        },
        {
            "location": "/reference/module/modm-ui-button/#modmuibutton",
            "text": "",
            "title": "modm:ui:button"
        },
        {
            "location": "/reference/module/modm-ui-button/#content",
            "text": "// Class  class   modm :: Button <   typename   PIN    > ;  class   modm :: ButtonGroup <   typename   T   = uint8_t   > ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-ui-button/#dependencies",
            "text": "modm:ui:button     modm_ui_button   modm:  ui:  button     modm_architecture_atomic    modm:  architecture:  atomic       modm_ui_button->modm_architecture_atomic       modm_ui    modm:  ui       modm_ui_button->modm_ui       modm_test_ui    modm:  test:  ui       modm_test_ui->modm_ui_button",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-ui-color/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:ui:color\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\ncolor\n::\nHsvT\n<\n \nclass\n \nUnderlyingType\n=\nuint8_t\n \n>\n;\n\n\nclass\n \nmodm\n::\ncolor\n::\nRgbT\n<\n \nclass\n \nUnderlyingType\n \n=\nuint8_t\n \n>\n;\n\n\n\n// Function\n\n\nIOStream\n&\n \nmodm\n::\ncolor\n::\noperator\n<<\n(\nIOStream\n \n&\nos\n,\n \nconst\n \ncolor\n::\nRgbT\n<\n \nUnderlyingType\n \n>\n \n&\ncolor\n);\n\n\n\n// Typedef\n\n\ntypedef\n \nHsvT\n \nmodm\n::\ncolor\n::\nHsv\n;\n\n\ntypedef\n \nRgbT\n \nmodm\n::\ncolor\n::\nRgb\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:ui:color\n\n\n\n\n\n\n\n\nmodm_ui_color\n\n\n\n\nmodm:\n\n\nui:\n\n\ncolor\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui\n\n\n\n\n\n\nmodm:\n\n\nui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3414\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntcs3414\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3414->modm_ui_color\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3472\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\ntcs3472\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_tcs3472->modm_ui_color\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nled\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led->modm_ui_color",
            "title": "modm:ui:color"
        },
        {
            "location": "/reference/module/modm-ui-color/#modmuicolor",
            "text": "",
            "title": "modm:ui:color"
        },
        {
            "location": "/reference/module/modm-ui-color/#content",
            "text": "// Class  class   modm :: color :: HsvT <   class   UnderlyingType = uint8_t   > ;  class   modm :: color :: RgbT <   class   UnderlyingType   = uint8_t   > ;  // Function  IOStream &   modm :: color :: operator << ( IOStream   & os ,   const   color :: RgbT <   UnderlyingType   >   & color );  // Typedef  typedef   HsvT   modm :: color :: Hsv ;  typedef   RgbT   modm :: color :: Rgb ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-ui-color/#dependencies",
            "text": "modm:ui:color     modm_ui_color   modm:  ui:  color     modm_io    modm:  io       modm_ui_color->modm_io       modm_math_utils    modm:  math:  utils       modm_ui_color->modm_math_utils       modm_ui    modm:  ui       modm_ui_color->modm_ui       modm_utils    modm:  utils       modm_ui_color->modm_utils       modm_driver_tcs3414    modm:  driver:  tcs3414       modm_driver_tcs3414->modm_ui_color       modm_driver_tcs3472    modm:  driver:  tcs3472       modm_driver_tcs3472->modm_ui_color       modm_ui_led    modm:  ui:  led       modm_ui_led->modm_ui_color",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-ui-display/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:ui:display\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nBufferedGraphicDisplay\n<\n \nuint16_t\n \nWidth\n,\n \nuint16_t\n \nHeight\n \n>\n;\n\n\nclass\n \nmodm\n::\nCharacterDisplay\n::\nWriter\n;\n\n\nclass\n \nmodm\n::\nCharacterDisplay\n;\n\n\nclass\n \nmodm\n::\nGraphicDisplay\n::\nWriter\n;\n\n\nclass\n \nmodm\n::\nGraphicDisplay\n;\n\n\nclass\n \nmodm\n::\nVirtualGraphicDisplay\n;\n\n\nclass\n \nmodm\n::\nglcd\n::\nColor\n;\n\n\n\n// Variable\n\n\nconst\n \nuint8_t\n \nbitmap\n::\nhome_16x16\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nbitmap\n::\nlogo_eurobot_90x64\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nbitmap\n::\nlogo_modm_90x64\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nbitmap\n::\nlogo_rca_90x64\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nbitmap\n::\nskull_64x64\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nAllCaps3x5\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nArcadeClassic\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nAssertion\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nFixedWidth5x8\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nMatrix8x8\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nNumbers14x32\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nNumbers40x57\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nNumbers46x64\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nScriptoNarrow\n[]\n \n;\n\n\nconst\n \nuint8_t\n \nmodm\n::\nfont\n::\nUbuntu_36\n[]\n \n;\n\n\n\n// Typedef\n\n\ntypedef\n \nVector\n<\nint16_t\n,\n \n2\n>\n \nmodm\n::\nglcd\n::\nPoint\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:ui:display\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_geometry\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\ngeometry\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display->modm_math_geometry\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_utils\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nutils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display->modm_math_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui\n\n\n\n\n\n\nmodm:\n\n\nui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni\n\n\n\n\n\n\nmodm:\n\n\nboard:\n\n\ndisco-f469ni\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_board_disco-f469ni->modm_ui_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ads7843\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nads7843\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ads7843->modm_ui_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ea_dog\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nea_dog\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ea_dog->modm_ui_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hd44780\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nhd44780\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_hd44780->modm_ui_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max7219\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nmax7219\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_max7219->modm_ui_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nokia5110\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nnokia5110\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nokia5110->modm_ui_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_parallel_tft_display\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nparallel_tft_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_parallel_tft_display->modm_ui_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s65\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nsiemens_s65\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s65->modm_ui_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s75\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nsiemens_s75\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_siemens_s75->modm_ui_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ssd1306\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nssd1306\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ssd1306->modm_ui_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ngui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_ui_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nmenu\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu->modm_ui_display",
            "title": "modm:ui:display"
        },
        {
            "location": "/reference/module/modm-ui-display/#modmuidisplay",
            "text": "",
            "title": "modm:ui:display"
        },
        {
            "location": "/reference/module/modm-ui-display/#content",
            "text": "// Class  class   modm :: BufferedGraphicDisplay <   uint16_t   Width ,   uint16_t   Height   > ;  class   modm :: CharacterDisplay :: Writer ;  class   modm :: CharacterDisplay ;  class   modm :: GraphicDisplay :: Writer ;  class   modm :: GraphicDisplay ;  class   modm :: VirtualGraphicDisplay ;  class   modm :: glcd :: Color ;  // Variable  const   uint8_t   bitmap :: home_16x16 []   ;  const   uint8_t   bitmap :: logo_eurobot_90x64 []   ;  const   uint8_t   bitmap :: logo_modm_90x64 []   ;  const   uint8_t   bitmap :: logo_rca_90x64 []   ;  const   uint8_t   bitmap :: skull_64x64 []   ;  const   uint8_t   modm :: font :: AllCaps3x5 []   ;  const   uint8_t   modm :: font :: ArcadeClassic []   ;  const   uint8_t   modm :: font :: Assertion []   ;  const   uint8_t   modm :: font :: FixedWidth5x8 []   ;  const   uint8_t   modm :: font :: Matrix8x8 []   ;  const   uint8_t   modm :: font :: Numbers14x32 []   ;  const   uint8_t   modm :: font :: Numbers40x57 []   ;  const   uint8_t   modm :: font :: Numbers46x64 []   ;  const   uint8_t   modm :: font :: ScriptoNarrow []   ;  const   uint8_t   modm :: font :: Ubuntu_36 []   ;  // Typedef  typedef   Vector < int16_t ,   2 >   modm :: glcd :: Point ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-ui-display/#dependencies",
            "text": "modm:ui:display     modm_ui_display   modm:  ui:  display     modm_architecture_accessor    modm:  architecture:  accessor       modm_ui_display->modm_architecture_accessor       modm_io    modm:  io       modm_ui_display->modm_io       modm_math_geometry    modm:  math:  geometry       modm_ui_display->modm_math_geometry       modm_math_utils    modm:  math:  utils       modm_ui_display->modm_math_utils       modm_ui    modm:  ui       modm_ui_display->modm_ui       modm_board_disco-f469ni    modm:  board:  disco-f469ni       modm_board_disco-f469ni->modm_ui_display       modm_driver_ads7843    modm:  driver:  ads7843       modm_driver_ads7843->modm_ui_display       modm_driver_ea_dog    modm:  driver:  ea_dog       modm_driver_ea_dog->modm_ui_display       modm_driver_hd44780    modm:  driver:  hd44780       modm_driver_hd44780->modm_ui_display       modm_driver_max7219    modm:  driver:  max7219       modm_driver_max7219->modm_ui_display       modm_driver_nokia5110    modm:  driver:  nokia5110       modm_driver_nokia5110->modm_ui_display       modm_driver_parallel_tft_display    modm:  driver:  parallel_tft_display       modm_driver_parallel_tft_display->modm_ui_display       modm_driver_siemens_s65    modm:  driver:  siemens_s65       modm_driver_siemens_s65->modm_ui_display       modm_driver_siemens_s75    modm:  driver:  siemens_s75       modm_driver_siemens_s75->modm_ui_display       modm_driver_ssd1306    modm:  driver:  ssd1306       modm_driver_ssd1306->modm_ui_display       modm_ui_gui    modm:  ui:  gui       modm_ui_gui->modm_ui_display       modm_ui_menu    modm:  ui:  menu       modm_ui_menu->modm_ui_display",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-ui-gui/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:ui:gui\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\ngui\n::\nArrowButton\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nAsyncEvent\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nButtonWidget\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nCheckboxWidget\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nColorPalette\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nFilledAreaButton\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nFloatField\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nGuiViewStack\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nInputEvent\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nLabel\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nNumberField\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nNumberRocker\n<\n \ntypename\n \nT\n \n=\nint16_t\n \n>\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nStringField\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nStringRocker\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nTabPanel\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nView\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nWidget\n;\n\n\nclass\n \nmodm\n::\ngui\n::\nWidgetGroup\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\ngui\n::\nDimension\n;\n\n\n\n// Enum\n\n\nenum\n \nColor\n;\n\n\n\n// Variable\n\n\nColorPalette\n \nmodm\n::\ngui\n::\nDefaultColorPalette\n \n;\n\n\nint16_t\n \nmodm\n::\ngui\n::\nuid_global\n \n=\n \n0\n;\n\n\n\n// Typedef\n\n\ntypedef\n \nNumberField\n<\nint16_t\n>\n \nmodm\n::\ngui\n::\nIntegerField\n;\n\n\ntypedef\n \nNumberRocker\n<\nfloat\n>\n \nmodm\n::\ngui\n::\nFloatRocker\n;\n\n\ntypedef\n \nNumberRocker\n<\nint16_t\n>\n \nmodm\n::\ngui\n::\nIntegerRocker\n;\n\n\ntypedef\n \nmodm\n::\nDoublyLinkedList\n<\nAsyncEvent\n*>\n \nmodm\n::\ngui\n::\nAsyncEventList\n;\n\n\ntypedef\n \nmodm\n::\nDynamicArray\n<\nWidget\n*>\n \nmodm\n::\ngui\n::\nWidgetContainer\n;\n\n\ntypedef\n \nmodm\n::\nQueue\n<\nInputEvent\n*\n,\n \nmodm\n::\nLinkedList\n<\nInputEvent\n*>\n \n>\n \nmodm\n::\ngui\n::\ninputQueue\n;\n\n\ntypedef\n \nmodm\n::\nglcd\n::\nPoint\n \nmodm\n::\ngui\n::\nPoint\n;\n\n\ntypedef\n \nstruct\n \nmodm\n::\ngui\n::\nDimension\n  \nmodm\n::\ngui\n::\nDimension\n;\n\n\ntypedef\n \nvoid\n(\n*\n \nmodm\n::\ngui\n::\neventCallback\n)\n \n(\nconst\n \nInputEvent\n \n&\n,\n \nWidget\n \n*\n,\n \nvoid\n \n*\n))(\nconst\n \nInputEvent\n \n&\n,\n \nWidget\n \n*\n,\n \nvoid\n \n*\n);\n\n\ntypedef\n \nvoid\n(\n*\n \nmodm\n::\ngui\n::\ngenericCallback\n)\n \n(\nvoid\n \n*\n))(\nvoid\n \n*\n);\n\n\n\n// Define\n\n\n#define NULL\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:ui:gui\n\n\n\n\n\n\n\n\nmodm_ui_gui\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ngui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_ui_gui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_ui_gui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container\n\n\n\n\n\n\nmodm:\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_debug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui\n\n\n\n\n\n\nmodm:\n\n\nui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_ui_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nmenu\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_ui_menu",
            "title": "modm:ui:gui"
        },
        {
            "location": "/reference/module/modm-ui-gui/#modmuigui",
            "text": "",
            "title": "modm:ui:gui"
        },
        {
            "location": "/reference/module/modm-ui-gui/#content",
            "text": "// Class  class   modm :: gui :: ArrowButton ;  class   modm :: gui :: AsyncEvent ;  class   modm :: gui :: ButtonWidget ;  class   modm :: gui :: CheckboxWidget ;  class   modm :: gui :: ColorPalette ;  class   modm :: gui :: FilledAreaButton ;  class   modm :: gui :: FloatField ;  class   modm :: gui :: GuiViewStack ;  class   modm :: gui :: InputEvent ;  class   modm :: gui :: Label ;  class   modm :: gui :: NumberField <   typename   T   > ;  class   modm :: gui :: NumberRocker <   typename   T   = int16_t   > ;  class   modm :: gui :: StringField ;  class   modm :: gui :: StringRocker ;  class   modm :: gui :: TabPanel ;  class   modm :: gui :: View ;  class   modm :: gui :: Widget ;  class   modm :: gui :: WidgetGroup ;  // Struct  struct   modm :: gui :: Dimension ;  // Enum  enum   Color ;  // Variable  ColorPalette   modm :: gui :: DefaultColorPalette   ;  int16_t   modm :: gui :: uid_global   =   0 ;  // Typedef  typedef   NumberField < int16_t >   modm :: gui :: IntegerField ;  typedef   NumberRocker < float >   modm :: gui :: FloatRocker ;  typedef   NumberRocker < int16_t >   modm :: gui :: IntegerRocker ;  typedef   modm :: DoublyLinkedList < AsyncEvent *>   modm :: gui :: AsyncEventList ;  typedef   modm :: DynamicArray < Widget *>   modm :: gui :: WidgetContainer ;  typedef   modm :: Queue < InputEvent * ,   modm :: LinkedList < InputEvent *>   >   modm :: gui :: inputQueue ;  typedef   modm :: glcd :: Point   modm :: gui :: Point ;  typedef   struct   modm :: gui :: Dimension    modm :: gui :: Dimension ;  typedef   void ( *   modm :: gui :: eventCallback )   ( const   InputEvent   & ,   Widget   * ,   void   * ))( const   InputEvent   & ,   Widget   * ,   void   * );  typedef   void ( *   modm :: gui :: genericCallback )   ( void   * ))( void   * );  // Define  #define NULL",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-ui-gui/#dependencies",
            "text": "modm:ui:gui     modm_ui_gui    modm:  ui:  gui       modm_ui_gui->modm_ui_gui       modm_ui_gui->modm_ui_gui       modm_container    modm:  container       modm_ui_gui->modm_container       modm_debug    modm:  debug       modm_ui_gui->modm_debug       modm_processing_timer    modm:  processing:  timer       modm_ui_gui->modm_processing_timer       modm_ui    modm:  ui       modm_ui_gui->modm_ui       modm_ui_display    modm:  ui:  display       modm_ui_gui->modm_ui_display       modm_ui_menu    modm:  ui:  menu       modm_ui_gui->modm_ui_menu",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-ui-led/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:ui:led: LED Animation and Gamma Correction\n\u00b6\n\n\nHeader: \n#include <modm/ui/led.hpp>\n\n\nThis module provides abstractions for animating LEDs by wrapping the \n\nmodm:ui:animation\n module and providing look-up tables for performing\ngamma correction of LED brightness.\n\n\nThe main functionality is part of the \nmodm::ui::Led\n class, which provides\na basic interface to fade an LED with an 8-bit value.\nNote that this class does \nnot\n do any gamma correction on it's own, it just\nwraps an 8-bit \nmodm::ui::Animation\n and a 8-bit value.\n\n\nYou must provide a function handler which gets called whenever the LED value \nneeds updating, at most every 1ms, but only when the value has actually changed.\nThe implementation of this function is up to you.\n\n\n\n\n\nvoid\n \nled_handler\n(\nuint8_t\n \nbrightness\n)\n\n\n{\n\n    \n// LED control implementation = brightness\n\n\n}\n\n\nmodm\n::\nui\n::\nLed\n \nled_function\n(\nled_handler\n);\n\n\n// You may also use a lambda function for brevity\n\n\nmodm\n::\nui\n::\nLed\n \nled_lambda\n([](\nuint8_t\n \nbrightness\n)\n\n\n{\n\n    \n// LED control implementation = brightness\n\n\n});\n\n\n\n\n\nAnimating LEDs\n\u00b6\n\n\nTo animate the LED you need to call the \nmodm::ui::Led::update()\n member \nfunction regularly.\nThe function updates the LED value at most every 1ms, however you may call it\nmore often than that. If the function is called less regularly, it will \nautomatically catch up the skipped milliseconds, and execute the brightness \nhandler at most once if the value has changed.\nDepending on how smooth you require your animation to be, you may call the \nupdate function with intervals of up to 250ms.\n\n\nYou can also pass the \nmodm::ui::Led\n class directly into the \n\nmodm::ui::KeyFrameAnimation\n class and it's derivatives, to animate it's\nbrightness by interpolating between key frames.\nNote that you need to call the \nupdate()\n members of both classes!\n\n\n\n\n\nmodm\n::\nui\n::\nLed\n \nled\n;\n\n\nmodm\n::\nui\n::\nIndicator\n<\nuint8_t\n>\n \nindicator\n(\nled\n);\n\n\nindicator\n.\nstart\n();\n\n\n\nwhile\n(\n1\n)\n\n\n{\n\n    \nindicator\n.\nupdate\n();\n\n    \nled\n.\nupdate\n();\n\n\n}\n\n\n\n\n\nIf you want to animate a lot of LEDs it is more efficient to execute all update\nmethods inside a 1ms \nmodm::PeriodicTimer\n:\n\n\n\n\n\nmodm\n::\nPeriodicTimer\n \nupdate_timer\n(\n1\n);\n\n\n\nwhile\n(\n1\n)\n \n\n{\n\n    \nif\n \n(\nupdate_timer\n.\nexecute\n())\n\n    \n{\n\n        \nled1\n.\nupdate\n();\n\n        \nled2\n.\nupdate\n();\n\n        \n// ...\n\n        \nledN\n.\nupdate\n();\n\n    \n}\n\n\n}\n\n\n\n\n\nUsing Gamma Correction\n\u00b6\n\n\nIn order to map the linearly animated brightness value to a gamma-corrected\nvalue, this module by default generates look-up tables for a gamma value of 2.2\nmapping from a 256 input range to 7, 8, 10, 12 and 16 bit resolution output \nranges. The generated tables have this naming schema:\n\nmodm::ui::table{gamma}_{output_bits}_{input_range}\n.\n\n\nFor example, you can set up a timer to output 16-bit PWM to drive your LED, and\nuse the \nmodm::ui::table22_16_256\n table to map the linear LED animation values\nto a gamma corrected 16-bit value:\n\n\n\n\n\nmodm\n::\nui\n::\nLed\n \nled_timer\n([](\nuint8_t\n \nbrightness\n)\n\n\n{\n\n    \nTimer4\n::\nsetCompareValue\n(\n1\n,\n \nmodm\n::\nui\n::\ntable22_16_256\n[\nbrightness\n]);\n\n\n});\n\n\n\n\n\nYou may also generate other tables using the module options, for example, if\nyou want to map a percentage (0-100%) to LED brightness, without scaling this\nto the full 256 value range, you can also generate a 100 value look-up table:\n\n\n<option\n \nname=\n\"modm:ui:led:range\"\n>\n100,256\n</option>\n\n\n<option\n \nname=\n\"modm:ui:led:bit\"\n>\n8,16\n</option>\n\n\n\n\n\nThis module generated the product of these options, in this case 4 look-up \ntables. The linker will throw out those you don't use.\n\n\nnamespace\n \nmodm\n::\nui\n\n\n{\n\n    \n/// 2.2 gamma correction with 8-bit resolution (0 to 255) in 100 steps at 100 bytes.\n\n    \nextern\n \nmodm\n::\naccessor\n::\nFlash\n<\nuint8_t\n>\n \ntable22_8_100\n;\n\n    \n/// 2.2 gamma correction with 8-bit resolution (0 to 255) in 256 steps at 256 bytes.\n\n    \nextern\n \nmodm\n::\naccessor\n::\nFlash\n<\nuint8_t\n>\n \ntable22_8_256\n;\n\n    \n/// 2.2 gamma correction with 16-bit resolution (0 to 65535) in 100 steps at 200 bytes.\n\n    \nextern\n \nmodm\n::\naccessor\n::\nFlash\n<\nuint16_t\n>\n \ntable22_16_100\n;\n\n    \n/// 2.2 gamma correction with 16-bit resolution (0 to 65535) in 256 steps at 512 bytes.\n\n    \nextern\n \nmodm\n::\naccessor\n::\nFlash\n<\nuint16_t\n>\n \ntable22_16_256\n;\n\n\n}\n\n\n\n\n\nYou can then animate your LED in the 0-99 value range:\n\n\n\n\n\nmodm\n::\nui\n::\nLed\n \nled_percentage\n([](\nuint8_t\n \nbrightness\n)\n\n\n{\n\n    \nif\n \n(\nbrightness\n \n>=\n \n100\n)\n \nbrightness\n \n=\n \n99\n;\n\n    \nTimer4\n::\nsetCompareValue\n(\n1\n,\n \nmodm\n::\nui\n::\ntable22_16_100\n[\nbrightness\n]);\n\n\n});\n\n\nuint8_t\n \npercent\n \n=\n \n50\n;\n\n\n// fade to 50% brightness within 1 second\n\n\nled_percentage\n.\nfadeTo\n(\npercent\n,\n \n1000\n);\n\n\n\n\n\nNote that you can also use the handler to animate LEDs which are connected\nexternally, for example, via a WS2812 LED chain.\nHere you can use a helper function to map the values into an array which then\ntransferred into the WS2812 LED chain.\n\n\n\n\n\nuint8_t\n \nws2812_values\n[\n3\n];\n\n\nvoid\n \nws2812_setter\n(\nuint8_t\n \nindex\n,\n \nuint8_t\n \nbrightness\n)\n \n\n{\n\n    \nws2812_values\n[\nindex\n]\n \n=\n \nmodm\n::\nui\n::\ntable22_8_256\n[\nbrightness\n];\n\n\n}\n\n\n// Construct an array of LED animators\n\n\nmodm\n::\nui\n::\nLed\n \nleds\n[\n3\n]\n \n=\n \n\n{\n\n    \n{\n \n[](\nuint8_t\n \nb\n)\n \n{\n \nws2812_setter\n(\n0\n,\n \nb\n);\n \n}\n \n},\n\n    \n{\n \n[](\nuint8_t\n \nb\n)\n \n{\n \nws2812_setter\n(\n1\n,\n \nb\n);\n \n}\n \n},\n\n    \n{\n \n[](\nuint8_t\n \nb\n)\n \n{\n \nws2812_setter\n(\n2\n,\n \nb\n);\n \n}\n \n},\n\n\n};\n\n\n// Group them together as one RGB LED\n\n\nmodm\n::\nui\n::\nRgbLed\n \nrgb\n(\nleds\n[\n1\n],\n \nleds\n[\n0\n],\n \nleds\n[\n2\n]);\n\n\n// animate to orange within 2 seconds\n\n\nrgb\n.\nfadeTo\n(\nmodm\n::\nui\n::\nRgb\n(\n95\n,\n \n177\n,\n \n147\n),\n \n2000\n);\n\n\n\n\n\n\n\n\n\n\n\nOptions\n\u00b6\n\n\ngamma\n\u00b6\n\n\nGamma correction of values: \n[2.2]\n \u2208 \n{ 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5 }\n\n\nbit\n\u00b6\n\n\nResolution of target values: \n[7, 8, 10, 12, 16]\n \u2208 \n{ 10, 11, 12, 13, 14, 15, 16, 4, 5, 6, 7, 8, 9 }\n\n\nrange\n\u00b6\n\n\nRange of input values: \n[256]\n \u2208 \n{ 10, 100, 1000, 1024, 128, 16, 20, 200, 256, 32, 50, 500, 512, 64 }\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nui\n::\nLed\n;\n\n\nclass\n \nmodm\n::\nui\n::\nRgbLed\n;\n\n\n\n// Variable\n\n\nmodm\n::\naccessor\n::\nFlash\n<\nuint16_t\n>\n \nmodm\n::\nui\n::\ntable22_10_256\n \n;\n\n\nmodm\n::\naccessor\n::\nFlash\n<\nuint16_t\n>\n \nmodm\n::\nui\n::\ntable22_12_256\n \n;\n\n\nmodm\n::\naccessor\n::\nFlash\n<\nuint16_t\n>\n \nmodm\n::\nui\n::\ntable22_16_256\n \n;\n\n\nmodm\n::\naccessor\n::\nFlash\n<\nuint8_t\n>\n \nmodm\n::\nui\n::\ntable22_7_256\n \n;\n\n\nmodm\n::\naccessor\n::\nFlash\n<\nuint8_t\n>\n \nmodm\n::\nui\n::\ntable22_8_256\n \n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:ui:led\n\n\n\n\n\n\n\n\nmodm_ui_led\n\n\n\n\nmodm:\n\n\nui:\n\n\nled\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_clock\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led->modm_architecture_clock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui\n\n\n\n\n\n\nmodm:\n\n\nui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_animation\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nanimation\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led->modm_ui_animation\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ncolor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_led->modm_ui_color",
            "title": "modm:ui:led"
        },
        {
            "location": "/reference/module/modm-ui-led/#modmuiled-led-animation-and-gamma-correction",
            "text": "Header:  #include <modm/ui/led.hpp>  This module provides abstractions for animating LEDs by wrapping the  modm:ui:animation  module and providing look-up tables for performing\ngamma correction of LED brightness.  The main functionality is part of the  modm::ui::Led  class, which provides\na basic interface to fade an LED with an 8-bit value.\nNote that this class does  not  do any gamma correction on it's own, it just\nwraps an 8-bit  modm::ui::Animation  and a 8-bit value.  You must provide a function handler which gets called whenever the LED value \nneeds updating, at most every 1ms, but only when the value has actually changed.\nThe implementation of this function is up to you.   void   led_handler ( uint8_t   brightness )  { \n     // LED control implementation = brightness  }  modm :: ui :: Led   led_function ( led_handler );  // You may also use a lambda function for brevity  modm :: ui :: Led   led_lambda ([]( uint8_t   brightness )  { \n     // LED control implementation = brightness  });",
            "title": "modm:ui:led: LED Animation and Gamma Correction"
        },
        {
            "location": "/reference/module/modm-ui-led/#animating-leds",
            "text": "To animate the LED you need to call the  modm::ui::Led::update()  member \nfunction regularly.\nThe function updates the LED value at most every 1ms, however you may call it\nmore often than that. If the function is called less regularly, it will \nautomatically catch up the skipped milliseconds, and execute the brightness \nhandler at most once if the value has changed.\nDepending on how smooth you require your animation to be, you may call the \nupdate function with intervals of up to 250ms.  You can also pass the  modm::ui::Led  class directly into the  modm::ui::KeyFrameAnimation  class and it's derivatives, to animate it's\nbrightness by interpolating between key frames.\nNote that you need to call the  update()  members of both classes!   modm :: ui :: Led   led ;  modm :: ui :: Indicator < uint8_t >   indicator ( led );  indicator . start ();  while ( 1 )  { \n     indicator . update (); \n     led . update ();  }   If you want to animate a lot of LEDs it is more efficient to execute all update\nmethods inside a 1ms  modm::PeriodicTimer :   modm :: PeriodicTimer   update_timer ( 1 );  while ( 1 )   { \n     if   ( update_timer . execute ()) \n     { \n         led1 . update (); \n         led2 . update (); \n         // ... \n         ledN . update (); \n     }  }",
            "title": "Animating LEDs"
        },
        {
            "location": "/reference/module/modm-ui-led/#using-gamma-correction",
            "text": "In order to map the linearly animated brightness value to a gamma-corrected\nvalue, this module by default generates look-up tables for a gamma value of 2.2\nmapping from a 256 input range to 7, 8, 10, 12 and 16 bit resolution output \nranges. The generated tables have this naming schema: modm::ui::table{gamma}_{output_bits}_{input_range} .  For example, you can set up a timer to output 16-bit PWM to drive your LED, and\nuse the  modm::ui::table22_16_256  table to map the linear LED animation values\nto a gamma corrected 16-bit value:   modm :: ui :: Led   led_timer ([]( uint8_t   brightness )  { \n     Timer4 :: setCompareValue ( 1 ,   modm :: ui :: table22_16_256 [ brightness ]);  });   You may also generate other tables using the module options, for example, if\nyou want to map a percentage (0-100%) to LED brightness, without scaling this\nto the full 256 value range, you can also generate a 100 value look-up table:  <option   name= \"modm:ui:led:range\" > 100,256 </option>  <option   name= \"modm:ui:led:bit\" > 8,16 </option>   This module generated the product of these options, in this case 4 look-up \ntables. The linker will throw out those you don't use.  namespace   modm :: ui  { \n     /// 2.2 gamma correction with 8-bit resolution (0 to 255) in 100 steps at 100 bytes. \n     extern   modm :: accessor :: Flash < uint8_t >   table22_8_100 ; \n     /// 2.2 gamma correction with 8-bit resolution (0 to 255) in 256 steps at 256 bytes. \n     extern   modm :: accessor :: Flash < uint8_t >   table22_8_256 ; \n     /// 2.2 gamma correction with 16-bit resolution (0 to 65535) in 100 steps at 200 bytes. \n     extern   modm :: accessor :: Flash < uint16_t >   table22_16_100 ; \n     /// 2.2 gamma correction with 16-bit resolution (0 to 65535) in 256 steps at 512 bytes. \n     extern   modm :: accessor :: Flash < uint16_t >   table22_16_256 ;  }   You can then animate your LED in the 0-99 value range:   modm :: ui :: Led   led_percentage ([]( uint8_t   brightness )  { \n     if   ( brightness   >=   100 )   brightness   =   99 ; \n     Timer4 :: setCompareValue ( 1 ,   modm :: ui :: table22_16_100 [ brightness ]);  });  uint8_t   percent   =   50 ;  // fade to 50% brightness within 1 second  led_percentage . fadeTo ( percent ,   1000 );   Note that you can also use the handler to animate LEDs which are connected\nexternally, for example, via a WS2812 LED chain.\nHere you can use a helper function to map the values into an array which then\ntransferred into the WS2812 LED chain.   uint8_t   ws2812_values [ 3 ];  void   ws2812_setter ( uint8_t   index ,   uint8_t   brightness )   { \n     ws2812_values [ index ]   =   modm :: ui :: table22_8_256 [ brightness ];  }  // Construct an array of LED animators  modm :: ui :: Led   leds [ 3 ]   =   { \n     {   []( uint8_t   b )   {   ws2812_setter ( 0 ,   b );   }   }, \n     {   []( uint8_t   b )   {   ws2812_setter ( 1 ,   b );   }   }, \n     {   []( uint8_t   b )   {   ws2812_setter ( 2 ,   b );   }   },  };  // Group them together as one RGB LED  modm :: ui :: RgbLed   rgb ( leds [ 1 ],   leds [ 0 ],   leds [ 2 ]);  // animate to orange within 2 seconds  rgb . fadeTo ( modm :: ui :: Rgb ( 95 ,   177 ,   147 ),   2000 );",
            "title": "Using Gamma Correction"
        },
        {
            "location": "/reference/module/modm-ui-led/#options",
            "text": "",
            "title": "Options"
        },
        {
            "location": "/reference/module/modm-ui-led/#gamma",
            "text": "Gamma correction of values:  [2.2]  \u2208  { 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5 }",
            "title": "gamma"
        },
        {
            "location": "/reference/module/modm-ui-led/#bit",
            "text": "Resolution of target values:  [7, 8, 10, 12, 16]  \u2208  { 10, 11, 12, 13, 14, 15, 16, 4, 5, 6, 7, 8, 9 }",
            "title": "bit"
        },
        {
            "location": "/reference/module/modm-ui-led/#range",
            "text": "Range of input values:  [256]  \u2208  { 10, 100, 1000, 1024, 128, 16, 20, 200, 256, 32, 50, 500, 512, 64 }",
            "title": "range"
        },
        {
            "location": "/reference/module/modm-ui-led/#content",
            "text": "// Class  class   modm :: ui :: Led ;  class   modm :: ui :: RgbLed ;  // Variable  modm :: accessor :: Flash < uint16_t >   modm :: ui :: table22_10_256   ;  modm :: accessor :: Flash < uint16_t >   modm :: ui :: table22_12_256   ;  modm :: accessor :: Flash < uint16_t >   modm :: ui :: table22_16_256   ;  modm :: accessor :: Flash < uint8_t >   modm :: ui :: table22_7_256   ;  modm :: accessor :: Flash < uint8_t >   modm :: ui :: table22_8_256   ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-ui-led/#dependencies",
            "text": "modm:ui:led     modm_ui_led   modm:  ui:  led     modm_architecture_accessor    modm:  architecture:  accessor       modm_ui_led->modm_architecture_accessor       modm_architecture_clock    modm:  architecture:  clock       modm_ui_led->modm_architecture_clock       modm_processing_timer    modm:  processing:  timer       modm_ui_led->modm_processing_timer       modm_ui    modm:  ui       modm_ui_led->modm_ui       modm_ui_animation    modm:  ui:  animation       modm_ui_led->modm_ui_animation       modm_ui_color    modm:  ui:  color       modm_ui_led->modm_ui_color",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-ui-menu/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:ui:menu\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nAbstractMenu\n;\n\n\nclass\n \nmodm\n::\nAbstractView\n;\n\n\nclass\n \nmodm\n::\nChoiceMenu\n;\n\n\nclass\n \nmodm\n::\nChoiceMenuEntry\n;\n\n\nclass\n \nmodm\n::\nCommunicatingView\n;\n\n\nclass\n \nmodm\n::\nCommunicatingViewStack\n;\n\n\nclass\n \nmodm\n::\nMenuEntryCallback\n;\n\n\nclass\n \nmodm\n::\nScrollableText\n;\n\n\nclass\n \nmodm\n::\nStandardMenu\n;\n\n\nclass\n \nmodm\n::\nViewStack\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nMenuEntry\n;\n\n\n\n// Enum\n\n\nenum\n \nButton\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:ui:menu\n\n\n\n\n\n\n\n\nmodm_ui_menu\n\n\n\n\nmodm:\n\n\nui:\n\n\nmenu\n\n\n\n\n\n\n\n\nmodm_communication_xpcc\n\n\n\n\n\n\nmodm:\n\n\ncommunication:\n\n\nxpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu->modm_communication_xpcc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container\n\n\n\n\n\n\nmodm:\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu->modm_container\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu->modm_processing_timer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui\n\n\n\n\n\n\nmodm:\n\n\nui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_display\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ndisplay\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_menu->modm_ui_display\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ngui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_gui->modm_ui_menu",
            "title": "modm:ui:menu"
        },
        {
            "location": "/reference/module/modm-ui-menu/#modmuimenu",
            "text": "",
            "title": "modm:ui:menu"
        },
        {
            "location": "/reference/module/modm-ui-menu/#content",
            "text": "// Class  class   modm :: AbstractMenu ;  class   modm :: AbstractView ;  class   modm :: ChoiceMenu ;  class   modm :: ChoiceMenuEntry ;  class   modm :: CommunicatingView ;  class   modm :: CommunicatingViewStack ;  class   modm :: MenuEntryCallback ;  class   modm :: ScrollableText ;  class   modm :: StandardMenu ;  class   modm :: ViewStack ;  // Struct  struct   modm :: MenuEntry ;  // Enum  enum   Button ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-ui-menu/#dependencies",
            "text": "modm:ui:menu     modm_ui_menu   modm:  ui:  menu     modm_communication_xpcc    modm:  communication:  xpcc       modm_ui_menu->modm_communication_xpcc       modm_container    modm:  container       modm_ui_menu->modm_container       modm_processing_timer    modm:  processing:  timer       modm_ui_menu->modm_processing_timer       modm_ui    modm:  ui       modm_ui_menu->modm_ui       modm_ui_display    modm:  ui:  display       modm_ui_menu->modm_ui_display       modm_ui_gui    modm:  ui:  gui       modm_ui_gui->modm_ui_menu",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-ui-time/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:ui:time\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nDate\n;\n\n\nclass\n \nmodm\n::\nUnixTime\n;\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:ui:time\n\n\n\n\n\n\n\n\nmodm_ui_time\n\n\n\n\nmodm:\n\n\nui:\n\n\ntime\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_time->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui\n\n\n\n\n\n\nmodm:\n\n\nui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_time->modm_ui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_ui\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nui\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_ui->modm_ui_time",
            "title": "modm:ui:time"
        },
        {
            "location": "/reference/module/modm-ui-time/#modmuitime",
            "text": "",
            "title": "modm:ui:time"
        },
        {
            "location": "/reference/module/modm-ui-time/#content",
            "text": "// Class  class   modm :: Date ;  class   modm :: UnixTime ;",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-ui-time/#dependencies",
            "text": "modm:ui:time     modm_ui_time   modm:  ui:  time     modm_architecture_accessor    modm:  architecture:  accessor       modm_ui_time->modm_architecture_accessor       modm_ui    modm:  ui       modm_ui_time->modm_ui       modm_test_ui    modm:  test:  ui       modm_test_ui->modm_ui_time",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-unittest/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:unittest\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nunittest\n::\nController\n;\n\n\nclass\n \nunittest\n::\nCountType\n;\n\n\nclass\n \nunittest\n::\nReporter\n;\n\n\nclass\n \nunittest\n::\nTestSuite\n;\n\n\n\n// Define\n\n\n#define TEST_ASSERT_EQUALS(x, y)\n\n\n#define TEST_ASSERT_EQUALS_ARRAY(array1, array2, count, start)\n\n\n#define TEST_ASSERT_EQUALS_DELTA(x, y, d)\n\n\n#define TEST_ASSERT_EQUALS_FLOAT(x, y)\n\n\n#define TEST_ASSERT_EQUALS_RANGE(value, lower, upper)\n\n\n#define TEST_ASSERT_FALSE(expr)\n\n\n#define TEST_ASSERT_TRUE(expr)\n\n\n#define TEST_FAIL(msg)\n\n\n#define TEST_FLOAT_EPISLON\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:unittest\n\n\n\n\n\n\n\n\nmodm_unittest\n\n\n\n\nmodm:\n\n\nunittest\n\n\n\n\n\n\n\n\nmodm_architecture_accessor\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\naccessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_unittest->modm_architecture_accessor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_unittest->modm_io\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test\n\n\n\n\n\n\nmodm:\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test->modm_unittest",
            "title": "modm:unittest"
        },
        {
            "location": "/reference/module/modm-unittest/#modmunittest",
            "text": "",
            "title": "modm:unittest"
        },
        {
            "location": "/reference/module/modm-unittest/#content",
            "text": "// Class  class   unittest :: Controller ;  class   unittest :: CountType ;  class   unittest :: Reporter ;  class   unittest :: TestSuite ;  // Define  #define TEST_ASSERT_EQUALS(x, y)  #define TEST_ASSERT_EQUALS_ARRAY(array1, array2, count, start)  #define TEST_ASSERT_EQUALS_DELTA(x, y, d)  #define TEST_ASSERT_EQUALS_FLOAT(x, y)  #define TEST_ASSERT_EQUALS_RANGE(value, lower, upper)  #define TEST_ASSERT_FALSE(expr)  #define TEST_ASSERT_TRUE(expr)  #define TEST_FAIL(msg)  #define TEST_FLOAT_EPISLON",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-unittest/#dependencies",
            "text": "modm:unittest     modm_unittest   modm:  unittest     modm_architecture_accessor    modm:  architecture:  accessor       modm_unittest->modm_architecture_accessor       modm_io    modm:  io       modm_unittest->modm_io       modm_test    modm:  test       modm_test->modm_unittest",
            "title": "Dependencies"
        },
        {
            "location": "/reference/module/modm-utils/",
            "text": "These module docs are in beta and may be incomplete.\n\n\n\n\nmodm:utils\n\u00b6\n\n\nContent\n\u00b6\n\n\n// Class\n\n\nclass\n \nmodm\n::\nallocator\n::\nAllocatorBase\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nallocator\n::\nBlock\n<\n \ntypename\n \nT\n \n,\n \nstd\n::\nsize_t\n \nBLOCKSIZE\n \n>\n;\n\n\nclass\n \nmodm\n::\nallocator\n::\nDynamic\n<\n \ntypename\n \nT\n \n>\n;\n\n\nclass\n \nmodm\n::\nallocator\n::\nStatic\n<\n \ntypename\n \nT\n \n,\n \nstd\n::\nsize_t\n \nN\n \n>\n;\n\n\nclass\n \nmodm\n::\ntmp\n::\nConversion\n<\n \ntypename\n \nT\n \n,\n \ntypename\n \nU\n  \n>\n;\n\n\nclass\n \nmodm\n::\ntmp\n::\nNullType\n;\n\n\n\n// Struct\n\n\nstruct\n \nmodm\n::\nArithmeticTraits\n<\n \nchar\n \n>\n;\n\n\nstruct\n \nmodm\n::\nArithmeticTraits\n<\n \ndouble\n \n>\n;\n\n\nstruct\n \nmodm\n::\nArithmeticTraits\n<\n \nfloat\n \n>\n;\n\n\nstruct\n \nmodm\n::\nArithmeticTraits\n<\n \nint16_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nArithmeticTraits\n<\n \nint32_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nArithmeticTraits\n<\n \nint64_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nArithmeticTraits\n<\n \nsigned\n \nchar\n \n>\n;\n\n\nstruct\n \nmodm\n::\nArithmeticTraits\n<\n \ntypename\n \nT\n  \n>\n;\n\n\nstruct\n \nmodm\n::\nArithmeticTraits\n<\n \nuint16_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nArithmeticTraits\n<\n \nuint32_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nArithmeticTraits\n<\n \nuint64_t\n \n>\n;\n\n\nstruct\n \nmodm\n::\nArithmeticTraits\n<\n \nunsigned\n \nchar\n \n>\n;\n\n\nstruct\n \nmodm\n::\nallocator\n::\nBlock\n::\nrebind\n<\n \ntypename\n \nU\n  \n>\n;\n\n\nstruct\n \nmodm\n::\nallocator\n::\nDynamic\n::\nrebind\n<\n \ntypename\n \nU\n  \n>\n;\n\n\nstruct\n \nmodm\n::\nallocator\n::\nStatic\n::\nrebind\n<\n \ntypename\n \nU\n  \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nConversion\n<\n \nT\n,\n \nT\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nConversion\n<\n \nT\n,\n \nvoid\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nConversion\n<\n \nvoid\n,\n \nT\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nConversion\n<\n \nvoid\n,\n \nvoid\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nEnableIf\n<\n \nclass\n \nConditional\n \n,\n \nclass\n \nT\n \n=\nvoid\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nEnableIfCondition\n<\n \nbool\n \nB\n,\n \nclass\n \nT\n=\nvoid\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nEnableIfCondition\n<\n \nfalse\n,\n \nT\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nSTATIC_ASSERTION_FAILURE\n<\n \nbool\n \nx\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nSTATIC_ASSERTION_FAILURE\n<\n \ntrue\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nSameType\n<\n \nT\n,\n \nT\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nSameType\n<\n \ntypename\n \nT\n \n,\n \ntypename\n \nU\n  \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nSelect\n<\n \nbool\n \nflag\n,\n \ntypename\n \nT\n,\n \ntypename\n \nU\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nSelect\n<\n \nfalse\n,\n \nT\n,\n \nU\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nSuperSubclass\n<\n \nT\n,\n \nvoid\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nSuperSubclass\n<\n \ntypename\n \nT\n \n,\n \ntypename\n \nU\n  \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nSuperSubclass\n<\n \nvoid\n,\n \nU\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nSuperSubclass\n<\n \nvoid\n,\n \nvoid\n \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nSuperSubclassStrict\n<\n \ntypename\n \nT\n \n,\n \ntypename\n \nU\n  \n>\n;\n\n\nstruct\n \nmodm\n::\ntmp\n::\nstatic_assert_test\n<\n \nint\n \nx\n \n>\n;\n\n\n\n// Function\n\n\nInputIterator\n \nmodm\n::\nfind\n(\nInputIterator\n \nfirst\n,\n \nInputIterator\n \nlast\n,\n \nconst\n \nT\n \n&\nvalue\n);\n\n\nvoid\n \nmodm\n::\ndummy\n();\n\n\n\n// Variable\n\n\nconstexpr\n \nuint16_t\n \nmodm\n::\nBit10\n \n=\n \n(\n1ul\n \n<<\n \n10\n);\n\n\nconstexpr\n \nuint16_t\n \nmodm\n::\nBit11\n \n=\n \n(\n1ul\n \n<<\n \n11\n);\n\n\nconstexpr\n \nuint16_t\n \nmodm\n::\nBit12\n \n=\n \n(\n1ul\n \n<<\n \n12\n);\n\n\nconstexpr\n \nuint16_t\n \nmodm\n::\nBit13\n \n=\n \n(\n1ul\n \n<<\n \n13\n);\n\n\nconstexpr\n \nuint16_t\n \nmodm\n::\nBit14\n \n=\n \n(\n1ul\n \n<<\n \n14\n);\n\n\nconstexpr\n \nuint16_t\n \nmodm\n::\nBit15\n \n=\n \n(\n1ul\n \n<<\n \n15\n);\n\n\nconstexpr\n \nuint16_t\n \nmodm\n::\nBit8\n \n=\n \n(\n1ul\n \n<<\n  \n8\n);\n\n\nconstexpr\n \nuint16_t\n \nmodm\n::\nBit9\n \n=\n \n(\n1ul\n \n<<\n  \n9\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit16\n \n=\n \n(\n1ul\n \n<<\n \n16\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit17\n \n=\n \n(\n1ul\n \n<<\n \n17\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit18\n \n=\n \n(\n1ul\n \n<<\n \n18\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit19\n \n=\n \n(\n1ul\n \n<<\n \n19\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit20\n \n=\n \n(\n1ul\n \n<<\n \n20\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit21\n \n=\n \n(\n1ul\n \n<<\n \n21\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit22\n \n=\n \n(\n1ul\n \n<<\n \n22\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit23\n \n=\n \n(\n1ul\n \n<<\n \n23\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit24\n \n=\n \n(\n1ul\n \n<<\n \n24\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit25\n \n=\n \n(\n1ul\n \n<<\n \n25\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit26\n \n=\n \n(\n1ul\n \n<<\n \n26\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit27\n \n=\n \n(\n1ul\n \n<<\n \n27\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit28\n \n=\n \n(\n1ul\n \n<<\n \n28\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit29\n \n=\n \n(\n1ul\n \n<<\n \n29\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit30\n \n=\n \n(\n1ul\n \n<<\n \n30\n);\n\n\nconstexpr\n \nuint32_t\n \nmodm\n::\nBit31\n \n=\n \n(\n1ul\n \n<<\n \n31\n);\n\n\nconstexpr\n \nuint8_t\n \nmodm\n::\nBit0\n \n=\n \n(\n1ul\n \n<<\n  \n0\n);\n\n\nconstexpr\n \nuint8_t\n \nmodm\n::\nBit1\n \n=\n \n(\n1ul\n \n<<\n  \n1\n);\n\n\nconstexpr\n \nuint8_t\n \nmodm\n::\nBit2\n \n=\n \n(\n1ul\n \n<<\n  \n2\n);\n\n\nconstexpr\n \nuint8_t\n \nmodm\n::\nBit3\n \n=\n \n(\n1ul\n \n<<\n  \n3\n);\n\n\nconstexpr\n \nuint8_t\n \nmodm\n::\nBit4\n \n=\n \n(\n1ul\n \n<<\n  \n4\n);\n\n\nconstexpr\n \nuint8_t\n \nmodm\n::\nBit5\n \n=\n \n(\n1ul\n \n<<\n  \n5\n);\n\n\nconstexpr\n \nuint8_t\n \nmodm\n::\nBit6\n \n=\n \n(\n1ul\n \n<<\n  \n6\n);\n\n\nconstexpr\n \nuint8_t\n \nmodm\n::\nBit7\n \n=\n \n(\n1ul\n \n<<\n  \n7\n);\n\n\n\n// Define\n\n\n#define MODM_STATIC_ASSERT(condition, msg)\n\n\n\n\n\nDependencies\n\u00b6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodm:utils\n\n\n\n\n\n\n\n\nmodm_utils\n\n\n\n\nmodm:\n\n\nutils\n\n\n\n\n\n\n\n\nmodm_architecture\n\n\n\n\n\n\nmodm:\n\n\narchitecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_utils->modm_architecture\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_assert\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nassert\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_assert->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\natomic\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_atomic->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_heap\n\n\n\n\n\n\nmodm:\n\n\narchitecture:\n\n\nheap\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_architecture_heap->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container\n\n\n\n\n\n\nmodm:\n\n\ncontainer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_container->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug\n\n\n\n\n\n\nmodm:\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_debug->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nad7280a\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_ad7280a->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adc_sampler\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nadc_sampler\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_adc_sampler->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_heap\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nblock.device:\n\n\nheap\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_block_device_heap->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_itg3200\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nitg3200\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_itg3200->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nnrf24\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_nrf24->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0\n\n\n\n\n\n\nmodm:\n\n\ndriver:\n\n\nvl53l0\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_driver_vl53l0->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io\n\n\n\n\n\n\nmodm:\n\n\nio\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_io->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_filter\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nfilter\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_filter->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_interpolation\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\ninterpolation\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_interpolation->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_matrix\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nmatrix\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_matrix->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_saturated\n\n\n\n\n\n\nmodm:\n\n\nmath:\n\n\nsaturated\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_math_saturated->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nadc\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_adc->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ncan\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_can->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\nclock\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_clock->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio_common\n\n\n\n\n\n\nmodm:\n\n\nplatform:\n\n\ngpio.common\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_platform_gpio_common->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer\n\n\n\n\n\n\nmodm:\n\n\nprocessing:\n\n\ntimer\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_processing_timer->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing\n\n\n\n\n\n\nmodm:\n\n\ntest:\n\n\nprocessing\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_test_processing->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_animation\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\nanimation\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_animation->modm_utils\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color\n\n\n\n\n\n\nmodm:\n\n\nui:\n\n\ncolor\n\n\n\n\n\n\n\n\n\n\n\n\nmodm_ui_color->modm_utils",
            "title": "modm:utils"
        },
        {
            "location": "/reference/module/modm-utils/#modmutils",
            "text": "",
            "title": "modm:utils"
        },
        {
            "location": "/reference/module/modm-utils/#content",
            "text": "// Class  class   modm :: allocator :: AllocatorBase <   typename   T   > ;  class   modm :: allocator :: Block <   typename   T   ,   std :: size_t   BLOCKSIZE   > ;  class   modm :: allocator :: Dynamic <   typename   T   > ;  class   modm :: allocator :: Static <   typename   T   ,   std :: size_t   N   > ;  class   modm :: tmp :: Conversion <   typename   T   ,   typename   U    > ;  class   modm :: tmp :: NullType ;  // Struct  struct   modm :: ArithmeticTraits <   char   > ;  struct   modm :: ArithmeticTraits <   double   > ;  struct   modm :: ArithmeticTraits <   float   > ;  struct   modm :: ArithmeticTraits <   int16_t   > ;  struct   modm :: ArithmeticTraits <   int32_t   > ;  struct   modm :: ArithmeticTraits <   int64_t   > ;  struct   modm :: ArithmeticTraits <   signed   char   > ;  struct   modm :: ArithmeticTraits <   typename   T    > ;  struct   modm :: ArithmeticTraits <   uint16_t   > ;  struct   modm :: ArithmeticTraits <   uint32_t   > ;  struct   modm :: ArithmeticTraits <   uint64_t   > ;  struct   modm :: ArithmeticTraits <   unsigned   char   > ;  struct   modm :: allocator :: Block :: rebind <   typename   U    > ;  struct   modm :: allocator :: Dynamic :: rebind <   typename   U    > ;  struct   modm :: allocator :: Static :: rebind <   typename   U    > ;  struct   modm :: tmp :: Conversion <   T ,   T   > ;  struct   modm :: tmp :: Conversion <   T ,   void   > ;  struct   modm :: tmp :: Conversion <   void ,   T   > ;  struct   modm :: tmp :: Conversion <   void ,   void   > ;  struct   modm :: tmp :: EnableIf <   class   Conditional   ,   class   T   = void   > ;  struct   modm :: tmp :: EnableIfCondition <   bool   B ,   class   T = void   > ;  struct   modm :: tmp :: EnableIfCondition <   false ,   T   > ;  struct   modm :: tmp :: STATIC_ASSERTION_FAILURE <   bool   x   > ;  struct   modm :: tmp :: STATIC_ASSERTION_FAILURE <   true   > ;  struct   modm :: tmp :: SameType <   T ,   T   > ;  struct   modm :: tmp :: SameType <   typename   T   ,   typename   U    > ;  struct   modm :: tmp :: Select <   bool   flag ,   typename   T ,   typename   U   > ;  struct   modm :: tmp :: Select <   false ,   T ,   U   > ;  struct   modm :: tmp :: SuperSubclass <   T ,   void   > ;  struct   modm :: tmp :: SuperSubclass <   typename   T   ,   typename   U    > ;  struct   modm :: tmp :: SuperSubclass <   void ,   U   > ;  struct   modm :: tmp :: SuperSubclass <   void ,   void   > ;  struct   modm :: tmp :: SuperSubclassStrict <   typename   T   ,   typename   U    > ;  struct   modm :: tmp :: static_assert_test <   int   x   > ;  // Function  InputIterator   modm :: find ( InputIterator   first ,   InputIterator   last ,   const   T   & value );  void   modm :: dummy ();  // Variable  constexpr   uint16_t   modm :: Bit10   =   ( 1ul   <<   10 );  constexpr   uint16_t   modm :: Bit11   =   ( 1ul   <<   11 );  constexpr   uint16_t   modm :: Bit12   =   ( 1ul   <<   12 );  constexpr   uint16_t   modm :: Bit13   =   ( 1ul   <<   13 );  constexpr   uint16_t   modm :: Bit14   =   ( 1ul   <<   14 );  constexpr   uint16_t   modm :: Bit15   =   ( 1ul   <<   15 );  constexpr   uint16_t   modm :: Bit8   =   ( 1ul   <<    8 );  constexpr   uint16_t   modm :: Bit9   =   ( 1ul   <<    9 );  constexpr   uint32_t   modm :: Bit16   =   ( 1ul   <<   16 );  constexpr   uint32_t   modm :: Bit17   =   ( 1ul   <<   17 );  constexpr   uint32_t   modm :: Bit18   =   ( 1ul   <<   18 );  constexpr   uint32_t   modm :: Bit19   =   ( 1ul   <<   19 );  constexpr   uint32_t   modm :: Bit20   =   ( 1ul   <<   20 );  constexpr   uint32_t   modm :: Bit21   =   ( 1ul   <<   21 );  constexpr   uint32_t   modm :: Bit22   =   ( 1ul   <<   22 );  constexpr   uint32_t   modm :: Bit23   =   ( 1ul   <<   23 );  constexpr   uint32_t   modm :: Bit24   =   ( 1ul   <<   24 );  constexpr   uint32_t   modm :: Bit25   =   ( 1ul   <<   25 );  constexpr   uint32_t   modm :: Bit26   =   ( 1ul   <<   26 );  constexpr   uint32_t   modm :: Bit27   =   ( 1ul   <<   27 );  constexpr   uint32_t   modm :: Bit28   =   ( 1ul   <<   28 );  constexpr   uint32_t   modm :: Bit29   =   ( 1ul   <<   29 );  constexpr   uint32_t   modm :: Bit30   =   ( 1ul   <<   30 );  constexpr   uint32_t   modm :: Bit31   =   ( 1ul   <<   31 );  constexpr   uint8_t   modm :: Bit0   =   ( 1ul   <<    0 );  constexpr   uint8_t   modm :: Bit1   =   ( 1ul   <<    1 );  constexpr   uint8_t   modm :: Bit2   =   ( 1ul   <<    2 );  constexpr   uint8_t   modm :: Bit3   =   ( 1ul   <<    3 );  constexpr   uint8_t   modm :: Bit4   =   ( 1ul   <<    4 );  constexpr   uint8_t   modm :: Bit5   =   ( 1ul   <<    5 );  constexpr   uint8_t   modm :: Bit6   =   ( 1ul   <<    6 );  constexpr   uint8_t   modm :: Bit7   =   ( 1ul   <<    7 );  // Define  #define MODM_STATIC_ASSERT(condition, msg)",
            "title": "Content"
        },
        {
            "location": "/reference/module/modm-utils/#dependencies",
            "text": "modm:utils     modm_utils   modm:  utils     modm_architecture    modm:  architecture       modm_utils->modm_architecture       modm_architecture_assert    modm:  architecture:  assert       modm_architecture_assert->modm_utils       modm_architecture_atomic    modm:  architecture:  atomic       modm_architecture_atomic->modm_utils       modm_architecture_heap    modm:  architecture:  heap       modm_architecture_heap->modm_utils       modm_container    modm:  container       modm_container->modm_utils       modm_debug    modm:  debug       modm_debug->modm_utils       modm_driver_ad7280a    modm:  driver:  ad7280a       modm_driver_ad7280a->modm_utils       modm_driver_adc_sampler    modm:  driver:  adc_sampler       modm_driver_adc_sampler->modm_utils       modm_driver_block_device_heap    modm:  driver:  block.device:  heap       modm_driver_block_device_heap->modm_utils       modm_driver_itg3200    modm:  driver:  itg3200       modm_driver_itg3200->modm_utils       modm_driver_nrf24    modm:  driver:  nrf24       modm_driver_nrf24->modm_utils       modm_driver_vl53l0    modm:  driver:  vl53l0       modm_driver_vl53l0->modm_utils       modm_io    modm:  io       modm_io->modm_utils       modm_math_filter    modm:  math:  filter       modm_math_filter->modm_utils       modm_math_interpolation    modm:  math:  interpolation       modm_math_interpolation->modm_utils       modm_math_matrix    modm:  math:  matrix       modm_math_matrix->modm_utils       modm_math_saturated    modm:  math:  saturated       modm_math_saturated->modm_utils       modm_platform_adc    modm:  platform:  adc       modm_platform_adc->modm_utils       modm_platform_can    modm:  platform:  can       modm_platform_can->modm_utils       modm_platform_clock    modm:  platform:  clock       modm_platform_clock->modm_utils       modm_platform_gpio_common    modm:  platform:  gpio.common       modm_platform_gpio_common->modm_utils       modm_processing_timer    modm:  processing:  timer       modm_processing_timer->modm_utils       modm_test_processing    modm:  test:  processing       modm_test_processing->modm_utils       modm_ui_animation    modm:  ui:  animation       modm_ui_animation->modm_utils       modm_ui_color    modm:  ui:  color       modm_ui_color->modm_utils",
            "title": "Dependencies"
        }
    ]
}